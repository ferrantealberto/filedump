
╔══════════════════════════════════════════════════════════════════════════════╗
║                              PLUGIN DUMP REPORT                             ║
╠══════════════════════════════════════════════════════════════════════════════╣
║ Plugin: whatsapp-saas-pro
║ Generato: 2025-08-19 00:47:57
║ Path: /var/www/vhosts/curiositaenotizie.it/httpdocs/stage/wp-content/plugins/whatsapp-saas-pro
║ Totale file: 23
║ Totale directory: 6
║ Dimensione totale: 320.88 KB
╚══════════════════════════════════════════════════════════════════════════════╝


================================================================================
STRUTTURA DIRECTORY
================================================================================

├── admin
│   └── class-wsp-admin.php
├── assets
│   ├── css
│   │   └── admin.css
│   └── js
│       └── admin.js
├── includes
│   ├── class-wsp-api.php
│   ├── class-wsp-campaigns.php
│   ├── class-wsp-credits.php
│   ├── class-wsp-database.php
│   ├── class-wsp-gmail.php
│   ├── class-wsp-mail2wa.php
│   ├── class-wsp-messages.php
│   ├── class-wsp-migration.php
│   └── class-wsp-settings.php
├── languages
│   └── wsp.pot
├── fix-database.php
├── fix-duplicate-key.php
├── n8n-whatsapp-workflow.json
├── plugin-dumper.php
├── test-complete-system.php
├── test-recipient.php
├── test-whatsapp-complete.php
├── test-whatsapp-complete.php_
├── uninstall.php
└── whatsapp-saas-plugin.php


================================================================================
CONTENUTO FILE
================================================================================


--------------------------------------------------------------------------------
FILE: admin/class-wsp-admin.php
SIZE: 87.27 KB
MODIFIED: 2025-08-18 18:39:32
--------------------------------------------------------------------------------
<?php
/**
 * Pannello di Amministrazione per WhatsApp SaaS Plugin
 * VERSIONE COMPLETA con dropdown destinatari funzionante + CAMPAGNE QR + TEST
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Admin {
    
    public function __construct() {
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_scripts'));
        add_action('wp_ajax_wsp_get_stats', array($this, 'ajax_get_stats'));
        add_action('wp_ajax_wsp_export_csv', array($this, 'ajax_export_csv'));
        add_action('wp_ajax_wsp_send_daily_report', array($this, 'ajax_send_daily_report'));
        add_action('wp_ajax_wsp_send_welcome_message', array($this, 'ajax_send_welcome'));
        add_action('wp_ajax_wsp_get_recipients', array($this, 'ajax_get_recipients'));
        add_action('admin_init', array($this, 'init_settings'));
        
        // NUOVI AJAX HANDLERS
        add_action('wp_ajax_wsp_test_database', array($this, 'ajax_test_database'));
        add_action('wp_ajax_wsp_test_mail2wa_send', array($this, 'ajax_test_mail2wa_send'));
        add_action('wp_ajax_wsp_test_email_processing', array($this, 'ajax_test_email_processing'));
        add_action('wp_ajax_wsp_simulate_n8n_webhook', array($this, 'ajax_simulate_n8n_webhook'));
        add_action('wp_ajax_wsp_get_campaigns_list', array($this, 'ajax_get_campaigns_list'));
        add_action('wp_ajax_wsp_get_all_campaigns_stats', array($this, 'ajax_get_all_campaigns_stats'));
        
        // Cron per invio report giornaliero
        add_action('wsp_daily_report', array($this, 'send_daily_report'));
        
        if (!wp_next_scheduled('wsp_daily_report')) {
            $report_time = get_option('wsp_report_time', '18:00');
            $timestamp = strtotime('today ' . $report_time);
            if ($timestamp < time()) {
                $timestamp = strtotime('tomorrow ' . $report_time);
            }
            wp_schedule_event($timestamp, 'daily', 'wsp_daily_report');
        }
    }
    
    public function add_admin_menu() {
        // Menu principale
        add_menu_page(
            __('WhatsApp SaaS', 'wsp'),
            __('WhatsApp SaaS', 'wsp'),
            'manage_options',
            'wsp-dashboard',
            array($this, 'dashboard_page'),
            'dashicons-whatsapp',
            30
        );
        
        // Sottomenu esistenti
        add_submenu_page('wsp-dashboard', __('Dashboard', 'wsp'), __('Dashboard', 'wsp'), 'manage_options', 'wsp-dashboard', array($this, 'dashboard_page'));
        add_submenu_page('wsp-dashboard', __('Numeri WhatsApp', 'wsp'), __('Numeri WhatsApp', 'wsp'), 'manage_options', 'wsp-numbers', array($this, 'numbers_page'));
        add_submenu_page('wsp-dashboard', __('Messaggi', 'wsp'), __('Messaggi', 'wsp'), 'manage_options', 'wsp-messages', array($this, 'messages_page'));
        add_submenu_page('wsp-dashboard', __('Crediti', 'wsp'), __('Crediti', 'wsp'), 'manage_options', 'wsp-credits', array($this, 'credits_page'));
        add_submenu_page('wsp-dashboard', __('Report', 'wsp'), __('Report', 'wsp'), 'manage_options', 'wsp-reports', array($this, 'reports_page'));
        add_submenu_page('wsp-dashboard', __('Impostazioni', 'wsp'), __('Impostazioni', 'wsp'), 'manage_options', 'wsp-settings', array($this, 'settings_page'));
        add_submenu_page('wsp-dashboard', __('Logs', 'wsp'), __('Logs', 'wsp'), 'manage_options', 'wsp-logs', array($this, 'logs_page'));
        
        // NUOVI MENU
        add_submenu_page('wsp-dashboard', __('Campagne QR', 'wsp'), __('Campagne QR', 'wsp'), 'manage_options', 'wsp-campaigns', array($this, 'campaigns_page'));
        add_submenu_page('wsp-dashboard', __('Test Sistema', 'wsp'), __('Test Sistema', 'wsp'), 'manage_options', 'wsp-test', array($this, 'test_page'));
    }
    
    public function enqueue_admin_scripts($hook) {
        if (strpos($hook, 'wsp-') === false) {
            return;
        }
        
        wp_enqueue_style('wsp-admin-css', WSP_PLUGIN_URL . 'assets/css/admin.css', array(), WSP_VERSION);
        wp_enqueue_script('wsp-admin-js', WSP_PLUGIN_URL . 'assets/js/admin.js', array('jquery'), WSP_VERSION, true);
        
        // Aggiungi Select2 per dropdown avanzati
        wp_enqueue_style('select2', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css');
        wp_enqueue_script('select2', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js', array('jquery'));
        
        // Aggiungi QRCode.js per campagne
        if ($hook === 'whatsapp-saas_page_wsp-campaigns') {
            wp_enqueue_script('qrcodejs', 'https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js', array(), '1.0.0', true);
        }
        
        wp_localize_script('wsp-admin-js', 'wsp_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('wsp_nonce'),
            'strings' => array(
                'loading' => __('Caricamento...', 'wsp'),
                'error' => __('Errore nel caricamento', 'wsp'),
                'success' => __('Operazione completata', 'wsp'),
                'export_success' => __('Export completato', 'wsp'),
                'email_sent' => __('Email inviata con successo', 'wsp'),
                'confirm_send' => __('Confermi invio messaggio?', 'wsp')
            )
        ));
    }
    
    public function dashboard_page() {
        $stats = WSP_Database::get_statistics();
        $credits = get_option('wsp_credits_balance', 0);
        ?>
        <div class="wrap">
            <h1>📊 WhatsApp SaaS Dashboard</h1>
            
            <div class="wsp-stats-grid">
                <div class="wsp-stat-card">
                    <h3><?php echo number_format($stats['total_numbers'] ?? 0); ?></h3>
                    <p>Numeri Totali</p>
                </div>
                <div class="wsp-stat-card">
                    <h3><?php echo number_format($stats['numbers_today'] ?? 0); ?></h3>
                    <p>Numeri Oggi</p>
                </div>
                <div class="wsp-stat-card">
                    <h3><?php echo number_format($stats['unique_recipients_today'] ?? 0); ?></h3>
                    <p>Destinatari Oggi</p>
                </div>
                <div class="wsp-stat-card">
                    <h3><?php echo number_format($credits); ?></h3>
                    <p>Crediti Disponibili</p>
                </div>
            </div>
            
            <div class="wsp-section">
                <h2>⚡ Azioni Rapide</h2>
                <p>
                    <button class="button button-primary" onclick="wspExportToday()">📥 Esporta Oggi</button>
                    <button class="button button-primary" onclick="wspSendDailyReport()">📧 Invia Report</button>
                    <button class="button button-primary" onclick="wspTestAPI()">🧪 Test API</button>
                    <a href="?page=wsp-numbers" class="button">📱 Gestisci Numeri</a>
                    <a href="?page=wsp-campaigns" class="button button-primary">📱 Crea Campagna QR</a>
                    <a href="?page=wsp-test" class="button">🧪 Test Sistema</a>
                </p>
            </div>
            
            <div class="wsp-section">
                <h2>🔗 Integrazione API</h2>
                <div class="wsp-api-status">
                    <table class="form-table">
                        <tr>
                            <th>Endpoint API:</th>
                            <td><code><?php echo home_url('/wp-json/wsp/v1/extract'); ?></code></td>
                        </tr>
                        <tr>
                            <th>API Key:</th>
                            <td><code><?php echo esc_html(get_option('wsp_api_key')); ?></code></td>
                        </tr>
                        <tr>
                            <th>Stato:</th>
                            <td><span id="wsp-api-test-result">Non testato</span></td>
                        </tr>
                    </table>
                </div>
            </div>
            
            <div class="wsp-section">
                <h2>📈 Ultimi Numeri Estratti</h2>
                <?php
                $recent_numbers = WSP_Database::get_whatsapp_numbers(5, 0);
                if (!empty($recent_numbers)): ?>
                    <table class="wp-list-table widefat">
                        <thead>
                            <tr>
                                <th>Mittente</th>
                                <th>Destinatario</th>
                                <th>Data/Ora</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($recent_numbers as $number): ?>
                                <tr>
                                    <td><?php echo esc_html($number->sender_number); ?></td>
                                    <td><?php 
                                        $recipient = property_exists($number, 'recipient_number') ? $number->recipient_number : '';
                                        echo esc_html($recipient ?: '-'); 
                                    ?></td>
                                    <td><?php echo esc_html(date('d/m H:i', strtotime($number->created_at))); ?></td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>Nessun numero estratto.</p>
                <?php endif; ?>
            </div>
        </div>
        
        <script>
        function wspTestAPI() {
            const resultElement = document.getElementById('wsp-api-test-result');
            resultElement.innerHTML = '🔄 Testing...';
            
            fetch('<?php echo home_url('/wp-json/wsp/v1/ping'); ?>')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        resultElement.innerHTML = '<span style="color:green;">✅ API Attiva</span>';
                    } else {
                        resultElement.innerHTML = '<span style="color:red;">❌ API Non Risponde</span>';
                    }
                })
                .catch(error => {
                    resultElement.innerHTML = '<span style="color:red;">❌ Errore: ' + error.message + '</span>';
                });
        }
        
        function wspExportToday() {
            const today = new Date().toISOString().split('T')[0];
            window.location.href = '<?php echo admin_url('admin-ajax.php'); ?>?action=wsp_export_csv&nonce=<?php echo wp_create_nonce('wsp_nonce'); ?>&date_from=' + today + '&date_to=' + today;
        }
        
        function wspSendDailyReport() {
            if (confirm('Inviare il report giornaliero ora?')) {
                jQuery.post(wsp_ajax.ajax_url, {
                    action: 'wsp_send_daily_report',
                    nonce: wsp_ajax.nonce
                }, function(response) {
                    alert(response.success ? 'Report inviato!' : 'Errore: ' + response.data);
                });
            }
        }
        </script>
        
        <style>
        .wsp-stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; 
            margin-bottom: 30px; 
        }
        .wsp-stat-card { 
            background: #fff; 
            border: 1px solid #ccd0d4; 
            border-radius: 8px; 
            padding: 20px; 
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .wsp-stat-card h3 { 
            font-size: 2.5em; 
            color: #2271b1; 
            margin: 0 0 10px 0; 
        }
        .wsp-stat-card p {
            margin: 0;
            color: #666;
            font-weight: 500;
        }
        .wsp-section { 
            background: #fff; 
            border: 1px solid #ccd0d4; 
            border-radius: 8px; 
            padding: 20px; 
            margin-bottom: 20px; 
        }
        .wsp-api-status { 
            background: #f6f7f7; 
            padding: 15px; 
            border-radius: 5px; 
        }
        .wsp-api-status code {
            background: #fff;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 12px;
        }
        </style>
        <?php
    }
    
    public function numbers_page() {
        // Gestione filtri
        $filters = array(
            'search' => $_GET['search'] ?? '',
            'recipient' => $_GET['recipient'] ?? '',
            'date_from' => $_GET['date_from'] ?? '',
            'date_to' => $_GET['date_to'] ?? '',
            'time_from' => $_GET['time_from'] ?? '',
            'time_to' => $_GET['time_to'] ?? ''
        );
        
        $page = isset($_GET['paged']) ? max(1, intval($_GET['paged'])) : 1;
        $per_page = 25;
        $offset = ($page - 1) * $per_page;
        
        $numbers = WSP_Database::get_whatsapp_numbers($per_page, $offset, $filters);
        
        // Ottieni lista destinatari unici per il dropdown
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $recipients_list = $wpdb->get_results(
            "SELECT DISTINCT recipient_number, recipient_name 
             FROM $table_name 
             WHERE recipient_number != '' AND recipient_number IS NOT NULL
             ORDER BY recipient_name, recipient_number"
        );
        ?>
        <div class="wrap">
            <h1>📱 Numeri WhatsApp</h1>
            
            <!-- Sezione Filtri -->
            <div class="wsp-filters">
                <form method="get" action="">
                    <input type="hidden" name="page" value="wsp-numbers">
                    
                    <div class="filter-row">
                        <input type="text" name="search" placeholder="🔍 Cerca..." value="<?php echo esc_attr($filters['search']); ?>" style="width:200px;">
                        
                        <!-- Dropdown Destinatari con Select2 -->
                        <select name="recipient" id="recipient-filter" style="width:250px;">
                            <option value="">👤 Tutti i destinatari...</option>
                            <?php foreach ($recipients_list as $recipient): ?>
                                <?php 
                                $display_name = $recipient->recipient_name ?: $recipient->recipient_number;
                                $value = $recipient->recipient_number;
                                $selected = ($filters['recipient'] == $value) ? 'selected' : '';
                                ?>
                                <option value="<?php echo esc_attr($value); ?>" <?php echo $selected; ?>>
                                    <?php echo esc_html($display_name); ?> 
                                    <?php if ($recipient->recipient_name && $recipient->recipient_number): ?>
                                        (<?php echo esc_html($recipient->recipient_number); ?>)
                                    <?php endif; ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                        
                        <input type="date" name="date_from" value="<?php echo esc_attr($filters['date_from']); ?>" title="Da data">
                        <input type="date" name="date_to" value="<?php echo esc_attr($filters['date_to']); ?>" title="A data">
                        <input type="time" name="time_from" value="<?php echo esc_attr($filters['time_from']); ?>" title="Da ora">
                        <input type="time" name="time_to" value="<?php echo esc_attr($filters['time_to']); ?>" title="A ora">
                        <button type="submit" class="button">🔍 Filtra</button>
                        <a href="?page=wsp-numbers" class="button">↻ Reset</a>
                        <button type="button" class="button button-primary" onclick="wspExportFiltered()">📥 Esporta CSV</button>
                    </div>
                </form>
            </div>
            
            <!-- Statistiche filtri attivi -->
            <?php if (!empty($filters['recipient'])): ?>
                <div class="notice notice-info inline" style="margin: 10px 0;">
                    <p>
                        Filtro attivo per destinatario: <strong><?php echo esc_html($filters['recipient']); ?></strong>
                        <?php
                        $filtered_count = $wpdb->get_var($wpdb->prepare(
                            "SELECT COUNT(*) FROM $table_name WHERE recipient_number = %s",
                            $filters['recipient']
                        ));
                        ?>
                        (<?php echo $filtered_count; ?> record trovati)
                    </p>
                </div>
            <?php endif; ?>
            
            <!-- Tabella Numeri -->
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th width="5%">ID</th>
                        <th width="15%">Mittente</th>
                        <th width="15%">Nome Mittente</th>
                        <th width="15%">Destinatario</th>
                        <th width="15%">Nome Dest.</th>
                        <th width="10%">Data</th>
                        <th width="8%">Ora</th>
                        <th width="10%">Metodo</th>
                        <th width="7%">Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($numbers)): ?>
                        <?php foreach ($numbers as $number): ?>
                            <tr>
                                <td><?php echo $number->id; ?></td>
                                <td>
                                    <strong><?php echo esc_html($number->sender_formatted ?: $number->sender_number); ?></strong>
                                    <?php if ($number->sender_email): ?>
                                        <br><small><?php echo esc_html($number->sender_email); ?></small>
                                    <?php endif; ?>
                                </td>
                                <td><?php echo esc_html($number->sender_name ?: '-'); ?></td>
                                <td>
                                    <?php 
                                    $recipient_number = property_exists($number, 'recipient_number') ? $number->recipient_number : '';
                                    $recipient_email = property_exists($number, 'recipient_email') ? $number->recipient_email : '';
                                    
                                    if ($recipient_number): ?>
                                        <strong><?php echo esc_html($recipient_number); ?></strong>
                                        <?php if ($recipient_email): ?>
                                            <br><small><?php echo esc_html($recipient_email); ?></small>
                                        <?php endif; ?>
                                    <?php else: ?>
                                        <span style="color:#999;">-</span>
                                    <?php endif; ?>
                                </td>
                                <td>
                                    <?php 
                                    $recipient_name = property_exists($number, 'recipient_name') ? $number->recipient_name : '';
                                    echo esc_html($recipient_name ?: '-'); 
                                    ?>
                                </td>
                                <td><?php echo esc_html(date('d/m/Y', strtotime($number->created_at))); ?></td>
                                <td><?php echo esc_html(date('H:i:s', strtotime($number->created_at))); ?></td>
                                <td>
                                    <span class="badge"><?php echo esc_html($number->extraction_method); ?></span>
                                </td>
                                <td>
                                    <button class="button button-small" onclick="wspSendWelcome(<?php echo $number->id; ?>)" title="Invia messaggio">📤</button>
                                    <button class="button button-small" onclick="wspViewDetails(<?php echo $number->id; ?>)" title="Dettagli">👁️</button>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr><td colspan="9" style="text-align:center; padding:20px;">
                            <p>😔 Nessun numero trovato</p>
                        </td></tr>
                    <?php endif; ?>
                </tbody>
            </table>
            
            <!-- Paginazione -->
            <?php if (!empty($numbers)): ?>
                <div class="tablenav bottom">
                    <div class="tablenav-pages">
                        <?php if ($page > 1): ?>
                            <a href="?page=wsp-numbers&paged=<?php echo ($page - 1); ?>&<?php echo http_build_query($filters); ?>" class="button">← Precedente</a>
                        <?php endif; ?>
                        <span class="displaying-num">Pagina <?php echo $page; ?></span>
                        <?php if (count($numbers) == $per_page): ?>
                            <a href="?page=wsp-numbers&paged=<?php echo ($page + 1); ?>&<?php echo http_build_query($filters); ?>" class="button">Successiva →</a>
                        <?php endif; ?>
                    </div>
                </div>
            <?php endif; ?>
        </div>
        
        <style>
        .wsp-filters {
            background: #fff;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid #ccd0d4;
            border-radius: 5px;
        }
        .filter-row {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }
        .filter-row input, .filter-row select {
            padding: 5px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .badge {
            background: #f0f0f1;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 11px;
        }
        .tablenav {
            margin: 20px 0;
        }
        .tablenav-pages {
            text-align: right;
        }
        .notice.inline {
            margin: 10px 0 !important;
        }
        </style>
        
        <script>
        jQuery(document).ready(function($) {
            $('#recipient-filter').select2({
                placeholder: '👤 Seleziona destinatario...',
                allowClear: true,
                width: 'resolve'
            });
        });
        
        function wspExportFiltered() {
            const params = new URLSearchParams(window.location.search);
            params.set('action', 'wsp_export_csv');
            params.set('nonce', wsp_ajax.nonce);
            
            window.location.href = wsp_ajax.ajax_url + '?' + params.toString();
        }
        
        function wspSendWelcome(numberId) {
            if (confirm('Inviare messaggio di benvenuto?')) {
                jQuery.post(wsp_ajax.ajax_url, {
                    action: 'wsp_send_welcome_message',
                    nonce: wsp_ajax.nonce,
                    number_id: numberId
                }, function(response) {
                    alert(response.success ? '✅ Messaggio inviato!' : '❌ Errore: ' + response.message);
                });
            }
        }
        
        function wspViewDetails(numberId) {
            alert('Dettagli numero #' + numberId);
        }
        </script>
        <?php
    }
    
    public function campaigns_page() {
        ?>
        <div class="wrap">
            <h1>📱 Campagne QR WhatsApp</h1>
            
            <!-- Tab Navigation -->
            <nav class="nav-tab-wrapper">
                <a href="#create" class="nav-tab nav-tab-active" data-tab="create">➕ Crea Campagna</a>
                <a href="#list" class="nav-tab" data-tab="list">📋 Lista Campagne</a>
                <a href="#stats" class="nav-tab" data-tab="stats">📊 Statistiche</a>
            </nav>
            
            <!-- Tab Create -->
            <div id="tab-create" class="tab-content active">
                <div class="wsp-campaign-creator">
                    <form id="wsp-campaign-form">
                        <div class="wsp-form-grid">
                            <div class="wsp-form-section">
                                <h2>📞 Informazioni Base</h2>
                                
                                <div class="form-group">
                                    <label>Nome Campagna *</label>
                                    <input type="text" id="campaign_name" name="name" required 
                                           placeholder="Es: Promo Natale 2024">
                                </div>
                                
                                <div class="form-group">
                                    <label>Numero WhatsApp Destinatario *</label>
                                    <input type="tel" id="phone_number" name="phone_number" required 
                                           placeholder="Es: 393355366950">
                                </div>
                                
                                <div class="form-group">
                                    <label>Descrizione QR Code</label>
                                    <div class="input-with-icon">
                                        <input type="text" class="icon-input" id="descriptionIcon" 
                                               placeholder="📋" maxlength="3">
                                        <textarea id="description" name="description" 
                                                  placeholder="Inserisci una descrizione"></textarea>
                                    </div>
                                    <div class="icon-suggestions">
                                        <span class="icon-suggestion" onclick="setIcon('descriptionIcon', '📋')">📋 Info</span>
                                        <span class="icon-suggestion" onclick="setIcon('descriptionIcon', '📄')">📄 Documento</span>
                                        <span class="icon-suggestion" onclick="setIcon('descriptionIcon', '💼')">💼 Business</span>
                                        <span class="icon-suggestion" onclick="setIcon('descriptionIcon', '🎯')">🎯 Obiettivo</span>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>Testo Messaggio WhatsApp</label>
                                    <div class="input-with-icon">
                                        <input type="text" class="icon-input" id="messageTextIcon" 
                                               placeholder="💬" maxlength="3">
                                        <textarea id="message_text" name="message_text" 
                                                  placeholder="Testo principale del messaggio"></textarea>
                                    </div>
                                    <div class="icon-suggestions">
                                        <span class="icon-suggestion" onclick="setIcon('messageTextIcon', '💬')">💬 Chat</span>
                                        <span class="icon-suggestion" onclick="setIcon('messageTextIcon', '📝')">📝 Messaggio</span>
                                        <span class="icon-suggestion" onclick="setIcon('messageTextIcon', '✨')">✨ Speciale</span>
                                        <span class="icon-suggestion" onclick="setIcon('messageTextIcon', '🔥')">🔥 Hot</span>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>Testo Aggiuntivo</label>
                                    <div class="input-with-icon">
                                        <input type="text" class="icon-input" id="sendTextIcon" 
                                               placeholder="📝" maxlength="3">
                                        <textarea id="send_text" name="send_text" 
                                                  placeholder="Testo aggiuntivo"></textarea>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>Link da Includere</label>
                                    <div class="input-with-icon">
                                        <input type="text" class="icon-input" id="linkIcon" 
                                               placeholder="🔗" maxlength="3">
                                        <input type="text" id="link_description" name="link_description" 
                                               placeholder="Descrizione link">
                                    </div>
                                    <input type="url" id="link_url" name="link_url" 
                                           placeholder="https://esempio.com" style="margin-top: 10px;">
                                </div>
                                
                                <div class="form-group">
                                    <label>Riferimento ID</label>
                                    <input type="text" id="ref_id" name="ref_id" 
                                           placeholder="Es: PROMO2024" 
                                           value="QR_<?php echo uniqid(); ?>">
                                </div>
                            </div>
                            
                            <div class="wsp-form-section">
                                <h2>🎨 Personalizzazione QR</h2>
                                
                                <div class="form-group">
                                    <label>Dimensione QR (px)</label>
                                    <input type="number" id="qr_size" name="qr_size" 
                                           value="256" min="128" max="512">
                                </div>
                                
                                <div class="form-group">
                                    <label>Colore QR</label>
                                    <input type="color" id="qr_color" name="qr_color" value="#000000">
                                </div>
                                
                                <div class="form-group">
                                    <label>Colore Sfondo</label>
                                    <input type="color" id="qr_bg_color" name="qr_bg_color" value="#FFFFFF">
                                </div>
                                
                                <h3>➕ Campi Personalizzati</h3>
                                <div id="custom-fields-container">
                                    <button type="button" class="button" onclick="addCustomField()">
                                        Aggiungi Campo
                                    </button>
                                </div>
                                
                                <div class="form-group" style="margin-top: 30px;">
                                    <button type="submit" class="button button-primary button-hero">
                                        🚀 Genera Campagna QR
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                    
                    <!-- Preview QR -->
                    <div id="qr-preview" style="display: none;">
                        <h2>📱 Anteprima QR Code</h2>
                        <div id="qrcode-container"></div>
                        <div id="campaign-links">
                            <p><strong>Link WhatsApp:</strong> <span id="whatsapp-link"></span></p>
                            <p><strong>Landing Page:</strong> <span id="landing-link"></span></p>
                        </div>
                        <div class="button-group">
                            <button class="button" onclick="downloadQR()">📥 Scarica QR</button>
                            <button class="button" onclick="copyWhatsAppLink()">📋 Copia Link</button>
                            <button class="button button-primary" onclick="testCampaign()">🧪 Test Campagna</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tab List -->
            <div id="tab-list" class="tab-content" style="display: none;">
                <h2>📋 Campagne Attive</h2>
                <table class="wp-list-table widefat fixed striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nome</th>
                            <th>Numero</th>
                            <th>Ref ID</th>
                            <th>Scansioni</th>
                            <th>Creata</th>
                            <th>Azioni</th>
                        </tr>
                    </thead>
                    <tbody id="campaigns-list">
                        <!-- Popolato via AJAX -->
                    </tbody>
                </table>
            </div>
            
            <!-- Tab Stats -->
            <div id="tab-stats" class="tab-content" style="display: none;">
                <h2>📊 Statistiche Campagne</h2>
                <div id="campaign-stats-container">
                    <!-- Popolato via AJAX -->
                </div>
            </div>
        </div>
        
        <style>
        .wsp-campaign-creator {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }
        .wsp-form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }
        .wsp-form-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        .form-group input[type="text"],
        .form-group input[type="tel"],
        .form-group input[type="url"],
        .form-group input[type="number"],
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .input-with-icon {
            display: flex;
            gap: 10px;
            align-items: flex-start;
        }
        .icon-input {
            width: 60px !important;
            text-align: center;
            font-size: 1.3em;
        }
        .icon-suggestions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
            flex-wrap: wrap;
        }
        .icon-suggestion {
            padding: 6px 10px;
            background: #f0f8ff;
            border: 1px solid #667eea;
            border-radius: 15px;
            cursor: pointer;
            font-size: 14px;
        }
        .icon-suggestion:hover {
            background: #667eea;
            color: white;
        }
        .nav-tab-wrapper {
            margin-bottom: 20px;
        }
        .tab-content {
            background: white;
            padding: 20px;
            border-radius: 5px;
        }
        #qrcode-container {
            text-align: center;
            margin: 20px 0;
        }
        .button-group {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }
        .custom-field-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }
        @media (max-width: 768px) {
            .wsp-form-grid {
                grid-template-columns: 1fr;
            }
        }
        </style>
        
        <script>
        let customFieldCount = 0;
        let currentCampaignData = null;
        
        // Tab navigation
        jQuery(document).ready(function($) {
            $('.nav-tab').on('click', function(e) {
                e.preventDefault();
                const tab = $(this).data('tab');
                
                $('.nav-tab').removeClass('nav-tab-active');
                $(this).addClass('nav-tab-active');
                
                $('.tab-content').hide();
                $('#tab-' + tab).show();
                
                if (tab === 'list') {
                    loadCampaignsList();
                } else if (tab === 'stats') {
                    loadCampaignStats();
                }
            });
            
            // Form submission
            $('#wsp-campaign-form').on('submit', function(e) {
                e.preventDefault();
                createCampaign();
            });
        });
        
        function setIcon(inputId, icon) {
            document.getElementById(inputId).value = icon;
        }
        
        function addCustomField() {
            customFieldCount++;
            const container = document.getElementById('custom-fields-container');
            const fieldHtml = `
                <div class="custom-field-row" id="field-${customFieldCount}">
                    <input type="text" placeholder="Icona" style="width: 60px;" maxlength="3">
                    <input type="text" placeholder="Nome campo" style="width: 150px;">
                    <input type="text" placeholder="Valore" style="width: 200px;">
                    <button type="button" class="button" onclick="removeCustomField(${customFieldCount})">❌</button>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', fieldHtml);
        }
        
        function removeCustomField(id) {
            document.getElementById('field-' + id).remove();
        }
        
        function createCampaign() {
            const formData = new FormData(document.getElementById('wsp-campaign-form'));
            
            // Aggiungi icone
            formData.append('icons[description]', document.getElementById('descriptionIcon').value);
            formData.append('icons[message]', document.getElementById('messageTextIcon').value);
            formData.append('icons[send_text]', document.getElementById('sendTextIcon').value);
            formData.append('icons[link]', document.getElementById('linkIcon').value);
            
            // Aggiungi campi personalizzati
            const customFields = [];
            document.querySelectorAll('.custom-field-row').forEach(row => {
                const inputs = row.querySelectorAll('input');
                if (inputs[1].value && inputs[2].value) {
                    customFields.push({
                        icon: inputs[0].value || '💡',
                        name: inputs[1].value,
                        value: inputs[2].value
                    });
                }
            });
            formData.append('custom_fields', JSON.stringify(customFields));
            
            // Aggiungi nonce e action
            formData.append('action', 'wsp_create_campaign');
            formData.append('nonce', '<?php echo wp_create_nonce('wsp_nonce'); ?>');
            
            jQuery.ajax({
                url: ajaxurl,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        currentCampaignData = response.data;
                        showQRPreview(response.data);
                        alert('✅ Campagna creata con successo!');
                    } else {
                        alert('❌ Errore: ' + response.data);
                    }
                },
                error: function() {
                    alert('❌ Errore nella creazione della campagna');
                }
            });
        }
        
        function showQRPreview(data) {
            document.getElementById('qr-preview').style.display = 'block';
            document.getElementById('whatsapp-link').textContent = data.whatsapp_link;
            document.getElementById('landing-link').innerHTML = data.landing_page_url ? 
                `<a href="${data.landing_page_url}" target="_blank">${data.landing_page_url}</a>` : 
                'N/A';
            
            // Genera QR Code
            const qrContainer = document.getElementById('qrcode-container');
            qrContainer.innerHTML = '';
            
            // Usa QRCode.js library
            if (typeof QRCode !== 'undefined') {
                new QRCode(qrContainer, {
                    text: data.qr_data,
                    width: document.getElementById('qr_size').value || 256,
                    height: document.getElementById('qr_size').value || 256,
                    colorDark: document.getElementById('qr_color').value || '#000000',
                    colorLight: document.getElementById('qr_bg_color').value || '#FFFFFF'
                });
            } else {
                // Fallback: usa servizio esterno
                qrContainer.innerHTML = `<img src="https://api.qrserver.com/v1/create-qr-code/?size=256x256&data=${encodeURIComponent(data.qr_data)}" alt="QR Code">`;
            }
        }
        
        function downloadQR() {
            const canvas = document.querySelector('#qrcode-container canvas');
            if (canvas) {
                const link = document.createElement('a');
                link.download = 'qr-campaign-' + (currentCampaignData?.ref_id || 'code') + '.png';
                link.href = canvas.toDataURL();
                link.click();
            }
        }
        
        function copyWhatsAppLink() {
            if (currentCampaignData?.whatsapp_link) {
                navigator.clipboard.writeText(currentCampaignData.whatsapp_link);
                alert('✅ Link copiato negli appunti!');
            }
        }
        
        function testCampaign() {
            if (currentCampaignData?.whatsapp_link) {
                window.open(currentCampaignData.whatsapp_link, '_blank');
            }
        }
        
        function loadCampaignsList() {
            jQuery.post(ajaxurl, {
                action: 'wsp_get_campaigns_list',
                nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>'
            }, function(response) {
                if (response.success && response.data.campaigns) {
                    const tbody = document.getElementById('campaigns-list');
                    tbody.innerHTML = response.data.campaigns.map(campaign => `
                        <tr>
                            <td>${campaign.id}</td>
                            <td>${campaign.name}</td>
                            <td>${campaign.phone_number}</td>
                            <td>${campaign.ref_id}</td>
                            <td>${campaign.total_scans}</td>
                            <td>${campaign.created_at}</td>
                            <td>
                                <button class="button button-small" onclick="viewCampaign(${campaign.id})">👁️</button>
                                <button class="button button-small" onclick="getCampaignStats(${campaign.id})">📊</button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    document.getElementById('campaigns-list').innerHTML = '<tr><td colspan="7">Nessuna campagna trovata</td></tr>';
                }
            });
        }
        
        function loadCampaignStats() {
            jQuery.post(ajaxurl, {
                action: 'wsp_get_all_campaigns_stats',
                nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>'
            }, function(response) {
                if (response.success) {
                    document.getElementById('campaign-stats-container').innerHTML = response.data.html || '<p>Nessuna statistica disponibile</p>';
                }
            });
        }
        
        function viewCampaign(id) {
            alert('Visualizza campagna #' + id);
        }
        
        function getCampaignStats(id) {
            alert('Statistiche campagna #' + id);
        }
        </script>
        <?php
    }
    
    public function test_page() {
        ?>
        <div class="wrap">
            <h1>🧪 Test Sistema WhatsApp SaaS</h1>
            
            <div class="wsp-test-container">
                <!-- Test n8n Integration -->
                <div class="test-section">
                    <h2>🔌 Test Integrazione n8n</h2>
                    <p>Verifica la comunicazione con n8n per l'estrazione automatica dei numeri.</p>
                    
                    <div class="test-controls">
                        <button class="button button-primary" onclick="testN8nConnection()">
                            Test Connessione n8n
                        </button>
                        <button class="button" onclick="simulateN8nWebhook()">
                            Simula Webhook n8n
                        </button>
                    </div>
                    
                    <div id="n8n-test-result" class="test-result"></div>
                </div>
                
                <!-- Test Mail2Wa -->
                <div class="test-section">
                    <h2>📧 Test Mail2Wa Integration</h2>
                    <p>Verifica l'invio messaggi tramite Mail2Wa.</p>
                    
                    <div class="test-controls">
                        <input type="tel" id="test-phone" placeholder="Numero test (es: 393355366950)">
                        <input type="text" id="test-message" placeholder="Messaggio di test">
                        <button class="button button-primary" onclick="testMail2WaSend()">
                            Invia Test WhatsApp
                        </button>
                    </div>
                    
                    <div id="mail2wa-test-result" class="test-result"></div>
                </div>
                
                <!-- Test Email Processing -->
                <div class="test-section">
                    <h2>📨 Test Elaborazione Email</h2>
                    <p>Simula l'elaborazione di un'email da upgradeservizi.eu</p>
                    
                    <div class="test-controls">
                        <textarea id="test-email-content" rows="5" placeholder="Incolla qui il contenuto dell'email..."></textarea>
                        <button class="button button-primary" onclick="testEmailProcessing()">
                            Processa Email
                        </button>
                    </div>
                    
                    <div id="email-test-result" class="test-result"></div>
                </div>
                
                <!-- Test Completo Workflow -->
                <div class="test-section">
                    <h2>🚀 Test Workflow Completo</h2>
                    <p>Esegue un test end-to-end del sistema.</p>
                    
                    <div class="test-controls">
                        <button class="button button-hero button-primary" onclick="runCompleteTest()">
                            🧪 Avvia Test Completo
                        </button>
                    </div>
                    
                    <div id="complete-test-result" class="test-result"></div>
                </div>
            </div>
        </div>
        
        <style>
        .wsp-test-container {
            max-width: 800px;
            margin: 20px 0;
        }
        .test-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .test-section h2 {
            margin-top: 0;
            color: #333;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }
        .test-controls {
            margin: 20px 0;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .test-controls input,
        .test-controls textarea {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .test-result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }
        .test-result.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            display: block;
        }
        .test-result.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            display: block;
        }
        .test-result.info {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
            display: block;
        }
        .test-result pre {
            background: #f4f4f4;
            padding: 10px;
            border-radius: 3px;
            overflow-x: auto;
        }
        </style>
        
        <script>
        function testN8nConnection() {
            const resultDiv = document.getElementById('n8n-test-result');
            resultDiv.className = 'test-result info';
            resultDiv.innerHTML = '⏳ Testing connessione n8n...';
            resultDiv.style.display = 'block';
            
            // Simula test dati da n8n
            const testData = {
                numbers: [
                    {
                        messageId: 'test_' + Date.now(),
                        threadId: 'thread_test',
                        senderNumber: '+393331234567',
                        senderName: 'Test n8n',
                        recipientNumber: '+393339876543',
                        recipientName: 'Test Recipient',
                        extractionMethod: 'n8n_test',
                        processedDate: new Date().toISOString().split('T')[0],
                        processedTime: new Date().toTimeString().split(' ')[0]
                    }
                ]
            };
            
            jQuery.ajax({
                url: '<?php echo home_url('/wp-json/wsp/v1/extract'); ?>',
                type: 'POST',
                headers: {
                    'X-API-Key': '<?php echo get_option('wsp_api_key'); ?>',
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify(testData),
                success: function(response) {
                    resultDiv.className = 'test-result success';
                    resultDiv.innerHTML = '✅ Connessione n8n riuscita!<pre>' + JSON.stringify(response, null, 2) + '</pre>';
                },
                error: function(xhr) {
                    resultDiv.className = 'test-result error';
                    resultDiv.innerHTML = '❌ Errore connessione n8n: ' + xhr.responseText;
                }
            });
        }
        
        function simulateN8nWebhook() {
            const resultDiv = document.getElementById('n8n-test-result');
            resultDiv.className = 'test-result info';
            resultDiv.innerHTML = '⏳ Simulazione webhook n8n...';
            resultDiv.style.display = 'block';
            
            jQuery.post(ajaxurl, {
                action: 'wsp_simulate_n8n_webhook',
                nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>'
            }, function(response) {
                if (response.success) {
                    resultDiv.className = 'test-result success';
                    resultDiv.innerHTML = '✅ Webhook simulato con successo!<pre>' + JSON.stringify(response.data, null, 2) + '</pre>';
                } else {
                    resultDiv.className = 'test-result error';
                    resultDiv.innerHTML = '❌ Errore: ' + response.data;
                }
            });
        }
        
        function testMail2WaSend() {
            const phone = document.getElementById('test-phone').value;
            const message = document.getElementById('test-message').value || 'Test messaggio da WhatsApp SaaS Plugin';
            const resultDiv = document.getElementById('mail2wa-test-result');
            
            if (!phone) {
                alert('Inserisci un numero di telefono');
                return;
            }
            
            resultDiv.className = 'test-result info';
            resultDiv.innerHTML = '⏳ Invio messaggio di test...';
            resultDiv.style.display = 'block';
            
            jQuery.post(ajaxurl, {
                action: 'wsp_test_mail2wa_send',
                nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>',
                phone: phone,
                message: message
            }, function(response) {
                if (response.success) {
                    resultDiv.className = 'test-result success';
                    resultDiv.innerHTML = '✅ Messaggio inviato!<pre>' + JSON.stringify(response.data, null, 2) + '</pre>';
                } else {
                    resultDiv.className = 'test-result error';
                    resultDiv.innerHTML = '❌ Errore: ' + response.data;
                }
            });
        }
        
        function testEmailProcessing() {
            const content = document.getElementById('test-email-content').value;
            const resultDiv = document.getElementById('email-test-result');
            
            if (!content) {
                alert('Inserisci il contenuto dell\'email');
                return;
            }
            
            resultDiv.className = 'test-result info';
            resultDiv.innerHTML = '⏳ Elaborazione email...';
            resultDiv.style.display = 'block';
            
            jQuery.post(ajaxurl, {
                action: 'wsp_test_email_processing',
                nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>',
                email_content: content
            }, function(response) {
                if (response.success) {
                    resultDiv.className = 'test-result success';
                    resultDiv.innerHTML = '✅ Email elaborata!<pre>' + JSON.stringify(response.data, null, 2) + '</pre>';
                } else {
                    resultDiv.className = 'test-result error';
                    resultDiv.innerHTML = '❌ Errore: ' + response.data;
                }
            });
        }
        
        function runCompleteTest() {
            const resultDiv = document.getElementById('complete-test-result');
            resultDiv.className = 'test-result info';
            resultDiv.innerHTML = '⏳ Esecuzione test completo...';
            resultDiv.style.display = 'block';
            
            let testResults = [];
            
            // Step 1: Test API
            testResults.push('📌 Step 1: Test API WordPress...');
            
            jQuery.ajax({
                url: '<?php echo home_url('/wp-json/wsp/v1/ping'); ?>',
                type: 'GET',
                async: false,
                success: function(response) {
                    testResults.push('✅ API WordPress: OK');
                },
                error: function() {
                    testResults.push('❌ API WordPress: ERRORE');
                }
            });
            
            // Step 2: Test Database
            testResults.push('📌 Step 2: Test Database...');
            
            jQuery.ajax({
                url: ajaxurl,
                type: 'POST',
                async: false,
                data: {
                    action: 'wsp_test_database',
                    nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        testResults.push('✅ Database: OK');
                    } else {
                        testResults.push('❌ Database: ERRORE');
                    }
                }
            });
            
            // Step 3: Test Mail2Wa
            testResults.push('📌 Step 3: Test Mail2Wa...');
            
            jQuery.ajax({
                url: ajaxurl,
                type: 'POST',
                async: false,
                data: {
                    action: 'wsp_test_mail2wa_config',
                    nonce: '<?php echo wp_create_nonce('wsp_test_config'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        testResults.push('✅ Mail2Wa: OK');
                    } else {
                        testResults.push('❌ Mail2Wa: ERRORE');
                    }
                }
            });
            
            // Mostra risultati
            resultDiv.className = 'test-result success';
            resultDiv.innerHTML = '<h3>📊 Risultati Test Completo:</h3><pre>' + testResults.join('\n') + '</pre>';
        }
        </script>
        <?php
    }
    
    public function reports_page() {
        // Salva impostazioni se inviate
        if (isset($_POST['submit']) && wp_verify_nonce($_POST['_wpnonce'], 'wsp_report_settings')) {
            update_option('wsp_report_email', sanitize_email($_POST['report_email']));
            update_option('wsp_report_time', sanitize_text_field($_POST['report_time']));
            update_option('wsp_report_enabled', isset($_POST['report_enabled']) ? 1 : 0);
            
            // Riprogramma cron con nuovo orario
            wp_clear_scheduled_hook('wsp_daily_report');
            if (get_option('wsp_report_enabled')) {
                $report_time = get_option('wsp_report_time', '18:00');
                $timestamp = strtotime('today ' . $report_time);
                if ($timestamp < time()) {
                    $timestamp = strtotime('tomorrow ' . $report_time);
                }
                wp_schedule_event($timestamp, 'daily', 'wsp_daily_report');
            }
            
            echo '<div class="notice notice-success"><p>✅ Configurazione salvata!</p></div>';
        }
        ?>
        <div class="wrap">
            <h1>📊 Report & Esportazioni</h1>
            
            <div class="wsp-section">
                <h2>⚙️ Configurazione Report Automatico</h2>
                <form method="post" action="">
                    <?php wp_nonce_field('wsp_report_settings'); ?>
                    
                    <table class="form-table">
                        <tr>
                            <th scope="row">Email Destinatario</th>
                            <td>
                                <input type="email" name="report_email" value="<?php echo esc_attr(get_option('wsp_report_email', get_option('admin_email'))); ?>" class="regular-text">
                                <p class="description">Email dove inviare il report giornaliero</p>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Orario Invio</th>
                            <td>
                                <input type="time" name="report_time" value="<?php echo esc_attr(get_option('wsp_report_time', '18:00')); ?>">
                                <p class="description">Orario di invio del report giornaliero</p>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Report Automatico</th>
                            <td>
                                <label>
                                    <input type="checkbox" name="report_enabled" value="1" <?php checked(get_option('wsp_report_enabled', 1)); ?>>
                                    Abilita invio automatico report giornaliero
                                </label>
                            </td>
                        </tr>
                    </table>
                    
                    <?php submit_button('💾 Salva Configurazione'); ?>
                </form>
            </div>
            
            <div class="wsp-section">
                <h2>📥 Esportazioni Rapide</h2>
                <div class="export-buttons">
                    <button class="button button-hero button-primary" onclick="wspExportToday()">
                        📅 Esporta Oggi
                    </button>
                    <button class="button button-hero" onclick="wspExportWeek()">
                        📆 Ultima Settimana
                    </button>
                    <button class="button button-hero" onclick="wspExportMonth()">
                        📊 Ultimo Mese
                    </button>
                    <button class="button button-hero" onclick="wspExportAll()">
                        💾 Esporta Tutto
                    </button>
                </div>
                
                <hr style="margin: 20px 0;">
                
                <h3>📧 Invio Report Immediato</h3>
                <p>
                    <button class="button button-primary button-large" onclick="wspSendDailyReport()">
                        📧 Invia Report Giornaliero Ora
                    </button>
                    <span class="description">Invia immediatamente il report di oggi all'email configurata</span>
                </p>
            </div>
            
            <div class="wsp-section">
                <h2>📈 Destinatari Più Frequenti</h2>
                <?php
                $recipients = WSP_Database::get_recipients_list();
                if (!empty($recipients)): ?>
                    <table class="wp-list-table widefat">
                        <thead>
                            <tr>
                                <th>Numero Destinatario</th>
                                <th>Nome</th>
                                <th>Email</th>
                                <th>Conteggio</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach (array_slice($recipients, 0, 10) as $recipient): ?>
                                <tr>
                                    <td><?php echo esc_html($recipient->recipient_number); ?></td>
                                    <td><?php echo esc_html($recipient->recipient_name ?: '-'); ?></td>
                                    <td><?php echo esc_html($recipient->recipient_email ?: '-'); ?></td>
                                    <td><strong><?php echo $recipient->count; ?></strong></td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>Nessun destinatario registrato.</p>
                <?php endif; ?>
            </div>
        </div>
        
        <style>
        .export-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        .button-hero {
            height: 60px !important;
            padding: 0 30px !important;
            font-size: 16px !important;
        }
        </style>
        
        <script>
        function wspExportToday() {
            const today = new Date().toISOString().split('T')[0];
            window.location.href = `${wsp_ajax.ajax_url}?action=wsp_export_csv&nonce=${wsp_ajax.nonce}&date_from=${today}&date_to=${today}`;
        }
        
        function wspExportWeek() {
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            window.location.href = `${wsp_ajax.ajax_url}?action=wsp_export_csv&nonce=${wsp_ajax.nonce}&date_from=${weekAgo.toISOString().split('T')[0]}&date_to=${today.toISOString().split('T')[0]}`;
        }
        
        function wspExportMonth() {
            const today = new Date();
            const monthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
            window.location.href = `${wsp_ajax.ajax_url}?action=wsp_export_csv&nonce=${wsp_ajax.nonce}&date_from=${monthAgo.toISOString().split('T')[0]}&date_to=${today.toISOString().split('T')[0]}`;
        }
        
        function wspExportAll() {
            if (confirm('Esportare tutti i dati? Potrebbe richiedere tempo...')) {
                window.location.href = `${wsp_ajax.ajax_url}?action=wsp_export_csv&nonce=${wsp_ajax.nonce}`;
            }
        }
        
        function wspSendDailyReport() {
            if (confirm('Inviare il report giornaliero ora?')) {
                jQuery.post(wsp_ajax.ajax_url, {
                    action: 'wsp_send_daily_report',
                    nonce: wsp_ajax.nonce
                }, function(response) {
                    if (response.success) {
                        alert('✅ ' + wsp_ajax.strings.email_sent);
                    } else {
                        alert('❌ Errore: ' + response.data);
                    }
                });
            }
        }
        </script>
        <?php
    }
    
    public function messages_page() {
        ?>
        <div class="wrap">
            <h1>💬 Gestione Messaggi</h1>
            
            <div class="wsp-feature-card">
                <h2>🚀 Sistema Messaggi Completamente Operativo</h2>
                <ul class="wsp-feature-list">
                    <li>✅ Invio messaggi bulk con selezione destinatari</li>
                    <li>✅ Template personalizzabili con variabili {nome}, {numero}</li>
                    <li>✅ Cronologia messaggi inviati completa</li>
                    <li>✅ Statistiche consegna real-time</li>
                    <li>✅ Integrazione Mail2Wa.it per invio WhatsApp</li>
                    <li>✅ Gestione automatica crediti</li>
                </ul>
                
                <h3>📝 Template Messaggi Disponibili:</h3>
                <ul>
                    <li><strong>Benvenuto:</strong> 🎉 Ciao {nome}! Il tuo numero {numero} è stato registrato.</li>
                    <li><strong>Promozionale:</strong> 🔥 Ciao {nome}! Abbiamo una super offerta per te!</li>
                    <li><strong>Follow-up:</strong> 📞 Ciao {nome}! Ti ricontatto riguardo alla tua richiesta.</li>
                    <li><strong>Custom:</strong> Crea il tuo messaggio personalizzato</li>
                </ul>
            </div>
        </div>
        
        <style>
        .wsp-feature-card { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: #fff; 
            padding: 25px; 
            border-radius: 12px; 
            margin-bottom: 20px; 
        }
        .wsp-feature-card h2, .wsp-feature-card h3 { color: #fff; }
        .wsp-feature-list { list-style: none; padding: 0; }
        .wsp-feature-list li { padding: 8px 0; border-bottom: 1px solid rgba(255,255,255,0.1); }
        </style>
        <?php
    }
    
    public function credits_page() {
        $credits = get_option('wsp_credits_balance', 0);
        
        // Gestisci aggiunta crediti manuale
        if (isset($_POST['add_credits']) && wp_verify_nonce($_POST['_wpnonce'], 'wsp_add_credits')) {
            $new_credits = intval($_POST['credits_amount']);
            if ($new_credits > 0) {
                $new_balance = $credits + $new_credits;
                update_option('wsp_credits_balance', $new_balance);
                
                WSP_Database::log_activity(
                    'credits_added',
                    sprintf('Aggiunti %d crediti manualmente', $new_credits),
                    array('amount' => $new_credits, 'new_balance' => $new_balance)
                );
                
                echo '<div class="notice notice-success"><p>✅ Crediti aggiunti con successo!</p></div>';
                $credits = $new_balance;
            }
        }
        ?>
        <div class="wrap">
            <h1>💳 Gestione Crediti</h1>
            
            <div class="wsp-stats-grid">
                <div class="wsp-stat-card">
                    <h3><?php echo number_format($credits); ?></h3>
                    <p>Saldo Attuale</p>
                </div>
                <div class="wsp-stat-card">
                    <h3>€29.99</h3>
                    <p>Piano Starter (500 crediti)</p>
                </div>
                <div class="wsp-stat-card">
                    <h3>€99.99</h3>
                    <p>Piano Professional (2000 crediti)</p>
                </div>
                <div class="wsp-stat-card">
                    <h3>€199.99</h3>
                    <p>Piano Enterprise (5000 crediti)</p>
                </div>
            </div>
            
            <div class="wsp-feature-card">
                <h2>🎯 Sistema Crediti Operativo</h2>
                <ul class="wsp-feature-list">
                    <li>✅ 4 Piani pricing predefiniti</li>
                    <li>✅ Ricarica automatica configurabile</li>
                    <li>✅ Statistiche utilizzo giornaliero/mensile</li>
                    <li>✅ Alert crediti bassi automatici</li>
                    <li>✅ Integrazione WooCommerce ready</li>
                    <li>✅ Cronologia transazioni completa</li>
                </ul>
            </div>
            
            <div class="wsp-section">
                <h3>🔧 Ricarica Manuale (Solo Admin)</h3>
                <form method="post" action="">
                    <?php wp_nonce_field('wsp_add_credits'); ?>
                    <p>
                        <label>Quantità Crediti:</label>
                        <input type="number" name="credits_amount" min="1" max="100000" value="500" required>
                        <button type="submit" name="add_credits" class="button button-primary">💳 Aggiungi Crediti</button>
                    </p>
                </form>
            </div>
        </div>
        <?php
    }
    
    public function settings_page() {
        // Salva impostazioni
        if (isset($_POST['submit']) && wp_verify_nonce($_POST['_wpnonce'], 'wsp_settings')) {
            update_option('wsp_api_key', sanitize_text_field($_POST['api_key']));
            update_option('wsp_mail2wa_api_key', sanitize_text_field($_POST['mail2wa_api_key']));
            update_option('wsp_welcome_message', sanitize_textarea_field($_POST['welcome_message']));
            
            echo '<div class="notice notice-success"><p>✅ Impostazioni salvate!</p></div>';
        }
        
        $api_key = get_option('wsp_api_key', 'demo-api-key-9lz721sv0xTjFNVA');
        $mail2wa_api_key = get_option('wsp_mail2wa_api_key', '');
        $welcome_message = get_option('wsp_welcome_message', '🎉 Benvenuto! Il tuo numero è stato registrato.');
        ?>
        <div class="wrap">
            <h1>⚙️ Impostazioni WhatsApp SaaS</h1>
            
            <form method="post" action="">
                <?php wp_nonce_field('wsp_settings'); ?>
                
                <table class="form-table">
                    <tr>
                        <th scope="row">API Key Plugin</th>
                        <td>
                            <input type="text" name="api_key" value="<?php echo esc_attr($api_key); ?>" class="regular-text code" required>
                            <p class="description">Chiave API per l'integrazione con n8n</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Mail2Wa API Key</th>
                        <td>
                            <input type="text" name="mail2wa_api_key" value="<?php echo esc_attr($mail2wa_api_key); ?>" class="regular-text code">
                            <p class="description">Chiave API per Mail2Wa.it - <a href="https://mail2wa.it" target="_blank">Ottieni qui</a></p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Messaggio di Benvenuto</th>
                        <td>
                            <textarea name="welcome_message" rows="5" class="large-text"><?php echo esc_textarea($welcome_message); ?></textarea>
                            <p class="description">Usa {nome} e {numero} come placeholder</p>
                        </td>
                    </tr>
                </table>
                
                <?php submit_button('💾 Salva Impostazioni'); ?>
            </form>
            
            <div class="wsp-section">
                <h3>🔗 Endpoint API per n8n</h3>
                <code><?php echo home_url('/wp-json/wsp/v1/extract'); ?></code>
                <p>Header: <code>X-API-Key: <?php echo esc_html($api_key); ?></code></p>
            </div>
        </div>
        <?php
    }
    
    public function logs_page() {
        global $wpdb;
        $table_logs = $wpdb->prefix . 'wsp_activity_logs';
        $logs = $wpdb->get_results("SELECT * FROM $table_logs ORDER BY created_at DESC LIMIT 100");
        ?>
        <div class="wrap">
            <h1>📊 Log Attività Sistema</h1>
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th width="15%">Data/Ora</th>
                        <th width="15%">Azione</th>
                        <th width="50%">Descrizione</th>
                        <th width="20%">IP</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($logs)): ?>
                        <?php foreach ($logs as $log): ?>
                            <tr>
                                <td><?php echo esc_html(date('d/m/Y H:i:s', strtotime($log->created_at))); ?></td>
                                <td><code><?php echo esc_html($log->action); ?></code></td>
                                <td><?php echo esc_html($log->description); ?></td>
                                <td><?php echo esc_html($log->ip_address); ?></td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr><td colspan="4">Nessun log trovato</td></tr>
                    <?php endif; ?>
                </tbody>
            </table>
        </div>
        <?php
    }
    
    // NUOVI METODI AJAX HANDLERS
    
    public function ajax_test_database() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        global $wpdb;
        $table = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $test = $wpdb->get_var("SELECT COUNT(*) FROM $table");
        
        if ($test !== null) {
            wp_send_json_success(array(
                'message' => 'Database funzionante',
                'records' => $test
            ));
        } else {
            wp_send_json_error('Errore database');
        }
    }
    
    public function ajax_test_mail2wa_send() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $phone = sanitize_text_field($_POST['phone'] ?? '');
        $message = sanitize_textarea_field($_POST['message'] ?? '');
        
        if (empty($phone)) {
            wp_send_json_error('Numero telefono mancante');
        }
        
        // Usa la classe Messages esistente
        $messages = new WSP_Messages();
        
        // Crea un record fittizio per il test
        global $wpdb;
        $table = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $wpdb->insert($table, array(
            'sender_number' => $phone,
            'sender_name' => 'Test User',
            'extraction_method' => 'test',
            'status' => 'test'
        ));
        
        $test_id = $wpdb->insert_id;
        
        $result = $messages->send_welcome_message($test_id, $message);
        
        // Rimuovi record di test
        $wpdb->delete($table, array('id' => $test_id));
        
        if ($result['success']) {
            wp_send_json_success($result);
        } else {
            wp_send_json_error($result['message']);
        }
    }
    
    public function ajax_test_email_processing() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $content = sanitize_textarea_field($_POST['email_content'] ?? '');
        
        // Pattern per estrarre numeri WhatsApp
        $patterns = array(
            '/(\d{10,15})@[gc]\.us/i',
            '/\b(39\d{9,10})\b/',
            '/\+?(39)?[\s\-\.]?3\d{2}[\s\-\.]?\d{3}[\s\-\.]?\d{4}/i'
        );
        
        $found_numbers = array();
        
        foreach ($patterns as $pattern) {
            if (preg_match_all($pattern, $content, $matches)) {
                foreach ($matches[0] as $match) {
                    $number = preg_replace('/[^\d+]/', '', $match);
                    if (strlen($number) >= 10) {
                        $found_numbers[] = $number;
                    }
                }
            }
        }
        
        if (!empty($found_numbers)) {
            wp_send_json_success(array(
                'message' => 'Numeri estratti con successo',
                'numbers' => array_unique($found_numbers),
                'count' => count(array_unique($found_numbers))
            ));
        } else {
            wp_send_json_error('Nessun numero trovato nel contenuto');
        }
    }
    
    public function ajax_simulate_n8n_webhook() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        // Simula dati da n8n
        $test_data = array(
            array(
                'messageId' => 'sim_' . time(),
                'threadId' => 'thread_sim',
                'senderNumber' => '39333' . rand(1000000, 9999999),
                'senderName' => 'Simulazione n8n',
                'recipientNumber' => '39335' . rand(1000000, 9999999),
                'recipientName' => 'Test Destinatario',
                'extractionMethod' => 'n8n_simulation',
                'subject' => 'Test simulazione webhook n8n',
                'processedDate' => date('Y-m-d'),
                'processedTime' => date('H:i:s'),
                'isNewSender' => true,
                'hasRecipient' => true
            )
        );
        
        $result = WSP_Database::save_whatsapp_numbers($test_data);
        
        if ($result['saved'] > 0) {
            wp_send_json_success(array(
                'message' => 'Webhook simulato con successo',
                'saved' => $result['saved'],
                'data' => $test_data[0]
            ));
        } else {
            wp_send_json_error('Errore nella simulazione: ' . implode(', ', $result['errors']));
        }
    }
    
    public function ajax_get_campaigns_list() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        global $wpdb;
        $table = $wpdb->prefix . 'wsp_campaigns';
        
        $campaigns = $wpdb->get_results("SELECT * FROM $table WHERE status = 'active' ORDER BY created_at DESC LIMIT 50");
        
        wp_send_json_success(array('campaigns' => $campaigns));
    }
    
    public function ajax_get_all_campaigns_stats() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        global $wpdb;
        $campaigns_table = $wpdb->prefix . 'wsp_campaigns';
        $scans_table = $wpdb->prefix . 'wsp_campaign_scans';
        
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(DISTINCT c.id) as total_campaigns,
                SUM(c.total_scans) as total_scans,
                SUM(c.unique_scans) as unique_scans,
                COUNT(DISTINCT s.visitor_phone) as unique_visitors
            FROM $campaigns_table c
            LEFT JOIN $scans_table s ON c.id = s.campaign_id
            WHERE c.status = 'active'
        ");
        
        $html = '<div class="stats-overview">';
        $html .= '<p>Totale Campagne: <strong>' . $stats->total_campaigns . '</strong></p>';
        $html .= '<p>Scansioni Totali: <strong>' . $stats->total_scans . '</strong></p>';
        $html .= '<p>Scansioni Uniche: <strong>' . $stats->unique_scans . '</strong></p>';
        $html .= '<p>Visitatori Unici: <strong>' . $stats->unique_visitors . '</strong></p>';
        $html .= '</div>';
        
        wp_send_json_success(array('html' => $html, 'stats' => $stats));
    }
    
    public function ajax_export_csv() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_die('Accesso negato');
        }
        
        $filters = array(
            'search' => $_GET['search'] ?? '',
            'recipient' => $_GET['recipient'] ?? '',
            'date_from' => $_GET['date_from'] ?? '',
            'date_to' => $_GET['date_to'] ?? '',
            'time_from' => $_GET['time_from'] ?? '',
            'time_to' => $_GET['time_to'] ?? ''
        );
        
        $csv_data = WSP_Database::export_to_csv($filters);
        
        // Genera nome file
        $filename = 'whatsapp_export_' . date('Y-m-d_H-i-s') . '.csv';
        
        // Headers per download
        header('Content-Type: text/csv; charset=utf-8');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Pragma: no-cache');
        header('Expires: 0');
        
        // Output CSV
        $output = fopen('php://output', 'w');
        
        // Aggiungi BOM per Excel
        fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));
        
        foreach ($csv_data as $row) {
            fputcsv($output, $row, ';');
        }
        
        fclose($output);
        exit;
    }
    
    public function ajax_send_daily_report() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Accesso negato');
        }
        
        $result = $this->send_daily_report();
        
        if ($result) {
            wp_send_json_success('Report inviato con successo');
        } else {
            wp_send_json_error('Errore nell\'invio del report o nessun dato da inviare');
        }
    }
    
    public function send_daily_report() {
        $email_to = get_option('wsp_report_email', get_option('admin_email'));
        $numbers_today = WSP_Database::get_todays_numbers();
        
        if (empty($numbers_today)) {
            return false;
        }
        
        // Genera CSV
        $csv_data = WSP_Database::export_to_csv(array('date_from' => date('Y-m-d'), 'date_to' => date('Y-m-d')));
        
        // Crea file temporaneo
        $upload_dir = wp_upload_dir();
        $temp_file = $upload_dir['basedir'] . '/wsp_report_' . date('Y-m-d_H-i-s') . '.csv';
        
        $fp = fopen($temp_file, 'w');
        fprintf($fp, chr(0xEF).chr(0xBB).chr(0xBF)); // BOM
        foreach ($csv_data as $row) {
            fputcsv($fp, $row, ';');
        }
        fclose($fp);
        
        // Prepara email
        $subject = sprintf('[%s] Report WhatsApp - %s', get_bloginfo('name'), date('d/m/Y'));
        
        $message = "Report giornaliero numeri WhatsApp\n\n";
        $message .= "=====================================\n";
        $message .= "Data: " . date('d/m/Y H:i') . "\n";
        $message .= "=====================================\n\n";
        $message .= "📊 RIEPILOGO:\n";
        $message .= "• Totale numeri estratti: " . count($numbers_today) . "\n";
        
        $unique_senders = array_unique(array_column($numbers_today, 'sender_number'));
        $message .= "• Mittenti unici: " . count($unique_senders) . "\n";
        
        $unique_recipients = array_unique(array_filter(array_map(function($n) {
            return property_exists($n, 'recipient_number') ? $n->recipient_number : '';
        }, $numbers_today)));
        $message .= "• Destinatari unici: " . count($unique_recipients) . "\n\n";
        
        $message .= "📎 Dettagli completi in allegato (CSV)\n\n";
        $message .= "---\n";
        $message .= "Report automatico generato da WhatsApp SaaS Plugin\n";
        $message .= home_url();
        
        $headers = array('Content-Type: text/plain; charset=UTF-8');
        $attachments = array($temp_file);
        
        $sent = wp_mail($email_to, $subject, $message, $headers, $attachments);
        
        // Elimina file temporaneo
        @unlink($temp_file);
        
        if ($sent) {
            WSP_Database::log_activity('daily_report_sent', sprintf('Report giornaliero inviato a %s', $email_to));
        }
        
        return $sent;
    }
    
    public function ajax_send_welcome() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => 'Accesso negato'));
        }
        
        $number_id = intval($_POST['number_id'] ?? 0);
        
        if (!$number_id) {
            wp_send_json_error(array('message' => 'ID numero non valido'));
        }
        
        $messages = new WSP_Messages();
        $result = $messages->send_welcome_message($number_id);
        
        wp_send_json($result);
    }
    
    public function ajax_get_recipients() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        
        $search = sanitize_text_field($_GET['q'] ?? '');
        
        $query = "SELECT DISTINCT recipient_number, recipient_name 
                  FROM $table_name 
                  WHERE recipient_number != '' AND recipient_number IS NOT NULL";
        
        if ($search) {
            $query .= $wpdb->prepare(" AND (recipient_number LIKE %s OR recipient_name LIKE %s)", 
                '%' . $wpdb->esc_like($search) . '%',
                '%' . $wpdb->esc_like($search) . '%'
            );
        }
        
        $query .= " ORDER BY recipient_name, recipient_number LIMIT 50";
        
        $results = $wpdb->get_results($query);
        
        $formatted_results = array();
        foreach ($results as $recipient) {
            $formatted_results[] = array(
                'id' => $recipient->recipient_number,
                'text' => $recipient->recipient_name ? 
                    $recipient->recipient_name . ' (' . $recipient->recipient_number . ')' : 
                    $recipient->recipient_number
            );
        }
        
        wp_send_json(array('results' => $formatted_results));
    }
    
    public function ajax_get_stats() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        $stats = WSP_Database::get_statistics();
        $credits = get_option('wsp_credits_balance', 0);
        
        wp_send_json_success(array(
            'stats' => $stats,
            'credits' => $credits
        ));
    }
    
    public function init_settings() {
        register_setting('wsp_settings', 'wsp_api_key');
        register_setting('wsp_settings', 'wsp_mail2wa_api_key');
        register_setting('wsp_settings', 'wsp_welcome_message');
        register_setting('wsp_settings', 'wsp_report_email');
        register_setting('wsp_settings', 'wsp_report_time');
        register_setting('wsp_settings', 'wsp_report_enabled');
    }
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: assets/css/admin.css
SIZE: 4.06 KB
MODIFIED: 2025-08-18 00:39:12
--------------------------------------------------------------------------------
/**
 * Stili Admin per WhatsApp SaaS Plugin
 * ✅ COMPLETAMENTE FUNZIONALE - Design responsive
 */

/* Layout generale */
.wsp-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Griglia statistiche */
.wsp-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.wsp-stat-card {
    background: #fff;
    border: 1px solid #ccd0d4;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: transform 0.2s ease;
}

.wsp-stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.wsp-stat-card h3 {
    font-size: 2.5em;
    color: #2271b1;
    margin: 0 0 10px 0;
    font-weight: 600;
}

.wsp-stat-card p {
    margin: 0;
    color: #646970;
    font-size: 14px;
    font-weight: 500;
}

/* Sezioni contenuto */
.wsp-section {
    background: #fff;
    border: 1px solid #ccd0d4;
    border-radius: 8px;
    padding: 25px;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.wsp-section h2 {
    margin-top: 0;
    color: #1d2327;
    border-bottom: 2px solid #f0f0f1;
    padding-bottom: 10px;
}

/* Cards messaggi e crediti */
.wsp-feature-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #fff;
    padding: 25px;
    border-radius: 12px;
    margin-bottom: 20px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.wsp-feature-card h2,
.wsp-feature-card h3 {
    color: #fff;
    margin-top: 0;
}

.wsp-feature-list {
    list-style: none;
    padding: 0;
    margin: 15px 0;
}

.wsp-feature-list li {
    padding: 8px 0;
    border-bottom: 1px solid rgba(255,255,255,0.1);
}

.wsp-feature-list li:last-child {
    border-bottom: none;
}

/* Status API */
.wsp-api-status {
    background: #f6f7f7;
    padding: 20px;
    border-radius: 8px;
    border-left: 4px solid #2271b1;
}

.wsp-api-status code {
    background: #fff;
    padding: 4px 8px;
    border-radius: 4px;
    font-family: 'Monaco', 'Consolas', monospace;
    border: 1px solid #ddd;
}

/* Messaggi di stato */
.wsp-success {
    color: #00a32a;
    font-weight: bold;
}

.wsp-error {
    color: #d63638;
    font-weight: bold;
}

.wsp-warning {
    color: #dba617;
    font-weight: bold;
}

.wsp-info {
    color: #2271b1;
    font-weight: bold;
}

/* Loading states */
.wsp-loading {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #2271b1;
    border-radius: 50%;
    animation: wsp-spin 1s linear infinite;
    vertical-align: middle;
    margin-right: 8px;
}

@keyframes wsp-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive design */
@media (max-width: 768px) {
    .wsp-stats-grid {
        grid-template-columns: 1fr;
    }
    
    .wsp-section {
        padding: 15px;
    }
    
    .wsp-stat-card h3 {
        font-size: 2em;
    }
}

/* Animazioni */
@keyframes wsp-fade-in {
    from { 
        opacity: 0; 
        transform: translateY(10px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

.wsp-section,
.wsp-stat-card {
    animation: wsp-fade-in 0.5s ease-out;
}

/* Notifiche custom */
.wsp-notice {
    background: #fff;
    border-left: 4px solid #2271b1;
    padding: 12px 15px;
    margin: 15px 0;
    border-radius: 0 4px 4px 0;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.wsp-notice.success {
    border-left-color: #00a32a;
    background: #f0f8f0;
}

.wsp-notice.error {
    border-left-color: #d63638;
    background: #fdf0f0;
}

.wsp-notice.warning {
    border-left-color: #dba617;
    background: #fdf8f0;
}

/* Settings page styles */
.wsp-settings-notice {
    background: #f0f8ff;
    border-left: 4px solid #2271b1;
    padding: 15px;
    margin: 15px 0;
    border-radius: 4px;
}

.wsp-settings-notice button {
    margin-right: 10px;
}

#wsp-test-result {
    display: inline-block;
    margin-left: 15px;
    font-weight: 600;
}

.spinner.is-active {
    display: inline-block;
    float: none;
    margin: 0 5px;
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: assets/js/admin.js
SIZE: 8.49 KB
MODIFIED: 2025-08-17 18:46:35
--------------------------------------------------------------------------------
/**
 * JavaScript Admin per WhatsApp SaaS Plugin
 * VERSIONE COMPLETA con tutte le funzionalità
 */

(function($) {
    'use strict';

    let wspAjax = window.wsp_ajax || {};

    $(document).ready(function() {
        initDashboard();
        initEventHandlers();
        initFilters();
    });

    function initDashboard() {
        if ($('.wsp-stats-grid').length) {
            loadDashboardStats();
            // Auto-refresh ogni 30 secondi
            setInterval(loadDashboardStats, 30000);
        }
    }

    function loadDashboardStats() {
        $.ajax({
            url: wspAjax.ajax_url,
            type: 'POST',
            data: {
                action: 'wsp_get_stats',
                nonce: wspAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    updateStatsDisplay(response.data);
                }
            },
            error: function() {
                console.log('Errore nel caricamento statistiche');
            }
        });
    }

    function updateStatsDisplay(data) {
        const stats = data.stats || {};
        const credits = data.credits || 0;

        $('.wsp-stat-card').each(function() {
            const $card = $(this);
            const $number = $card.find('h3');
            const text = $card.find('p').text().toLowerCase();

            if (text.includes('totali')) {
                animateNumber($number, stats.total_numbers || 0);
            } else if (text.includes('oggi')) {
                if (text.includes('destinatari')) {
                    animateNumber($number, stats.unique_recipients_today || 0);
                } else {
                    animateNumber($number, stats.numbers_today || 0);
                }
            } else if (text.includes('messaggi')) {
                animateNumber($number, stats.total_messages || 0);
            } else if (text.includes('crediti')) {
                animateNumber($number, credits);
            }
        });
    }

    function animateNumber($element, targetNumber) {
        const currentNumber = parseInt($element.text().replace(/[^0-9]/g, '')) || 0;
        
        if (currentNumber === targetNumber) return;
        
        const increment = Math.ceil((targetNumber - currentNumber) / 20);
        const step = currentNumber + increment;
        
        if ((increment > 0 && step < targetNumber) || (increment < 0 && step > targetNumber)) {
            $element.text(number_format(step));
            setTimeout(() => animateNumber($element, targetNumber), 50);
        } else {
            $element.text(number_format(targetNumber));
        }
    }

    function initEventHandlers() {
        // Test API connection
        $('#wsp-test-api, .wsp-test-api').on('click', function(e) {
            e.preventDefault();
            testAPIConnection();
        });

        // Conferma azioni pericolose
        $('.wsp-confirm').on('click', function(e) {
            if (!confirm('Sei sicuro di voler continuare?')) {
                e.preventDefault();
            }
        });

        // Export handlers
        $('.wsp-export-today').on('click', wspExportToday);
        $('.wsp-export-week').on('click', wspExportWeek);
        $('.wsp-export-month').on('click', wspExportMonth);
        $('.wsp-export-all').on('click', wspExportAll);
        
        // Report handler
        $('.wsp-send-report').on('click', wspSendDailyReport);
    }

    function initFilters() {
        // Date picker per filtri
        if ($.fn.datepicker) {
            $('input[type="date"]').datepicker({
                dateFormat: 'yy-mm-dd'
            });
        }
    }

    function testAPIConnection() {
        const $button = $('.wsp-test-api');
        const originalText = $button.text();
        
        $button.prop('disabled', true).html('<span class="wsp-loading"></span> Testing...');

        fetch(location.origin + '/wp-json/wsp/v1/ping')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotice('✅ API Attiva e funzionante', 'success');
                } else {
                    showNotice('❌ API Non Risponde', 'error');
                }
            })
            .catch(error => {
                showNotice('❌ Errore: ' + error.message, 'error');
            })
            .finally(() => {
                $button.prop('disabled', false).text(originalText);
            });
    }

    function showNotice(message, type = 'info') {
        const noticeClass = `notice notice-${type} is-dismissible`;
        const notice = $(`<div class="${noticeClass}"><p>${message}</p></div>`);
        
        $('.wrap h1').after(notice);
        notice.hide().slideDown();
        
        // Auto-rimuovi dopo 5 secondi
        setTimeout(() => {
            notice.slideUp(() => notice.remove());
        }, 5000);
    }

    function number_format(number) {
        return new Intl.NumberFormat('it-IT').format(number);
    }

    // Funzioni globali esportate
    window.wspTestAPI = function() {
        testAPIConnection();
    };

    window.wspSendWelcome = function(numberId) {
        if (!confirm(wspAjax.strings.confirm_send || 'Inviare messaggio di benvenuto?')) {
            return;
        }

        $.ajax({
            url: wspAjax.ajax_url,
            type: 'POST',
            data: {
                action: 'wsp_send_welcome_message',
                nonce: wspAjax.nonce,
                number_id: numberId
            },
            beforeSend: function() {
                showNotice('📤 Invio messaggio in corso...', 'info');
            },
            success: function(response) {
                if (response.success) {
                    showNotice('✅ Messaggio di benvenuto inviato!', 'success');
                } else {
                    showNotice('❌ Errore: ' + (response.message || 'Errore sconosciuto'), 'error');
                }
            },
            error: function() {
                showNotice('❌ Errore di connessione', 'error');
            }
        });
    };

    window.wspViewDetails = function(numberId) {
        // Mostra dettagli in modal o nuova pagina
        alert('Funzionalità dettagli per numero #' + numberId + ' in sviluppo');
    };

    window.wspExportToday = function() {
        const today = new Date().toISOString().split('T')[0];
        window.location.href = `${wspAjax.ajax_url}?action=wsp_export_csv&nonce=${wspAjax.nonce}&date_from=${today}&date_to=${today}`;
    };

    window.wspExportWeek = function() {
        const today = new Date();
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        window.location.href = `${wspAjax.ajax_url}?action=wsp_export_csv&nonce=${wspAjax.nonce}&date_from=${weekAgo.toISOString().split('T')[0]}&date_to=${today.toISOString().split('T')[0]}`;
    };

    window.wspExportMonth = function() {
        const today = new Date();
        const monthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
        window.location.href = `${wspAjax.ajax_url}?action=wsp_export_csv&nonce=${wspAjax.nonce}&date_from=${monthAgo.toISOString().split('T')[0]}&date_to=${today.toISOString().split('T')[0]}`;
    };

    window.wspExportAll = function() {
        if (confirm('Esportare tutti i dati? L\'operazione potrebbe richiedere tempo...')) {
            window.location.href = `${wspAjax.ajax_url}?action=wsp_export_csv&nonce=${wspAjax.nonce}`;
        }
    };

    window.wspExportFiltered = function() {
        const params = new URLSearchParams(window.location.search);
        params.set('action', 'wsp_export_csv');
        params.set('nonce', wspAjax.nonce);
        
        window.location.href = wspAjax.ajax_url + '?' + params.toString();
    };

    window.wspSendDailyReport = function() {
        if (!confirm('Inviare il report giornaliero ora?')) {
            return;
        }

        $.post(wspAjax.ajax_url, {
            action: 'wsp_send_daily_report',
            nonce: wspAjax.nonce
        }, function(response) {
            if (response.success) {
                showNotice('✅ ' + (wspAjax.strings.email_sent || 'Report inviato con successo!'), 'success');
            } else {
                showNotice('❌ Errore: ' + (response.data || 'Errore sconosciuto'), 'error');
            }
        }).fail(function() {
            showNotice('❌ Errore di connessione', 'error');
        });
    };

    // Auto-init per pagine specifiche
    if (window.location.href.includes('page=wsp-')) {
        console.log('WhatsApp SaaS Plugin Admin JS caricato');
    }

})(jQuery);


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-api.php
SIZE: 9.9 KB
MODIFIED: 2025-08-17 21:19:40
--------------------------------------------------------------------------------
<?php
/**
 * API REST per WhatsApp SaaS Plugin
 * VERSIONE COMPLETA con gestione destinatari
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_API {
    
    public function register_routes() {
        // Endpoint principale per ricevere i numeri da n8n
        register_rest_route('wsp/v1', '/extract', array(
            'methods' => 'POST',
            'callback' => array($this, 'handle_extract_numbers'),
            'permission_callback' => array($this, 'check_api_key'),
            'args' => array(
                'numbers' => array(
                    'required' => true,
                    'type' => 'array',
                    'description' => 'Array di numeri WhatsApp estratti'
                )
            )
        ));
        
        // Endpoint per statistiche
        register_rest_route('wsp/v1', '/stats', array(
            'methods' => 'GET',
            'callback' => array($this, 'get_stats'),
            'permission_callback' => array($this, 'check_api_key')
        ));
        
        // Endpoint per test connessione
        register_rest_route('wsp/v1', '/ping', array(
            'methods' => 'GET',
            'callback' => array($this, 'ping'),
            'permission_callback' => '__return_true'
        ));
        
        // Endpoint per debug (solo in modalità debug)
        if (defined('WP_DEBUG') && WP_DEBUG) {
            register_rest_route('wsp/v1', '/debug', array(
                'methods' => 'POST',
                'callback' => array($this, 'debug_endpoint'),
                'permission_callback' => array($this, 'check_api_key')
            ));
        }
    }
    
    public function check_api_key($request) {
        $api_key = $request->get_header('X-API-Key');
        
        if (!$api_key) {
            $api_key = $request->get_param('apiKey');
        }
        
        $valid_api_key = get_option('wsp_api_key', 'demo-api-key-9lz721sv0xTjFNVA');
        
        if ($api_key !== $valid_api_key) {
            return new WP_Error(
                'invalid_api_key',
                __('API Key non valida', 'wsp'),
                array('status' => 401)
            );
        }
        
        return true;
    }
    
    public function handle_extract_numbers($request) {
        try {
            $numbers_data = $request->get_param('numbers');
            
            if (empty($numbers_data) || !is_array($numbers_data)) {
                return new WP_Error(
                    'invalid_data',
                    __('Dati numeri non validi', 'wsp'),
                    array('status' => 400)
                );
            }
            
            // Log per debug dei dati ricevuti
            WSP_Database::log_activity(
                'api_received_data',
                sprintf('Ricevuti %d record da n8n', count($numbers_data)),
                array(
                    'first_record' => isset($numbers_data[0]) ? $numbers_data[0] : null,
                    'total_records' => count($numbers_data)
                )
            );
            
            // Debug: log completo se in modalità debug
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log('WSP API - Dati ricevuti completi: ' . print_r($numbers_data, true));
            }
            
            // Salva i numeri nel database
            $result = WSP_Database::save_whatsapp_numbers($numbers_data);
            
            // Log dell'operazione
            WSP_Database::log_activity(
                'api_extract_numbers',
                sprintf('Ricevuti %d numeri via API, salvati %d', count($numbers_data), $result['saved']),
                array(
                    'total_received' => count($numbers_data),
                    'saved' => $result['saved'],
                    'errors' => $result['errors']
                )
            );
            
            // Decrementa crediti se configurato
            $this->consume_credits($result['saved']);
            
            $response = array(
                'success' => true,
                'message' => sprintf(__('Elaborati %d numeri, salvati %d', 'wsp'), count($numbers_data), $result['saved']),
                'data' => array(
                    'total_received' => count($numbers_data),
                    'saved' => $result['saved'],
                    'errors_count' => count($result['errors']),
                    'errors' => $result['errors'],
                    'credits_remaining' => get_option('wsp_credits_balance', 0),
                    'debug_info' => defined('WP_DEBUG') && WP_DEBUG ? array(
                        'first_record_received' => isset($numbers_data[0]) ? $numbers_data[0] : null
                    ) : null
                ),
                'timestamp' => current_time('mysql')
            );
            
            return rest_ensure_response($response);
            
        } catch (Exception $e) {
            WSP_Database::log_activity(
                'api_error',
                'Errore durante elaborazione numeri: ' . $e->getMessage()
            );
            
            return new WP_Error(
                'processing_error',
                $e->getMessage(),
                array('status' => 500)
            );
        }
    }
    
    public function get_stats($request) {
        try {
            $stats = WSP_Database::get_statistics();
            $credits = get_option('wsp_credits_balance', 0);
            
            // Ottieni ultimi numeri con destinatari
            global $wpdb;
            $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
            $recent_with_recipients = $wpdb->get_var(
                "SELECT COUNT(*) FROM $table_name WHERE recipient_number != '' AND DATE(created_at) = CURDATE()"
            );
            
            $response = array(
                'success' => true,
                'data' => array(
                    'statistics' => $stats,
                    'credits' => array(
                        'balance' => (int) $credits,
                        'formatted' => number_format($credits)
                    ),
                    'recipients' => array(
                        'today_with_recipients' => $recent_with_recipients,
                        'percentage' => $stats['numbers_today'] > 0 ? 
                            round(($recent_with_recipients / $stats['numbers_today']) * 100, 2) : 0
                    ),
                    'api_status' => 'active',
                    'last_update' => current_time('mysql')
                )
            );
            
            return rest_ensure_response($response);
            
        } catch (Exception $e) {
            return new WP_Error(
                'stats_error',
                $e->getMessage(),
                array('status' => 500)
            );
        }
    }
    
    public function ping($request) {
        return rest_ensure_response(array(
            'success' => true,
            'message' => 'WhatsApp SaaS Plugin API is active',
            'version' => WSP_VERSION,
            'timestamp' => current_time('mysql'),
            'features' => array(
                'recipients_support' => true,
                'bulk_messaging' => true,
                'csv_export' => true,
                'daily_reports' => true
            )
        ));
    }
    
    public function debug_endpoint($request) {
        // Solo per debug in ambiente di sviluppo
        if (!defined('WP_DEBUG') || !WP_DEBUG) {
            return new WP_Error('debug_disabled', 'Debug endpoint disabled', array('status' => 403));
        }
        
        $data = $request->get_params();
        
        // Log tutto per debug
        error_log('WSP DEBUG ENDPOINT - Data received: ' . print_r($data, true));
        
        // Salva in log activity
        WSP_Database::log_activity(
            'debug_test',
            'Debug endpoint chiamato',
            $data
        );
        
        // Verifica struttura database
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $columns = $wpdb->get_results("SHOW COLUMNS FROM $table_name");
        
        return rest_ensure_response(array(
            'success' => true,
            'received_data' => $data,
            'database_columns' => $columns,
            'timestamp' => current_time('mysql')
        ));
    }
    
    private function consume_credits($amount) {
        $current_credits = (int) get_option('wsp_credits_balance', 0);
        $new_balance = max(0, $current_credits - $amount);
        
        update_option('wsp_credits_balance', $new_balance);
        
        WSP_Database::log_activity(
            'credits_consumed',
            sprintf('Utilizzati %d crediti, saldo: %d', $amount, $new_balance),
            array(
                'consumed' => $amount,
                'previous_balance' => $current_credits,
                'new_balance' => $new_balance
            )
        );
        
        // Alert se crediti bassi
        if ($new_balance < 100) {
            $this->send_low_credits_alert($new_balance);
        }
        
        return $new_balance;
    }
    
    private function send_low_credits_alert($balance) {
        $last_alert = get_option('wsp_last_credits_alert', 0);
        
        // Invia alert massimo una volta al giorno
        if (time() - $last_alert > 86400) {
            $admin_email = get_option('admin_email');
            $subject = '[WhatsApp SaaS] Crediti in esaurimento';
            $message = sprintf(
                "Attenzione!\n\nI crediti WhatsApp stanno per esaurirsi.\nSaldo attuale: %d crediti\n\nRicarica al più presto per continuare ad utilizzare il servizio.\n\n%s",
                $balance,
                admin_url('admin.php?page=wsp-credits')
            );
            
            wp_mail($admin_email, $subject, $message);
            update_option('wsp_last_credits_alert', time());
            
            WSP_Database::log_activity(
                'low_credits_alert',
                sprintf('Alert crediti bassi inviato (saldo: %d)', $balance)
            );
        }
    }
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-campaigns.php
SIZE: 15.36 KB
MODIFIED: 2025-08-18 18:21:00
--------------------------------------------------------------------------------
<?php
/**
 * Gestione Campagne QR per WhatsApp SaaS Plugin
 * Sistema completo per creare e gestire campagne QR con tracking
 * 
 * @package WhatsApp_SaaS_Pro
 * @version 2.0.0
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Campaigns {
    
    private static $instance = null;
    
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    private function __construct() {
        add_action('init', array($this, 'register_post_type'));
        add_action('wp_ajax_wsp_create_campaign', array($this, 'ajax_create_campaign'));
        add_action('wp_ajax_wsp_get_campaign_stats', array($this, 'ajax_get_campaign_stats'));
        add_action('wp_ajax_nopriv_wsp_track_qr_scan', array($this, 'ajax_track_qr_scan'));
        add_action('wp_ajax_wsp_track_qr_scan', array($this, 'ajax_track_qr_scan'));
        
        // Shortcode per landing page QR
        add_shortcode('wsp_qr_landing', array($this, 'render_qr_landing'));
    }
    
    public function register_post_type() {
        register_post_type('wsp_campaign', array(
            'labels' => array(
                'name' => __('Campagne QR', 'wsp'),
                'singular_name' => __('Campagna QR', 'wsp')
            ),
            'public' => false,
            'show_ui' => false,
            'capability_type' => 'post',
            'supports' => array('title', 'editor')
        ));
    }
    
    public function create_campaign($data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_campaigns';
        
        // Prepara dati campagna
        $campaign_data = array(
            'name' => sanitize_text_field($data['name']),
            'phone_number' => sanitize_text_field($data['phone_number']),
            'description' => sanitize_textarea_field($data['description'] ?? ''),
            'message_text' => sanitize_textarea_field($data['message_text']),
            'send_text' => sanitize_textarea_field($data['send_text'] ?? ''),
            'link_description' => sanitize_text_field($data['link_description'] ?? ''),
            'link_url' => esc_url_raw($data['link_url'] ?? ''),
            'ref_id' => sanitize_text_field($data['ref_id'] ?? uniqid('QR_')),
            'qr_size' => intval($data['qr_size'] ?? 256),
            'qr_color' => sanitize_hex_color($data['qr_color'] ?? '#000000'),
            'qr_bg_color' => sanitize_hex_color($data['qr_bg_color'] ?? '#FFFFFF'),
            'custom_fields' => wp_json_encode($data['custom_fields'] ?? array()),
            'icons' => wp_json_encode($data['icons'] ?? array()),
            'landing_page_url' => '',
            'whatsapp_link' => '',
            'total_scans' => 0,
            'unique_scans' => 0,
            'status' => 'active',
            'created_by' => get_current_user_id(),
            'created_at' => current_time('mysql')
        );
        
        // Costruisci messaggio WhatsApp con icone
        $message = $this->build_whatsapp_message($campaign_data);
        
        // Genera link WhatsApp
        $whatsapp_link = 'https://wa.me/' . preg_replace('/[^0-9]/', '', $campaign_data['phone_number']);
        $whatsapp_link .= '?text=' . urlencode($message);
        
        $campaign_data['whatsapp_link'] = $whatsapp_link;
        
        // Genera landing page URL
        $landing_page_id = wp_insert_post(array(
            'post_title' => 'QR Campaign: ' . $campaign_data['name'],
            'post_content' => '[wsp_qr_landing campaign="' . $campaign_data['ref_id'] . '"]',
            'post_status' => 'publish',
            'post_type' => 'page',
            'post_author' => get_current_user_id()
        ));
        
        if ($landing_page_id) {
            $campaign_data['landing_page_url'] = get_permalink($landing_page_id);
            $campaign_data['landing_page_id'] = $landing_page_id;
        }
        
        // Salva nel database
        $result = $wpdb->insert($table_name, $campaign_data);
        
        if ($result) {
            $campaign_id = $wpdb->insert_id;
            
            // Log attività
            WSP_Database::log_activity(
                'campaign_created',
                sprintf('Campagna QR "%s" creata', $campaign_data['name']),
                array('campaign_id' => $campaign_id, 'ref_id' => $campaign_data['ref_id'])
            );
            
            return array(
                'success' => true,
                'campaign_id' => $campaign_id,
                'ref_id' => $campaign_data['ref_id'],
                'whatsapp_link' => $whatsapp_link,
                'landing_page_url' => $campaign_data['landing_page_url'],
                'qr_data' => $campaign_data['landing_page_url'] ?: $whatsapp_link
            );
        }
        
        return array('success' => false, 'message' => 'Errore nella creazione della campagna');
    }
    
    private function build_whatsapp_message($data) {
        $message = '';
        
        // Aggiungi descrizione con icona
        if (!empty($data['description'])) {
            $icon = isset($data['icons']['description']) ? $data['icons']['description'] : '📋';
            $message .= $icon . ' ' . $data['description'] . "\n\n";
        }
        
        // Aggiungi testo messaggio con icona
        if (!empty($data['message_text'])) {
            $icon = isset($data['icons']['message']) ? $data['icons']['message'] : '💬';
            $message .= $icon . ' ' . $data['message_text'] . "\n\n";
        }
        
        // Aggiungi testo aggiuntivo con icona
        if (!empty($data['send_text'])) {
            $icon = isset($data['icons']['send_text']) ? $data['icons']['send_text'] : '📝';
            $message .= $icon . ' ' . $data['send_text'] . "\n\n";
        }
        
        // Aggiungi link con descrizione
        if (!empty($data['link_url'])) {
            $icon = isset($data['icons']['link']) ? $data['icons']['link'] : '🔗';
            if (!empty($data['link_description'])) {
                $message .= $icon . ' ' . $data['link_description'] . ': ' . $data['link_url'] . "\n\n";
            } else {
                $message .= $icon . ' ' . $data['link_url'] . "\n\n";
            }
        }
        
        // Aggiungi campi personalizzati
        $custom_fields = json_decode($data['custom_fields'], true);
        if (!empty($custom_fields)) {
            $message .= "--- Info Aggiuntive ---\n";
            foreach ($custom_fields as $field) {
                if (!empty($field['name']) && !empty($field['value'])) {
                    $icon = isset($field['icon']) ? $field['icon'] : '💡';
                    $message .= $icon . ' ' . $field['name'] . ': ' . $field['value'] . "\n";
                }
            }
            $message .= "\n";
        }
        
        // Aggiungi riferimento
        if (!empty($data['ref_id'])) {
            $message .= '[' . $data['ref_id'] . ']';
        }
        
        return trim($message);
    }
    
    public function get_campaign($id_or_ref) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_campaigns';
        
        if (is_numeric($id_or_ref)) {
            return $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM $table_name WHERE id = %d",
                $id_or_ref
            ));
        } else {
            return $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM $table_name WHERE ref_id = %s",
                $id_or_ref
            ));
        }
    }
    
    public function track_scan($campaign_ref, $visitor_data = array()) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_campaigns';
        $scans_table = $wpdb->prefix . 'wsp_campaign_scans';
        
        // Ottieni campagna
        $campaign = $this->get_campaign($campaign_ref);
        if (!$campaign) {
            return false;
        }
        
        // Registra scansione
        $scan_data = array(
            'campaign_id' => $campaign->id,
            'visitor_ip' => $_SERVER['REMOTE_ADDR'] ?? '',
            'visitor_phone' => sanitize_text_field($visitor_data['phone'] ?? ''),
            'visitor_name' => sanitize_text_field($visitor_data['name'] ?? ''),
            'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
            'referer' => $_SERVER['HTTP_REFERER'] ?? '',
            'scan_time' => current_time('mysql')
        );
        
        $wpdb->insert($scans_table, $scan_data);
        
        // Aggiorna contatori campagna
        $wpdb->query($wpdb->prepare(
            "UPDATE $table_name SET total_scans = total_scans + 1 WHERE id = %d",
            $campaign->id
        ));
        
        // Controlla se è una scansione unica
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $scans_table WHERE campaign_id = %d AND visitor_ip = %s AND DATE(scan_time) = CURDATE()",
            $campaign->id,
            $scan_data['visitor_ip']
        ));
        
        if ($existing == 1) {
            $wpdb->query($wpdb->prepare(
                "UPDATE $table_name SET unique_scans = unique_scans + 1 WHERE id = %d",
                $campaign->id
            ));
        }
        
        return true;
    }
    
    public function render_qr_landing($atts) {
        $atts = shortcode_atts(array(
            'campaign' => ''
        ), $atts);
        
        if (empty($atts['campaign'])) {
            return '<p>Campagna non trovata</p>';
        }
        
        $campaign = $this->get_campaign($atts['campaign']);
        if (!$campaign) {
            return '<p>Campagna non valida</p>';
        }
        
        // Track scan
        $this->track_scan($campaign->ref_id);
        
        // Se è una richiesta AJAX, restituisci solo i dati
        if (wp_doing_ajax()) {
            wp_send_json_success(array(
                'whatsapp_link' => $campaign->whatsapp_link,
                'campaign_name' => $campaign->name
            ));
        }
        
        // Altrimenti mostra landing page
        ob_start();
        ?>
        <div class="wsp-qr-landing">
            <style>
                .wsp-qr-landing {
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                    text-align: center;
                }
                .wsp-qr-landing h2 {
                    color: #25D366;
                    margin-bottom: 20px;
                }
                .wsp-whatsapp-button {
                    display: inline-block;
                    background: #25D366;
                    color: white;
                    padding: 15px 30px;
                    border-radius: 30px;
                    text-decoration: none;
                    font-size: 18px;
                    font-weight: bold;
                    margin: 20px 0;
                }
                .wsp-whatsapp-button:hover {
                    background: #128C7E;
                    color: white;
                }
                .wsp-campaign-info {
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    margin: 20px 0;
                }
            </style>
            
            <h2>📱 <?php echo esc_html($campaign->name); ?></h2>
            
            <?php if ($campaign->description): ?>
                <div class="wsp-campaign-info">
                    <p><?php echo nl2br(esc_html($campaign->description)); ?></p>
                </div>
            <?php endif; ?>
            
            <a href="<?php echo esc_url($campaign->whatsapp_link); ?>" 
               class="wsp-whatsapp-button" 
               target="_blank"
               onclick="wspTrackWhatsAppClick('<?php echo esc_js($campaign->ref_id); ?>')">
                💬 Apri WhatsApp
            </a>
            
            <p style="color: #666; font-size: 14px;">
                Clicca il pulsante per aprire WhatsApp con il messaggio precompilato
            </p>
            
            <script>
            function wspTrackWhatsAppClick(campaignRef) {
                // Track click event
                fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'action=wsp_track_qr_scan&campaign=' + campaignRef + '&event=whatsapp_click'
                });
            }
            </script>
        </div>
        <?php
        return ob_get_clean();
    }
    
    public function ajax_create_campaign() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $result = $this->create_campaign($_POST);
        
        if ($result['success']) {
            wp_send_json_success($result);
        } else {
            wp_send_json_error($result['message']);
        }
    }
    
    public function ajax_get_campaign_stats() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $campaign_id = intval($_POST['campaign_id'] ?? 0);
        
        if (!$campaign_id) {
            wp_send_json_error('ID campagna non valido');
        }
        
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_campaigns';
        $scans_table = $wpdb->prefix . 'wsp_campaign_scans';
        
        $campaign = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $campaign_id
        ));
        
        if (!$campaign) {
            wp_send_json_error('Campagna non trovata');
        }
        
        // Statistiche dettagliate
        $stats = array(
            'total_scans' => $campaign->total_scans,
            'unique_scans' => $campaign->unique_scans,
            'conversion_rate' => $campaign->total_scans > 0 ? 
                round(($campaign->unique_scans / $campaign->total_scans) * 100, 2) : 0,
            'recent_scans' => $wpdb->get_results($wpdb->prepare(
                "SELECT * FROM $scans_table WHERE campaign_id = %d ORDER BY scan_time DESC LIMIT 10",
                $campaign_id
            )),
            'daily_scans' => $wpdb->get_results($wpdb->prepare(
                "SELECT DATE(scan_time) as date, COUNT(*) as count 
                 FROM $scans_table 
                 WHERE campaign_id = %d 
                 GROUP BY DATE(scan_time) 
                 ORDER BY date DESC 
                 LIMIT 30",
                $campaign_id
            ))
        );
        
        wp_send_json_success($stats);
    }
    
    public function ajax_track_qr_scan() {
        $campaign_ref = sanitize_text_field($_REQUEST['campaign'] ?? '');
        $event = sanitize_text_field($_REQUEST['event'] ?? 'scan');
        
        if (empty($campaign_ref)) {
            wp_send_json_error('Campagna non specificata');
        }
        
        $visitor_data = array(
            'phone' => sanitize_text_field($_REQUEST['phone'] ?? ''),
            'name' => sanitize_text_field($_REQUEST['name'] ?? ''),
            'event' => $event
        );
        
        $result = $this->track_scan($campaign_ref, $visitor_data);
        
        if ($result) {
            wp_send_json_success('Scan registrato');
        } else {
            wp_send_json_error('Errore registrazione scan');
        }
    }
}

// Inizializza
WSP_Campaigns::get_instance();


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-credits.php
SIZE: 6.56 KB
MODIFIED: 2025-08-16 23:14:48
--------------------------------------------------------------------------------
<?php
/**
 * Gestione Crediti per WhatsApp SaaS Plugin
 * ✅ COMPLETAMENTE FUNZIONALE - Sistema crediti avanzato
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Credits {
    
    private $pricing_plans = array();
    
    public function __construct() {
        $this->init_pricing_plans();
        
        add_action('wp_ajax_wsp_purchase_credits', array($this, 'handle_purchase'));
        add_action('wp_ajax_wsp_get_credit_stats', array($this, 'get_credit_statistics'));
        add_action('wsp_daily_credit_check', array($this, 'check_low_credits'));
        
        // Programma controllo crediti giornaliero
        if (!wp_next_scheduled('wsp_daily_credit_check')) {
            wp_schedule_event(time(), 'daily', 'wsp_daily_credit_check');
        }
    }
    
    private function init_pricing_plans() {
        $this->pricing_plans = array(
            'starter' => array(
                'name' => 'Piano Starter',
                'credits' => 500,
                'price' => 29.99,
                'currency' => 'EUR',
                'description' => 'Perfetto per piccole campagne',
                'features' => array(
                    '500 messaggi WhatsApp',
                    'Template personalizzabili',
                    'Supporto email'
                )
            ),
            'professional' => array(
                'name' => 'Piano Professional',
                'credits' => 2000,
                'price' => 99.99,
                'currency' => 'EUR',
                'description' => 'Ideale per aziende in crescita',
                'popular' => true,
                'features' => array(
                    '2000 messaggi WhatsApp',
                    'Template illimitati',
                    'Analisi avanzate',
                    'Supporto prioritario'
                )
            ),
            'enterprise' => array(
                'name' => 'Piano Enterprise',
                'credits' => 5000,
                'price' => 199.99,
                'currency' => 'EUR',
                'description' => 'Per grandi volumi di messaggi',
                'features' => array(
                    '5000 messaggi WhatsApp',
                    'API dedicata',
                    'Integrazione personalizzata',
                    'Account manager dedicato'
                )
            ),
            'unlimited' => array(
                'name' => 'Piano Unlimited',
                'credits' => 25000,
                'price' => 499.99,
                'currency' => 'EUR',
                'description' => 'Soluzione enterprise completa',
                'features' => array(
                    '25000 messaggi WhatsApp',
                    'Tutto incluso',
                    'SLA garantito',
                    'Supporto H24/7'
                )
            )
        );
    }
    
    public static function get_balance() {
        return (int) get_option('wsp_credits_balance', 0);
    }
    
    public static function add_credits($amount, $description = '') {
        $current_balance = self::get_balance();
        $new_balance = $current_balance + (int) $amount;
        
        update_option('wsp_credits_balance', $new_balance);
        
        WSP_Database::log_activity(
            'credits_added',
            $description ?: sprintf('Aggiunti %d crediti', $amount),
            array(
                'amount' => $amount,
                'previous_balance' => $current_balance,
                'new_balance' => $new_balance
            )
        );
        
        return $new_balance;
    }
    
    public static function consume_credits($amount, $description = '') {
        $current_balance = self::get_balance();
        
        if ($current_balance < $amount) {
            return false; // Crediti insufficienti
        }
        
        $new_balance = max(0, $current_balance - (int) $amount);
        update_option('wsp_credits_balance', $new_balance);
        
        WSP_Database::log_activity(
            'credits_consumed',
            $description ?: sprintf('Utilizzati %d crediti', $amount),
            array(
                'amount' => $amount,
                'previous_balance' => $current_balance,
                'new_balance' => $new_balance
            )
        );
        
        return $new_balance;
    }
    
    public function get_pricing_plans() {
        return $this->pricing_plans;
    }
    
    public function check_low_credits() {
        $balance = self::get_balance();
        $threshold = (int) get_option('wsp_low_credits_threshold', 100);
        
        if ($balance <= $threshold) {
            $admin_email = get_option('admin_email');
            $site_name = get_bloginfo('name');
            
            $subject = sprintf('[%s] Crediti WhatsApp in esaurimento', $site_name);
            $message = sprintf(
                "Il saldo crediti WhatsApp è sceso a %d crediti.\n\n" .
                "Soglia di allerta: %d crediti\n\n" .
                "Ti consigliamo di ricaricare il saldo per continuare ad inviare messaggi.\n\n" .
                "Vai al pannello crediti: %s",
                $balance,
                $threshold,
                admin_url('admin.php?page=wsp-credits')
            );
            
            wp_mail($admin_email, $subject, $message);
            
            WSP_Database::log_activity(
                'low_credits_alert',
                sprintf('Alert crediti bassi inviato: %d crediti rimanenti', $balance),
                array('balance' => $balance, 'threshold' => $threshold)
            );
        }
    }
    
    public function handle_purchase() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Accesso negato');
        }
        
        $plan_id = sanitize_text_field($_POST['plan_id'] ?? '');
        $plans = $this->get_pricing_plans();
        
        if (!isset($plans[$plan_id])) {
            wp_send_json_error('Piano non valido');
        }
        
        $plan = $plans[$plan_id];
        
        wp_send_json_success(array(
            'plan' => $plan,
            'message' => 'Integrazione con sistema di pagamento da implementare'
        ));
    }
    
    public function get_credit_statistics() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        $stats = array(
            'current_balance' => self::get_balance(),
            'total_consumed' => 0, // Da implementare con query database
            'total_added' => 0,    // Da implementare con query database
            'average_daily_usage' => 0 // Da implementare
        );
        
        wp_send_json_success($stats);
    }
}

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-database.php
SIZE: 25.09 KB
MODIFIED: 2025-08-18 22:04:40
--------------------------------------------------------------------------------
<?php
/**
 * Gestione Database per WhatsApp SaaS Plugin
 * VERSIONE COMPLETA con gestione destinatari, filtri, export e CAMPAGNE
 * FIX: Supporto sia camelCase che snake_case per compatibilità n8n
 * FIX: Risolto problema chiave UNIQUE con recipient_number vuoto
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Database {
    
    public static function create_tables() {
        global $wpdb;
        
        $charset_collate = $wpdb->get_charset_collate();
        
        // Tabella per i numeri WhatsApp estratti con destinatari
        // FIX: Rimossa la chiave UNIQUE problematica e gestita via codice
        $table_numbers = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $sql_numbers = "CREATE TABLE $table_numbers (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            message_id varchar(255) DEFAULT '',
            thread_id varchar(255) DEFAULT '',
            sender_number varchar(20) NOT NULL,
            sender_name varchar(255) DEFAULT '',
            sender_formatted varchar(25) DEFAULT '',
            sender_email varchar(255) DEFAULT '',
            recipient_number varchar(20) DEFAULT '',
            recipient_name varchar(255) DEFAULT '',
            recipient_email varchar(255) DEFAULT '',
            extraction_method varchar(50) DEFAULT '',
            raw_match varchar(255) DEFAULT '',
            context_match text,
            email_date datetime DEFAULT '0000-00-00 00:00:00',
            processed_at datetime DEFAULT CURRENT_TIMESTAMP,
            processed_date varchar(20) DEFAULT '',
            processed_time varchar(20) DEFAULT '',
            subject varchar(255) DEFAULT '',
            snippet text,
            is_new_sender tinyint(1) DEFAULT 1,
            has_recipient tinyint(1) DEFAULT 0,
            campaign_date date DEFAULT NULL,
            unique_visitor_id varchar(100) DEFAULT '',
            status varchar(20) DEFAULT 'active',
            created_at timestamp DEFAULT CURRENT_TIMESTAMP,
            updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY idx_sender_number (sender_number),
            KEY idx_recipient_number (recipient_number),
            KEY idx_campaign_date (campaign_date),
            KEY idx_status (status),
            KEY idx_created_at (created_at),
            KEY idx_unique_check (sender_number, recipient_number, campaign_date)
        ) $charset_collate;";
        
        // Tabella per i messaggi inviati
        $table_messages = $wpdb->prefix . 'wsp_messages';
        $sql_messages = "CREATE TABLE $table_messages (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            whatsapp_number_id mediumint(9) NOT NULL,
            recipient_number varchar(20) NOT NULL,
            message_content text NOT NULL,
            message_type varchar(20) DEFAULT 'welcome',
            sent_at datetime DEFAULT CURRENT_TIMESTAMP,
            delivery_status varchar(20) DEFAULT 'pending',
            api_response text,
            credits_used int(5) DEFAULT 1,
            campaign_id varchar(50) DEFAULT '',
            PRIMARY KEY (id),
            KEY idx_recipient (recipient_number),
            KEY idx_sent_at (sent_at),
            KEY idx_status (delivery_status)
        ) $charset_collate;";
        
        // Tabella per il log delle operazioni
        $table_logs = $wpdb->prefix . 'wsp_activity_logs';
        $sql_logs = "CREATE TABLE $table_logs (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            action varchar(50) NOT NULL,
            description text,
            data text,
            user_id int(11) DEFAULT NULL,
            ip_address varchar(45) DEFAULT '',
            user_agent text,
            created_at timestamp DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY idx_action (action),
            KEY idx_created_at (created_at)
        ) $charset_collate;";
        
        // Tabella per email schedule
        $table_email_schedule = $wpdb->prefix . 'wsp_email_schedule';
        $sql_email_schedule = "CREATE TABLE $table_email_schedule (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            email_to varchar(255) NOT NULL,
            schedule_time time DEFAULT '18:00:00',
            is_active tinyint(1) DEFAULT 1,
            last_sent datetime DEFAULT NULL,
            created_at timestamp DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
        ) $charset_collate;";
        
        // NUOVE TABELLE PER CAMPAGNE QR
        
        // Tabella per le campagne QR
        $table_campaigns = $wpdb->prefix . 'wsp_campaigns';
        $sql_campaigns = "CREATE TABLE $table_campaigns (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            name varchar(255) NOT NULL,
            phone_number varchar(20) NOT NULL,
            description text,
            message_text text,
            send_text text,
            link_description varchar(255) DEFAULT '',
            link_url varchar(500) DEFAULT '',
            ref_id varchar(50) UNIQUE,
            qr_size int(4) DEFAULT 256,
            qr_color varchar(7) DEFAULT '#000000',
            qr_bg_color varchar(7) DEFAULT '#FFFFFF',
            custom_fields text,
            icons text,
            landing_page_url varchar(500) DEFAULT '',
            landing_page_id int(11) DEFAULT NULL,
            whatsapp_link text,
            total_scans int(11) DEFAULT 0,
            unique_scans int(11) DEFAULT 0,
            status varchar(20) DEFAULT 'active',
            created_by int(11) DEFAULT NULL,
            created_at timestamp DEFAULT CURRENT_TIMESTAMP,
            updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY idx_ref_id (ref_id),
            KEY idx_status (status),
            KEY idx_created_at (created_at)
        ) $charset_collate;";
        
        // Tabella per tracciare le scansioni QR
        $table_scans = $wpdb->prefix . 'wsp_campaign_scans';
        $sql_scans = "CREATE TABLE $table_scans (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            campaign_id mediumint(9) NOT NULL,
            visitor_ip varchar(45) DEFAULT '',
            visitor_phone varchar(20) DEFAULT '',
            visitor_name varchar(255) DEFAULT '',
            user_agent text,
            referer text,
            scan_time timestamp DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY idx_campaign (campaign_id),
            KEY idx_scan_time (scan_time),
            KEY idx_visitor_ip (visitor_ip)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        
        dbDelta($sql_numbers);
        dbDelta($sql_messages);
        dbDelta($sql_logs);
        dbDelta($sql_email_schedule);
        dbDelta($sql_campaigns);
        dbDelta($sql_scans);
        
        // Log dell'installazione
        self::log_activity('plugin_install', 'Plugin WhatsApp SaaS installato con successo');
    }
    
    /**
     * Funzione helper per convertire camelCase in snake_case
     */
    private static function normalize_field_names($data) {
        $normalized = array();
        
        // Mapping dei campi da camelCase a snake_case
        $field_mapping = array(
            'messageId' => 'message_id',
            'threadId' => 'thread_id',
            'senderNumber' => 'sender_number',
            'senderName' => 'sender_name',
            'senderFormatted' => 'sender_formatted',
            'senderEmail' => 'sender_email',
            'recipientNumber' => 'recipient_number',
            'recipientName' => 'recipient_name',
            'recipientEmail' => 'recipient_email',
            'extractionMethod' => 'extraction_method',
            'rawMatch' => 'raw_match',
            'contextMatch' => 'context_match',
            'emailDate' => 'email_date',
            'processedDate' => 'processed_date',
            'processedTime' => 'processed_time',
            'isNewSender' => 'is_new_sender',
            'hasRecipient' => 'has_recipient',
            'campaignDate' => 'campaign_date',
            'uniqueVisitorId' => 'unique_visitor_id'
        );
        
        foreach ($data as $key => $value) {
            // Se la chiave è in camelCase, convertila
            if (isset($field_mapping[$key])) {
                $normalized[$field_mapping[$key]] = $value;
            } 
            // Se è già in snake_case, mantienila
            else {
                $normalized[$key] = $value;
            }
        }
        
        return $normalized;
    }
    
    public static function save_whatsapp_numbers($numbers_data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $saved_count = 0;
        $errors = array();
        
        // LOG DI DEBUG MIGLIORATO
        if (defined('WP_DEBUG') && WP_DEBUG) {
            error_log('WSP DEBUG - Inizio salvataggio. Totale record ricevuti: ' . count($numbers_data));
            error_log('WSP DEBUG - Primo record raw: ' . print_r(isset($numbers_data[0]) ? $numbers_data[0] : 'empty', true));
        }
        
        foreach ($numbers_data as $index => $number_data) {
            // Normalizza i nomi dei campi (da camelCase a snake_case)
            $normalized_data = self::normalize_field_names($number_data);
            
            // LOG ogni record normalizzato per debug
            if (defined('WP_DEBUG') && WP_DEBUG && $index < 3) { // Log solo i primi 3 per non intasare
                error_log("WSP DEBUG - Record $index normalizzato:");
                error_log('  Mittente: ' . ($normalized_data['sender_number'] ?? 'N/A'));
                error_log('  Destinatario: ' . ($normalized_data['recipient_number'] ?? 'N/A'));
                error_log('  Has Recipient: ' . (isset($normalized_data['has_recipient']) ? $normalized_data['has_recipient'] : 'N/A'));
            }
            
            // Prepara i dati per il database
            $data = array(
                'message_id' => sanitize_text_field($normalized_data['message_id'] ?? ''),
                'thread_id' => sanitize_text_field($normalized_data['thread_id'] ?? ''),
                'sender_number' => sanitize_text_field($normalized_data['sender_number'] ?? ''),
                'sender_name' => sanitize_text_field($normalized_data['sender_name'] ?? ''),
                'sender_formatted' => sanitize_text_field($normalized_data['sender_formatted'] ?? ''),
                'sender_email' => sanitize_email($normalized_data['sender_email'] ?? ''),
                'recipient_number' => sanitize_text_field($normalized_data['recipient_number'] ?? ''),
                'recipient_name' => sanitize_text_field($normalized_data['recipient_name'] ?? ''),
                'recipient_email' => sanitize_email($normalized_data['recipient_email'] ?? ''),
                'extraction_method' => sanitize_text_field($normalized_data['extraction_method'] ?? 'n8n'),
                'raw_match' => sanitize_text_field($normalized_data['raw_match'] ?? ''),
                'context_match' => sanitize_textarea_field($normalized_data['context_match'] ?? ''),
                'email_date' => sanitize_text_field($normalized_data['email_date'] ?? ''),
                'processed_date' => sanitize_text_field($normalized_data['processed_date'] ?? date('Y-m-d')),
                'processed_time' => sanitize_text_field($normalized_data['processed_time'] ?? date('H:i:s')),
                'subject' => sanitize_text_field($normalized_data['subject'] ?? ''),
                'snippet' => sanitize_textarea_field($normalized_data['snippet'] ?? ''),
                'is_new_sender' => isset($normalized_data['is_new_sender']) ? 
                    (is_bool($normalized_data['is_new_sender']) ? ($normalized_data['is_new_sender'] ? 1 : 0) : 1) : 1,
                'has_recipient' => !empty($normalized_data['recipient_number']) ? 1 : 
                    (isset($normalized_data['has_recipient']) ? 
                        (is_bool($normalized_data['has_recipient']) ? ($normalized_data['has_recipient'] ? 1 : 0) : 
                            intval($normalized_data['has_recipient'])) : 0),
                'campaign_date' => date('Y-m-d'),
                'unique_visitor_id' => sanitize_text_field($normalized_data['unique_visitor_id'] ?? uniqid()),
                'status' => 'active'
            );
            
            // Validazione numero mittente (obbligatorio)
            if (empty($data['sender_number'])) {
                $errors[] = "Record $index: numero mittente mancante";
                if (defined('WP_DEBUG') && WP_DEBUG) {
                    error_log("WSP DEBUG - Skipping record $index: no sender number");
                }
                continue;
            }
            
            // Normalizza formato numeri telefonici
            $data['sender_number'] = self::normalize_phone_number($data['sender_number']);
            if (!empty($data['recipient_number'])) {
                $data['recipient_number'] = self::normalize_phone_number($data['recipient_number']);
            }
            
            // FIX: Gestione duplicati migliorata senza UNIQUE constraint
            // Prima controlla se esiste già un record simile
            $check_duplicate_query = $wpdb->prepare(
                "SELECT id FROM $table_name 
                 WHERE sender_number = %s 
                 AND recipient_number = %s 
                 AND campaign_date = %s",
                $data['sender_number'],
                $data['recipient_number'] ?: '',
                $data['campaign_date']
            );
            
            $existing_id = $wpdb->get_var($check_duplicate_query);
            
            if ($existing_id) {
                // Record duplicato trovato, aggiorna invece di inserire
                $where = array('id' => $existing_id);
                
                // Aggiorna solo alcuni campi per non sovrascrivere tutto
                $update_data = array(
                    'sender_name' => $data['sender_name'],
                    'sender_email' => $data['sender_email'],
                    'recipient_name' => $data['recipient_name'],
                    'recipient_email' => $data['recipient_email'],
                    'subject' => $data['subject'],
                    'snippet' => $data['snippet'],
                    'updated_at' => current_time('mysql')
                );
                
                $update_result = $wpdb->update($table_name, $update_data, $where);
                if ($update_result !== false) {
                    $saved_count++;
                    self::log_activity('number_updated', 
                        sprintf('Numero aggiornato (duplicato): %s -> %s', 
                            $data['sender_number'], 
                            $data['recipient_number'] ?: 'N/A'
                        ),
                        array('record_id' => $existing_id)
                    );
                    
                    if (defined('WP_DEBUG') && WP_DEBUG) {
                        error_log("WSP DEBUG - Record aggiornato (era duplicato) ID: $existing_id");
                    }
                } else {
                    $errors[] = "Update fallito per ID: $existing_id";
                }
            } else {
                // Nessun duplicato, procedi con l'inserimento
                $result = $wpdb->insert($table_name, $data);
                
                if ($result !== false) {
                    $saved_count++;
                    $insert_id = $wpdb->insert_id;
                    
                    self::log_activity('number_added', 
                        sprintf('Numero aggiunto: %s -> %s (ID: %d)', 
                            $data['sender_number'], 
                            $data['recipient_number'] ?: 'N/A',
                            $insert_id
                        ),
                        array(
                            'record_id' => $insert_id,
                            'sender' => $data['sender_number'],
                            'recipient' => $data['recipient_number']
                        )
                    );
                    
                    if (defined('WP_DEBUG') && WP_DEBUG) {
                        error_log("WSP DEBUG - Record salvato con successo. ID: $insert_id");
                    }
                } else {
                    $errors[] = "Errore inserimento: " . $wpdb->last_error;
                    if (defined('WP_DEBUG') && WP_DEBUG) {
                        error_log('WSP DEBUG - Errore salvataggio: ' . $wpdb->last_error);
                    }
                }
            }
        }
        
        // Log finale riepilogativo
        if (defined('WP_DEBUG') && WP_DEBUG) {
            error_log("WSP DEBUG - Salvataggio completato. Salvati: $saved_count, Errori: " . count($errors));
        }
        
        return array(
            'saved' => $saved_count,
            'errors' => $errors,
            'total' => count($numbers_data)
        );
    }
    
    /**
     * Normalizza numero di telefono nel formato corretto
     */
    private static function normalize_phone_number($phone) {
        // Rimuovi spazi, trattini e punti
        $phone = preg_replace('/[\s\-\.]/', '', $phone);
        
        // Se è già formattato correttamente con +, lascialo così
        if (strpos($phone, '+') === 0) {
            return $phone;
        }
        
        // Se inizia con 39 ed è lungo almeno 11 cifre, aggiungi +
        if (strpos($phone, '39') === 0 && strlen($phone) >= 11) {
            return '+' . $phone;
        }
        
        // Se è un numero italiano mobile (inizia con 3 ed è lungo 10 cifre)
        if (strpos($phone, '3') === 0 && strlen($phone) === 10) {
            return '+39' . $phone;
        }
        
        // Altrimenti restituiscilo così com'è (potrebbe essere internazionale)
        return $phone;
    }
    
    public static function get_whatsapp_numbers($limit = 50, $offset = 0, $filters = array()) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $where_conditions = array('status = %s');
        $where_values = array('active');
        
        // Filtro per ricerca generale
        if (!empty($filters['search'])) {
            $where_conditions[] = '(sender_number LIKE %s OR sender_name LIKE %s OR sender_email LIKE %s OR recipient_number LIKE %s OR recipient_name LIKE %s OR recipient_email LIKE %s)';
            $search_term = '%' . $wpdb->esc_like($filters['search']) . '%';
            array_push($where_values, $search_term, $search_term, $search_term, $search_term, $search_term, $search_term);
        }
        
        // Filtro specifico per destinatario
        if (!empty($filters['recipient'])) {
            $where_conditions[] = '(recipient_number LIKE %s OR recipient_name LIKE %s OR recipient_email LIKE %s)';
            $recipient_term = '%' . $wpdb->esc_like($filters['recipient']) . '%';
            array_push($where_values, $recipient_term, $recipient_term, $recipient_term);
        }
        
        // Filtro per range di date
        if (!empty($filters['date_from'])) {
            $where_conditions[] = 'DATE(created_at) >= %s';
            $where_values[] = $filters['date_from'];
        }
        
        if (!empty($filters['date_to'])) {
            $where_conditions[] = 'DATE(created_at) <= %s';
            $where_values[] = $filters['date_to'];
        }
        
        // Filtro per range orario
        if (!empty($filters['time_from'])) {
            $where_conditions[] = 'TIME(created_at) >= %s';
            $where_values[] = $filters['time_from'];
        }
        
        if (!empty($filters['time_to'])) {
            $where_conditions[] = 'TIME(created_at) <= %s';
            $where_values[] = $filters['time_to'];
        }
        
        $where_clause = implode(' AND ', $where_conditions);
        
        // Aggiungi limit e offset
        array_push($where_values, $limit, $offset);
        
        $query = $wpdb->prepare(
            "SELECT * FROM $table_name WHERE $where_clause ORDER BY created_at DESC LIMIT %d OFFSET %d",
            $where_values
        );
        
        return $wpdb->get_results($query);
    }
    
    public static function get_todays_numbers() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        
        return $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $table_name WHERE DATE(created_at) = %s AND status = 'active' ORDER BY created_at DESC",
            date('Y-m-d')
        ));
    }
    
    public static function export_to_csv($filters = array()) {
        $numbers = self::get_whatsapp_numbers(99999, 0, $filters);
        
        $csv_data = array();
        
        // Header CSV
        $csv_data[] = array(
            'ID',
            'Numero Mittente',
            'Nome Mittente',
            'Email Mittente',
            'Numero Destinatario',
            'Nome Destinatario',
            'Email Destinatario',
            'Data',
            'Ora',
            'Oggetto Email',
            'Snippet',
            'Metodo Estrazione',
            'Ha Destinatario',
            'Stato'
        );
        
        // Dati
        foreach ($numbers as $number) {
            $csv_data[] = array(
                $number->id,
                $number->sender_formatted ?: $number->sender_number,
                $number->sender_name ?: '',
                $number->sender_email ?: '',
                property_exists($number, 'recipient_number') ? $number->recipient_number : '',
                property_exists($number, 'recipient_name') ? $number->recipient_name : '',
                property_exists($number, 'recipient_email') ? $number->recipient_email : '',
                date('d/m/Y', strtotime($number->created_at)),
                date('H:i:s', strtotime($number->created_at)),
                $number->subject ?: '',
                substr($number->snippet ?: '', 0, 100),
                $number->extraction_method ?: '',
                (property_exists($number, 'has_recipient') && $number->has_recipient) ? 'Si' : 'No',
                $number->status
            );
        }
        
        return $csv_data;
    }
    
    public static function get_statistics() {
        global $wpdb;
        
        $table_numbers = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $table_messages = $wpdb->prefix . 'wsp_messages';
        
        $stats = array();
        
        // Totale numeri
        $stats['total_numbers'] = $wpdb->get_var("SELECT COUNT(*) FROM $table_numbers WHERE status = 'active'");
        
        // Numeri oggi
        $stats['numbers_today'] = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $table_numbers WHERE status = 'active' AND DATE(created_at) = %s",
            date('Y-m-d')
        ));
        
        // Mittenti unici oggi
        $stats['unique_senders_today'] = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(DISTINCT sender_number) FROM $table_numbers WHERE status = 'active' AND DATE(created_at) = %s",
            date('Y-m-d')
        ));
        
        // Destinatari unici oggi
        $stats['unique_recipients_today'] = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(DISTINCT recipient_number) FROM $table_numbers WHERE status = 'active' AND DATE(created_at) = %s AND recipient_number != ''",
            date('Y-m-d')
        ));
        
        // Messaggi inviati totali
        $stats['total_messages'] = $wpdb->get_var("SELECT COUNT(*) FROM $table_messages");
        
        // Messaggi inviati oggi
        $stats['messages_today'] = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $table_messages WHERE DATE(sent_at) = %s",
            date('Y-m-d')
        ));
        
        return $stats;
    }
    
    public static function get_recipients_list() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        
        return $wpdb->get_results(
            "SELECT DISTINCT recipient_number, recipient_name, recipient_email, COUNT(*) as count 
             FROM $table_name 
             WHERE recipient_number != '' AND status = 'active'
             GROUP BY recipient_number, recipient_name, recipient_email
             ORDER BY count DESC"
        );
    }
    
    public static function log_activity($action, $description, $data = null) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_activity_logs';
        
        $log_data = array(
            'action' => sanitize_text_field($action),
            'description' => sanitize_text_field($description),
            'data' => $data ? wp_json_encode($data) : null,
            'user_id' => get_current_user_id(),
            'ip_address' => self::get_client_ip(),
            'user_agent' => sanitize_text_field($_SERVER['HTTP_USER_AGENT'] ?? '')
        );
        
        $wpdb->insert($table_name, $log_data);
    }
    
    private static function get_client_ip() {
        $ip_keys = array('HTTP_X_FORWARDED_FOR', 'HTTP_X_REAL_IP', 'HTTP_CLIENT_IP', 'REMOTE_ADDR');
        
        foreach ($ip_keys as $key) {
            if (isset($_SERVER[$key]) && !empty($_SERVER[$key])) {
                $ip = $_SERVER[$key];
                if (strpos($ip, ',') !== false) {
                    $ip = explode(',', $ip)[0];
                }
                return sanitize_text_field(trim($ip));
            }
        }
        
        return '127.0.0.1';
    }
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-gmail.php
SIZE: 13.34 KB
MODIFIED: 2025-08-19 00:45:27
--------------------------------------------------------------------------------
<?php

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Gmail {
    
    private $config;
    private $connection;
    private $is_connected = false;
    
    public function __construct($config) {
        $this->config = $config;
    }
    
    public function connect() {
        try {
            // Verifica se imap è disponibile
            if (!function_exists('imap_open')) {
                return array(
                    'success' => false,
                    'message' => 'Estensione PHP IMAP non disponibile. Installa php-imap.'
                );
            }
            
            // Costruisce stringa connessione IMAP
            $mailbox = '{' . $this->config['host'] . ':' . $this->config['port'] . '/imap/ssl}' . $this->config['folder'];
            
            // Tenta connessione
            $this->connection = @imap_open(
                $mailbox,
                $this->config['username'],
                $this->config['password']
            );
            
            if (!$this->connection) {
                $error = imap_last_error();
                return array(
                    'success' => false,
                    'message' => 'Connessione Gmail fallita: ' . ($error ?: 'Credenziali non valide')
                );
            }
            
            $this->is_connected = true;
            
            return array(
                'success' => true,
                'message' => 'Connessione Gmail stabilita con successo',
                'data' => array(
                    'mailbox' => $mailbox,
                    'username' => $this->config['username']
                )
            );
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore connessione Gmail: ' . $e->getMessage()
            );
        }
    }
    
    public function disconnect() {
        if ($this->connection && $this->is_connected) {
            @imap_close($this->connection);
            $this->is_connected = false;
            $this->connection = null;
        }
    }
    
    public function test_connection() {
        $connect_result = $this->connect();
        
        if (!$connect_result['success']) {
            return $connect_result;
        }
        
        try {
            // Testa lettura info mailbox
            $mailbox_info = imap_mailboxmsginfo($this->connection);
            
            $this->disconnect();
            
            return array(
                'success' => true,
                'message' => 'Test connessione Gmail completato con successo',
                'data' => array(
                    'total_messages' => $mailbox_info->Nmsgs ?? 0,
                    'unread_messages' => $mailbox_info->Unread ?? 0,
                    'recent_messages' => $mailbox_info->Recent ?? 0,
                    'mailbox_size' => $this->format_bytes($mailbox_info->Size ?? 0)
                )
            );
            
        } catch (Exception $e) {
            $this->disconnect();
            return array(
                'success' => false,
                'message' => 'Test Gmail fallito: ' . $e->getMessage()
            );
        }
    }
    
    public function read_emails($limit = 50, $search_criteria = 'ALL') {
        if (!$this->is_connected) {
            $connect = $this->connect();
            if (!$connect['success']) {
                return $connect;
            }
        }
        
        try {
            // Cerca email secondo criteri
            $message_numbers = imap_search($this->connection, $search_criteria);
            
            if (!$message_numbers) {
                return array(
                    'success' => true,
                    'message' => 'Nessuna email trovata con i criteri specificati',
                    'data' => array()
                );
            }
            
            // Ordina per più recenti
            rsort($message_numbers);
            
            // Limita risultati
            $message_numbers = array_slice($message_numbers, 0, $limit);
            
            $emails = array();
            
            foreach ($message_numbers as $msg_number) {
                $email_data = $this->get_email_data($msg_number);
                if ($email_data) {
                    $emails[] = $email_data;
                }
            }
            
            return array(
                'success' => true,
                'message' => 'Email lette con successo',
                'data' => $emails
            );
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore lettura email: ' . $e->getMessage()
            );
        }
    }
    
    public function search_emails($criteria) {
        if (!$this->is_connected) {
            $connect = $this->connect();
            if (!$connect['success']) {
                return $connect;
            }
        }
        
        try {
            // Criteri di ricerca IMAP
            $search_terms = array();
            
            if (!empty($criteria['from'])) {
                $search_terms[] = 'FROM "' . $criteria['from'] . '"';
            }
            
            if (!empty($criteria['subject'])) {
                $search_terms[] = 'SUBJECT "' . $criteria['subject'] . '"';
            }
            
            if (!empty($criteria['body'])) {
                $search_terms[] = 'BODY "' . $criteria['body'] . '"';
            }
            
            if (!empty($criteria['since'])) {
                $search_terms[] = 'SINCE "' . $criteria['since'] . '"';
            }
            
            if (!empty($criteria['before'])) {
                $search_terms[] = 'BEFORE "' . $criteria['before'] . '"';
            }
            
            $search_string = empty($search_terms) ? 'ALL' : implode(' ', $search_terms);
            
            return $this->read_emails(100, $search_string);
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore ricerca email: ' . $e->getMessage()
            );
        }
    }
    
    private function get_email_data($msg_number) {
        try {
            // Header email
            $header = imap_headerinfo($this->connection, $msg_number);
            
            // Body email
            $body = $this->get_email_body($msg_number);
            
            // Attachments
            $attachments = $this->get_attachments($msg_number);
            
            return array(
                'message_id' => $header->message_id ?? '',
                'subject' => isset($header->subject) ? $this->decode_mime_string($header->subject) : '',
                'from' => isset($header->from[0]) ? $this->get_email_address($header->from[0]) : '',
                'to' => isset($header->to[0]) ? $this->get_email_address($header->to[0]) : '',
                'date' => isset($header->date) ? date('Y-m-d H:i:s', strtotime($header->date)) : '',
                'size' => $header->Size ?? 0,
                'body' => $body,
                'attachments' => $attachments,
                'flags' => array(
                    'seen' => $header->Unseen == 'U' ? false : true,
                    'flagged' => $header->Flagged == 'F' ? true : false,
                    'answered' => $header->Answered == 'A' ? true : false
                )
            );
            
        } catch (Exception $e) {
            error_log("Errore lettura email $msg_number: " . $e->getMessage());
            return null;
        }
    }
    
    private function get_email_body($msg_number) {
        $body = '';
        
        try {
            $structure = imap_fetchstructure($this->connection, $msg_number);
            
            if (empty($structure->parts)) {
                // Email semplice senza parti multiple
                $body = imap_fetchbody($this->connection, $msg_number, 1);
                
                if ($structure->encoding == 3) { // Base64
                    $body = base64_decode($body);
                } elseif ($structure->encoding == 4) { // Quoted-printable
                    $body = quoted_printable_decode($body);
                }
            } else {
                // Email multipart
                foreach ($structure->parts as $part_number => $part) {
                    $part_body = imap_fetchbody($this->connection, $msg_number, $part_number + 1);
                    
                    if ($part->encoding == 3) { // Base64
                        $part_body = base64_decode($part_body);
                    } elseif ($part->encoding == 4) { // Quoted-printable
                        $part_body = quoted_printable_decode($part_body);
                    }
                    
                    // Priorità al testo plain
                    if (isset($part->subtype)) {
                        if (strtolower($part->subtype) == 'plain') {
                            $body = $part_body;
                            break;
                        } elseif (strtolower($part->subtype) == 'html' && empty($body)) {
                            $body = strip_tags($part_body);
                        }
                    }
                }
            }
            
            return trim($body);
            
        } catch (Exception $e) {
            error_log("Errore estrazione body: " . $e->getMessage());
            return '';
        }
    }
    
    private function get_attachments($msg_number) {
        $attachments = array();
        
        try {
            $structure = imap_fetchstructure($this->connection, $msg_number);
            
            if (!empty($structure->parts)) {
                foreach ($structure->parts as $part_number => $part) {
                    if (isset($part->disposition) && strtolower($part->disposition) == 'attachment') {
                        if (isset($part->dparameters)) {
                            foreach ($part->dparameters as $param) {
                                if (strtolower($param->attribute) == 'filename') {
                                    $attachments[] = array(
                                        'filename' => $this->decode_mime_string($param->value),
                                        'size' => $part->bytes ?? 0,
                                        'type' => isset($part->subtype) ? $part->subtype : 'unknown'
                                    );
                                }
                            }
                        }
                    }
                }
            }
            
        } catch (Exception $e) {
            error_log("Errore estrazione attachments: " . $e->getMessage());
        }
        
        return $attachments;
    }
    
    private function decode_mime_string($string) {
        $decoded = imap_mime_header_decode($string);
        $result = '';
        
        foreach ($decoded as $part) {
            $result .= $part->text;
        }
        
        return $result;
    }
    
    private function get_email_address($address_obj) {
        $email = '';
        
        if (isset($address_obj->personal)) {
            $email .= $this->decode_mime_string($address_obj->personal) . ' ';
        }
        
        if (isset($address_obj->mailbox) && isset($address_obj->host)) {
            $email .= '<' . $address_obj->mailbox . '@' . $address_obj->host . '>';
        }
        
        return trim($email);
    }
    
    private function format_bytes($size, $precision = 2) {
        $base = log($size, 1024);
        $suffixes = array('B', 'KB', 'MB', 'GB', 'TB');
        
        return round(pow(1024, $base - floor($base)), $precision) . ' ' . $suffixes[floor($base)];
    }
    
    public function mark_as_read($message_ids) {
        if (!$this->is_connected) {
            return array('success' => false, 'message' => 'Non connesso a Gmail');
        }
        
        try {
            foreach ($message_ids as $msg_id) {
                imap_setflag_full($this->connection, $msg_id, "\\Seen");
            }
            
            return array(
                'success' => true,
                'message' => 'Email marcate come lette'
            );
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore marcatura email: ' . $e->getMessage()
            );
        }
    }
    
    public function get_folder_list() {
        if (!$this->is_connected) {
            $connect = $this->connect();
            if (!$connect['success']) {
                return $connect;
            }
        }
        
        try {
            $mailbox_base = '{' . $this->config['host'] . ':' . $this->config['port'] . '/imap/ssl}';
            $folders = imap_list($this->connection, $mailbox_base, '*');
            
            $folder_list = array();
            if ($folders) {
                foreach ($folders as $folder) {
                    $folder_name = str_replace($mailbox_base, '', $folder);
                    $folder_list[] = $folder_name;
                }
            }
            
            return array(
                'success' => true,
                'data' => $folder_list
            );
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore lettura cartelle: ' . $e->getMessage()
            );
        }
    }
    
    public function __destruct() {
        $this->disconnect();
    }
}

?>

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-mail2wa.php
SIZE: 12.82 KB
MODIFIED: 2025-08-19 00:44:14
--------------------------------------------------------------------------------
<?php

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Mail2Wa {
    
    private $config;
    private $api_url;
    private $api_key;
    
    public function __construct($config) {
        $this->config = $config;
        $this->api_url = $config['api_url'];
        $this->api_key = $config['api_key'];
    }
    
    public function send_message($to, $message, $options = array()) {
        try {
            // Pulisce e valida il numero
            $to = $this->clean_phone_number($to);
            if (!$this->validate_phone_number($to)) {
                return array(
                    'success' => false,
                    'message' => 'Numero di telefono non valido: ' . $to
                );
            }
            
            // Prepara payload secondo dump_qrcode
            $payload = array(
                'to' => $to,
                'message' => $message
            );
            
            // Aggiunge opzioni extra se presenti
            if (!empty($options['media_url'])) {
                $payload['media_url'] = $options['media_url'];
            }
            if (!empty($options['media_type'])) {
                $payload['media_type'] = $options['media_type'];
            }
            
            // Endpoint completo con API key
            $endpoint = $this->api_url . $this->config['endpoint_send'];
            
            // Headers corretti dal dump_qrcode
            $headers = array(
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'User-Agent' => 'WhatsApp-SaaS-Pro/2.0'
            );
            
            // Effettua chiamata API
            $response = wp_remote_post($endpoint, array(
                'body' => json_encode($payload),
                'headers' => $headers,
                'timeout' => $this->config['timeout'],
                'sslverify' => false // Per evitare problemi SSL
            ));
            
            if (is_wp_error($response)) {
                return array(
                    'success' => false,
                    'message' => 'Errore connessione Mail2Wa: ' . $response->get_error_message()
                );
            }
            
            $status_code = wp_remote_retrieve_response_code($response);
            $body = wp_remote_retrieve_body($response);
            
            // Log per debug
            error_log("Mail2Wa Response - Status: $status_code, Body: $body");
            
            if ($status_code === 200) {
                $decoded = json_decode($body, true);
                
                // Salva nel database per tracking
                $this->save_message_log($to, $message, $status_code, $body);
                
                return array(
                    'success' => true,
                    'message' => 'Messaggio WhatsApp inviato con successo',
                    'data' => array(
                        'to' => $to,
                        'message_id' => $decoded['id'] ?? null,
                        'status' => $decoded['status'] ?? 'sent',
                        'timestamp' => current_time('mysql')
                    )
                );
            } else {
                // Gestisce errori API
                $error_message = $this->parse_api_error($status_code, $body);
                
                $this->save_message_log($to, $message, $status_code, $body, false);
                
                return array(
                    'success' => false,
                    'message' => $error_message,
                    'data' => array(
                        'status_code' => $status_code,
                        'response' => $body
                    )
                );
            }
            
        } catch (Exception $e) {
            error_log("Mail2Wa Exception: " . $e->getMessage());
            return array(
                'success' => false,
                'message' => 'Errore interno: ' . $e->getMessage()
            );
        }
    }
    
    public function get_message_status($message_id) {
        try {
            $endpoint = $this->api_url . $this->config['endpoint_status'] . '&message_id=' . urlencode($message_id);
            
            $response = wp_remote_get($endpoint, array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'User-Agent' => 'WhatsApp-SaaS-Pro/2.0'
                ),
                'timeout' => 15,
                'sslverify' => false
            ));
            
            if (is_wp_error($response)) {
                return array(
                    'success' => false,
                    'message' => 'Errore verifica status: ' . $response->get_error_message()
                );
            }
            
            $status_code = wp_remote_retrieve_response_code($response);
            $body = wp_remote_retrieve_body($response);
            
            if ($status_code === 200) {
                $data = json_decode($body, true);
                return array(
                    'success' => true,
                    'data' => $data
                );
            } else {
                return array(
                    'success' => false,
                    'message' => 'Status API error: ' . $status_code
                );
            }
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore status: ' . $e->getMessage()
            );
        }
    }
    
    public function test_connection() {
        try {
            // Test con messaggio di prova
            $test_number = '393331234567'; // Numero di test
            $test_message = 'Test connessione Mail2Wa API - ' . date('Y-m-d H:i:s');
            
            $result = $this->send_message($test_number, $test_message);
            
            if ($result['success']) {
                return array(
                    'success' => true,
                    'message' => 'Connessione Mail2Wa API funzionante',
                    'data' => array(
                        'api_url' => $this->api_url,
                        'api_key_status' => 'valid',
                        'test_result' => $result['data']
                    )
                );
            } else {
                return array(
                    'success' => false,
                    'message' => 'Test Mail2Wa fallito: ' . $result['message'],
                    'data' => array(
                        'api_url' => $this->api_url,
                        'error' => $result
                    )
                );
            }
            
        } catch (Exception $e) {
            return array(
                'success' => false,
                'message' => 'Errore test connessione: ' . $e->getMessage()
            );
        }
    }
    
    public function send_bulk_messages($recipients, $message) {
        $results = array();
        $successful = 0;
        $failed = 0;
        
        foreach ($recipients as $recipient) {
            $number = is_array($recipient) ? $recipient['number'] : $recipient;
            $custom_message = is_array($recipient) && !empty($recipient['message']) ? $recipient['message'] : $message;
            
            // Personalizza messaggio se c'è un nome
            if (is_array($recipient) && !empty($recipient['name'])) {
                $custom_message = str_replace('{nome}', $recipient['name'], $custom_message);
                $custom_message = str_replace('{name}', $recipient['name'], $custom_message);
            }
            
            $result = $this->send_message($number, $custom_message);
            
            $results[] = array(
                'number' => $number,
                'success' => $result['success'],
                'message' => $result['message'],
                'data' => $result['data'] ?? null
            );
            
            if ($result['success']) {
                $successful++;
            } else {
                $failed++;
            }
            
            // Pausa per evitare rate limiting
            usleep(500000); // 0.5 secondi
        }
        
        return array(
            'success' => $successful > 0,
            'message' => "Invio bulk completato: $successful successi, $failed fallimenti",
            'data' => array(
                'total' => count($recipients),
                'successful' => $successful,
                'failed' => $failed,
                'results' => $results
            )
        );
    }
    
    private function clean_phone_number($number) {
        // Rimuove spazi, trattini, parentesi
        $cleaned = preg_replace('/[^\d+]/', '', $number);
        
        // Se inizia con 39 (Italia) aggiunge +
        if (preg_match('/^39\d{9,10}$/', $cleaned)) {
            $cleaned = '+' . $cleaned;
        }
        
        // Se inizia solo con cifre e è italiano
        if (preg_match('/^3\d{8,9}$/', $cleaned)) {
            $cleaned = '+39' . $cleaned;
        }
        
        return $cleaned;
    }
    
    private function validate_phone_number($number) {
        // Valida formato internazionale base
        return preg_match('/^\+\d{10,15}$/', $number);
    }
    
    private function parse_api_error($status_code, $body) {
        $decoded = json_decode($body, true);
        
        switch ($status_code) {
            case 400:
                return 'Richiesta non valida: ' . ($decoded['message'] ?? 'parametri mancanti o errati');
            case 401:
                return 'API Key non valida o scaduta';
            case 403:
                return 'Accesso negato: verifica i permessi API';
            case 429:
                return 'Rate limit raggiunto: troppe richieste';
            case 500:
                return 'Errore server Mail2Wa: riprova più tardi';
            default:
                return "Errore API ($status_code): " . ($decoded['message'] ?? $body);
        }
    }
    
    private function save_message_log($to, $message, $status_code, $response, $success = null) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_message_logs';
        
        // Crea tabella se non esiste
        $this->create_logs_table();
        
        $success = $success ?? ($status_code === 200);
        
        $wpdb->insert(
            $table_name,
            array(
                'to_number' => $to,
                'message' => $message,
                'status_code' => $status_code,
                'response' => $response,
                'success' => $success ? 1 : 0,
                'sent_at' => current_time('mysql')
            ),
            array('%s', '%s', '%d', '%s', '%d', '%s')
        );
    }
    
    private function create_logs_table() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_message_logs';
        
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE IF NOT EXISTS $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            to_number varchar(20) NOT NULL,
            message text NOT NULL,
            status_code int(3) NOT NULL,
            response text,
            success tinyint(1) DEFAULT 0,
            sent_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY idx_to_number (to_number),
            KEY idx_sent_at (sent_at)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
    }
    
    public function get_message_logs($limit = 50, $offset = 0) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_message_logs';
        
        $logs = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM $table_name ORDER BY sent_at DESC LIMIT %d OFFSET %d",
                $limit,
                $offset
            )
        );
        
        return $logs;
    }
    
    public function get_stats($days = 30) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_message_logs';
        
        $stats = $wpdb->get_row(
            $wpdb->prepare(
                "SELECT 
                    COUNT(*) as total_messages,
                    SUM(success) as successful_messages,
                    COUNT(*) - SUM(success) as failed_messages,
                    COUNT(DISTINCT to_number) as unique_recipients
                FROM $table_name 
                WHERE sent_at >= DATE_SUB(NOW(), INTERVAL %d DAY)",
                $days
            )
        );
        
        return array(
            'total_messages' => intval($stats->total_messages ?? 0),
            'successful_messages' => intval($stats->successful_messages ?? 0),
            'failed_messages' => intval($stats->failed_messages ?? 0),
            'unique_recipients' => intval($stats->unique_recipients ?? 0),
            'success_rate' => $stats->total_messages > 0 ? round(($stats->successful_messages / $stats->total_messages) * 100, 2) : 0
        );
    }
}

?>

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-messages.php
SIZE: 15.32 KB
MODIFIED: 2025-08-18 22:17:26
--------------------------------------------------------------------------------
<?php
/**
 * Gestione Messaggi per WhatsApp SaaS Plugin
 * VERSIONE CORRETTA con integrazione Mail2Wa funzionante
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Messages {
    
    private $mail2wa_api_key;
    private $mail2wa_endpoint;
    
    public function __construct() {
        $this->mail2wa_api_key = get_option('wsp_mail2wa_api_key', '');
        
        // Costruisci endpoint corretto
        $base_url = get_option('wsp_mail2wa_base_url', 'https://api.mail2wa.it');
        $endpoint_path = get_option('wsp_mail2wa_endpoint_path', 'send');
        $this->mail2wa_endpoint = rtrim($base_url, '/') . '/' . ltrim($endpoint_path, '/');
        
        add_action('wp_ajax_wsp_send_bulk_message', array($this, 'handle_bulk_send'));
        add_action('wp_ajax_wsp_send_welcome_message', array($this, 'handle_welcome_send'));
        add_action('wp_ajax_wsp_test_mail2wa_send', array($this, 'handle_test_send'));
    }
    
    public function send_welcome_message($whatsapp_number_id, $custom_message = null) {
        global $wpdb;
        
        $table_numbers = $wpdb->prefix . 'wsp_whatsapp_numbers';
        $number_data = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_numbers WHERE id = %d",
            $whatsapp_number_id
        ));
        
        if (!$number_data) {
            return array('success' => false, 'message' => 'Numero non trovato');
        }
        
        $message = $custom_message ?: get_option('wsp_welcome_message', '🎉 Benvenuto! Il tuo numero è stato registrato con successo nel nostro sistema.');
        
        // Personalizza il messaggio
        $message = str_replace('{nome}', $number_data->sender_name ?: 'Cliente', $message);
        $message = str_replace('{numero}', $number_data->sender_formatted ?: $number_data->sender_number, $message);
        
        return $this->send_whatsapp_message($number_data->sender_number, $message, $whatsapp_number_id, 'welcome');
    }
    
    public function send_whatsapp_message($phone_number, $message, $whatsapp_number_id = null, $type = 'manual', $campaign_id = null) {
        
        // Verifica crediti disponibili
        $credits = (int) get_option('wsp_credits_balance', 0);
        if ($credits <= 0) {
            return array('success' => false, 'message' => 'Crediti insufficienti');
        }
        
        // Normalizza numero di telefono
        $phone_number = $this->normalize_phone_number($phone_number);
        
        // Prova prima con API Mail2Wa
        $result = $this->send_via_mail2wa_api($phone_number, $message);
        
        // Se l'API fallisce e il fallback email è abilitato, prova con email
        if (!$result['success'] && get_option('wsp_mail2wa_email_fallback', true)) {
            $result = $this->send_via_mail2wa_email($phone_number, $message);
        }
        
        // Salva record messaggio se abbiamo un ID
        if ($whatsapp_number_id) {
            $this->save_message_record(
                $whatsapp_number_id, 
                $phone_number, 
                $message, 
                $type, 
                $result['success'] ? 'sent' : 'failed', 
                $result['api_response'] ?? '', 
                $campaign_id
            );
        }
        
        // Decrementa crediti solo se successo
        if ($result['success']) {
            $new_balance = $credits - 1;
            update_option('wsp_credits_balance', $new_balance);
            $result['credits_remaining'] = $new_balance;
        }
        
        return $result;
    }
    
    private function send_via_mail2wa_api($phone_number, $message) {
        // Se non c'è API key, salta questo metodo
        if (empty($this->mail2wa_api_key)) {
            return array(
                'success' => false,
                'message' => 'API Key Mail2Wa non configurata',
                'api_response' => 'No API key'
            );
        }
        
        // Determina il metodo di autenticazione
        $auth_method = get_option('wsp_mail2wa_auth_method', 'body');
        $content_type = get_option('wsp_mail2wa_content_type', 'json');
        $http_method = get_option('wsp_mail2wa_method', 'POST');
        
        // Prepara i parametri
        $phone_param = get_option('wsp_mail2wa_phone_param', 'to');
        $message_param = get_option('wsp_mail2wa_message_param', 'message');
        $api_key_param = get_option('wsp_mail2wa_api_key_param', 'api_key');
        
        // Costruisci il payload base
        $payload = array(
            $phone_param => $phone_number,
            $message_param => $message
        );
        
        // Aggiungi API key al payload se nel body
        if ($auth_method == 'body') {
            $payload[$api_key_param] = $this->mail2wa_api_key;
        }
        
        // Aggiungi parametri extra se configurati
        $extra_params = get_option('wsp_mail2wa_extra_params', '');
        if (!empty($extra_params)) {
            $extra = json_decode($extra_params, true);
            if (is_array($extra)) {
                $payload = array_merge($payload, $extra);
            }
        }
        
        // Prepara headers
        $headers = array(
            'User-Agent' => 'WordPress WhatsApp SaaS Plugin/' . WSP_VERSION
        );
        
        // Aggiungi Content-Type in base alla configurazione
        if ($content_type == 'json') {
            $headers['Content-Type'] = 'application/json';
            $body = json_encode($payload);
        } else {
            $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            $body = http_build_query($payload);
        }
        
        // Aggiungi API key nell'header se configurato
        if ($auth_method == 'header') {
            $headers['Authorization'] = 'Bearer ' . $this->mail2wa_api_key;
            // Rimuovi API key dal payload se era stata aggiunta
            unset($payload[$api_key_param]);
            
            // Ricostruisci il body senza API key
            if ($content_type == 'json') {
                $body = json_encode($payload);
            } else {
                $body = http_build_query($payload);
            }
        }
        
        // Se metodo GET, aggiungi parametri alla query string
        $url = $this->mail2wa_endpoint;
        if ($http_method == 'GET') {
            if ($auth_method == 'query' || $auth_method == 'body') {
                $payload[$api_key_param] = $this->mail2wa_api_key;
            }
            $url .= '?' . http_build_query($payload);
            $body = null;
        }
        
        // Timeout configurabile
        $timeout = get_option('wsp_mail2wa_timeout', 30);
        
        // Prepara argomenti per la richiesta
        $args = array(
            'method' => $http_method,
            'headers' => $headers,
            'timeout' => $timeout,
            'sslverify' => false // Disabilita verifica SSL per test
        );
        
        if ($body !== null) {
            $args['body'] = $body;
        }
        
        // Log per debug
        WSP_Database::log_activity(
            'mail2wa_api_request',
            'Tentativo invio messaggio via API',
            array(
                'url' => $url,
                'method' => $http_method,
                'phone' => $phone_number
            )
        );
        
        // Esegui richiesta
        $response = wp_remote_request($url, $args);
        
        if (is_wp_error($response)) {
            return array(
                'success' => false,
                'message' => 'Errore connessione: ' . $response->get_error_message(),
                'api_response' => $response->get_error_message()
            );
        }
        
        $status_code = wp_remote_retrieve_response_code($response);
        $body_response = wp_remote_retrieve_body($response);
        
        // Considera successo codici 200-299
        if ($status_code >= 200 && $status_code < 300) {
            WSP_Database::log_activity(
                'mail2wa_api_success',
                'Messaggio inviato con successo via API',
                array(
                    'phone' => $phone_number,
                    'status_code' => $status_code
                )
            );
            
            return array(
                'success' => true,
                'message' => 'Messaggio inviato via API',
                'api_response' => $body_response,
                'status_code' => $status_code
            );
        } else {
            WSP_Database::log_activity(
                'mail2wa_api_error',
                'Errore invio messaggio via API',
                array(
                    'phone' => $phone_number,
                    'status_code' => $status_code,
                    'response' => $body_response
                )
            );
            
            return array(
                'success' => false,
                'message' => 'Errore API: HTTP ' . $status_code,
                'api_response' => $body_response,
                'status_code' => $status_code
            );
        }
    }
    
    private function send_via_mail2wa_email($phone_number, $message) {
        // Rimuovi il + dal numero per l'email
        $clean_number = str_replace('+', '', $phone_number);
        $to_email = $clean_number . '@mail2wa.it';
        
        $subject = 'WhatsApp Message';
        $headers = array(
            'Content-Type: text/plain; charset=UTF-8',
            'From: ' . get_bloginfo('name') . ' <noreply@' . parse_url(home_url(), PHP_URL_HOST) . '>'
        );
        
        // Aggiungi API key al messaggio se configurata
        if (!empty($this->mail2wa_api_key)) {
            $message .= "\n\n[API:" . $this->mail2wa_api_key . "]";
        }
        
        WSP_Database::log_activity(
            'mail2wa_email_attempt',
            'Tentativo invio via email fallback',
            array(
                'to' => $to_email,
                'phone' => $phone_number
            )
        );
        
        $sent = wp_mail($to_email, $subject, $message, $headers);
        
        if ($sent) {
            WSP_Database::log_activity(
                'mail2wa_email_success',
                'Messaggio inviato via email fallback',
                array('phone' => $phone_number)
            );
            
            return array(
                'success' => true,
                'message' => 'Messaggio inviato via email fallback',
                'api_response' => 'Email sent to ' . $to_email
            );
        } else {
            return array(
                'success' => false,
                'message' => 'Fallimento invio email',
                'api_response' => 'Email failed'
            );
        }
    }
    
    private function save_message_record($whatsapp_number_id, $phone_number, $message, $type, $status, $api_response, $campaign_id = null) {
        global $wpdb;
        
        $table_messages = $wpdb->prefix . 'wsp_messages';
        
        $data = array(
            'whatsapp_number_id' => $whatsapp_number_id,
            'recipient_number' => $phone_number,
            'message_content' => $message,
            'message_type' => $type,
            'delivery_status' => $status,
            'api_response' => $api_response,
            'credits_used' => 1,
            'campaign_id' => $campaign_id ?: ''
        );
        
        $wpdb->insert($table_messages, $data);
    }
    
    private function normalize_phone_number($phone) {
        // Rimuovi tutti i caratteri non numerici tranne il +
        $phone = preg_replace('/[^\d+]/', '', $phone);
        
        // Se non inizia con +, aggiungi + se sembra un numero internazionale
        if (!strpos($phone, '+') === 0) {
            // Se inizia con 39 e ha 12 cifre, è italiano
            if (preg_match('/^39\d{10}$/', $phone)) {
                $phone = '+' . $phone;
            }
            // Se ha 10 cifre e inizia con 3, è italiano mobile
            elseif (preg_match('/^3\d{9}$/', $phone)) {
                $phone = '+39' . $phone;
            }
            // Altrimenti aggiungi + se ha almeno 10 cifre
            elseif (strlen($phone) >= 10 && !strpos($phone, '+') === 0) {
                $phone = '+' . $phone;
            }
        }
        
        return $phone;
    }
    
    public static function get_message_templates() {
        return array(
            'welcome' => array(
                'name' => 'Messaggio di Benvenuto',
                'content' => '🎉 Ciao {nome}! Grazie per averci contattato. Il tuo numero {numero} è stato registrato con successo!'
            ),
            'promo' => array(
                'name' => 'Messaggio Promozionale',
                'content' => '🔥 Ciao {nome}! Abbiamo una super offerta per te! Scopri le nostre promozioni speciali.'
            ),
            'info' => array(
                'name' => 'Messaggio Informativo',
                'content' => 'ℹ️ Ciao {nome}, ti scriviamo per informarti di importanti aggiornamenti sui nostri servizi.'
            ),
            'follow_up' => array(
                'name' => 'Messaggio di Follow-up',
                'content' => '📞 Ciao {nome}! Ti ricontatto riguardo alla tua richiesta. Sei ancora interessato?'
            )
        );
    }
    
    public function handle_bulk_send() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Accesso negato');
        }
        
        $number_ids = $_POST['number_ids'] ?? array();
        $message = sanitize_textarea_field($_POST['message'] ?? '');
        $campaign_id = sanitize_text_field($_POST['campaign_id'] ?? '');
        
        $results = array(
            'sent' => 0,
            'failed' => 0,
            'errors' => array()
        );
        
        foreach ($number_ids as $id) {
            $result = $this->send_welcome_message(intval($id), $message);
            if ($result['success']) {
                $results['sent']++;
            } else {
                $results['failed']++;
                $results['errors'][] = "ID $id: " . $result['message'];
            }
        }
        
        wp_send_json_success($results);
    }
    
    public function handle_welcome_send() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => 'Accesso negato'));
        }
        
        $number_id = (int) ($_POST['number_id'] ?? 0);
        
        if (!$number_id) {
            wp_send_json_error(array('message' => 'ID numero non valido'));
        }
        
        $result = $this->send_welcome_message($number_id);
        
        wp_send_json($result);
    }
    
    public function handle_test_send() {
        check_ajax_referer('wsp_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $phone = sanitize_text_field($_POST['phone'] ?? '');
        $message = sanitize_textarea_field($_POST['message'] ?? 'Test messaggio da WhatsApp SaaS Plugin');
        
        if (empty($phone)) {
            wp_send_json_error('Numero telefono mancante');
        }
        
        // Invia direttamente senza salvare nel database
        $result = $this->send_whatsapp_message($phone, $message, null, 'test');
        
        if ($result['success']) {
            wp_send_json_success($result);
        } else {
            wp_send_json_error($result['message'] . ' - ' . ($result['api_response'] ?? ''));
        }
    }
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-migration.php
SIZE: 1.81 KB
MODIFIED: 2025-08-17 19:06:19
--------------------------------------------------------------------------------
<?php
/**
 * Migration script per aggiungere campi destinatario
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Migration {
    
    public static function run_migration() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';
        
        // Verifica se le colonne esistono già
        $columns = $wpdb->get_results("SHOW COLUMNS FROM $table_name");
        $existing_columns = array_map(function($col) { return $col->Field; }, $columns);
        
        // Aggiungi colonne mancanti
        if (!in_array('recipient_number', $existing_columns)) {
            $wpdb->query("ALTER TABLE $table_name ADD COLUMN recipient_number varchar(20) DEFAULT '' AFTER sender_email");
        }
        
        if (!in_array('recipient_name', $existing_columns)) {
            $wpdb->query("ALTER TABLE $table_name ADD COLUMN recipient_name varchar(255) DEFAULT '' AFTER recipient_number");
        }
        
        if (!in_array('recipient_email', $existing_columns)) {
            $wpdb->query("ALTER TABLE $table_name ADD COLUMN recipient_email varchar(255) DEFAULT '' AFTER recipient_name");
        }
        
        // Aggiungi indice per recipient_number se non esiste
        $indices = $wpdb->get_results("SHOW INDEX FROM $table_name WHERE Key_name = 'idx_recipient_number'");
        if (empty($indices)) {
            $wpdb->query("ALTER TABLE $table_name ADD INDEX idx_recipient_number (recipient_number)");
        }
        
        // Aggiorna versione database
        update_option('wsp_db_version', '2.0.0');
        
        return true;
    }
    
    public static function check_and_migrate() {
        $current_version = get_option('wsp_db_version', '1.0.0');
        
        if (version_compare($current_version, '2.0.0', '<')) {
            self::run_migration();
        }
    }
}


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: includes/class-wsp-settings.php
SIZE: 29.96 KB
MODIFIED: 2025-08-18 00:47:54
--------------------------------------------------------------------------------
<?php
/**
 * Gestione Impostazioni WhatsApp SaaS Plugin
 * Sistema completo di configurazione con supporto Mail2Wa avanzato
 * 
 * @package WhatsApp_SaaS_Pro
 * @version 2.0.1 - COMPLETO
 */

if (!defined('ABSPATH')) {
    exit;
}

class WSP_Settings {
    
    private static $instance = null;
    private $settings_groups = array();
    
    /**
     * Singleton instance
     */
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Costruttore
     */
    private function __construct() {
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_enqueue_scripts', array($this, 'enqueue_settings_scripts'));
        
        // AJAX handlers per test configurazione
        add_action('wp_ajax_wsp_test_mail2wa_config', array($this, 'ajax_test_mail2wa_config'));
        add_action('wp_ajax_wsp_find_mail2wa_endpoint', array($this, 'ajax_find_mail2wa_endpoint'));
    }
    
    /**
     * Registra tutte le impostazioni
     */
    public function register_settings() {
        // Gruppo principale
        register_setting('wsp_settings_group', 'wsp_api_key', array($this, 'sanitize_api_key'));
        register_setting('wsp_settings_group', 'wsp_credits_balance', 'intval');
        register_setting('wsp_settings_group', 'wsp_welcome_message', 'sanitize_textarea_field');
        
        // Gruppo Mail2Wa - Configurazione base
        register_setting('wsp_settings_group', 'wsp_mail2wa_api_key', array($this, 'sanitize_api_key'));
        register_setting('wsp_settings_group', 'wsp_mail2wa_base_url', 'esc_url_raw');
        register_setting('wsp_settings_group', 'wsp_mail2wa_endpoint_path', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_method', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_content_type', 'sanitize_text_field');
        
        // Gruppo Mail2Wa - Parametri avanzati
        register_setting('wsp_settings_group', 'wsp_mail2wa_auth_method', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_phone_param', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_message_param', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_api_key_param', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_mail2wa_extra_params', array($this, 'sanitize_json'));
        register_setting('wsp_settings_group', 'wsp_mail2wa_email_fallback', 'boolval');
        register_setting('wsp_settings_group', 'wsp_mail2wa_timeout', 'intval');
        
        // Gruppo Report
        register_setting('wsp_settings_group', 'wsp_report_email', 'sanitize_email');
        register_setting('wsp_settings_group', 'wsp_report_time', 'sanitize_text_field');
        register_setting('wsp_settings_group', 'wsp_report_enabled', 'boolval');
        
        // Sezione API generale
        add_settings_section(
            'wsp_api_section',
            '🔑 Configurazione API WordPress',
            array($this, 'api_section_callback'),
            'wsp-settings'
        );
        
        // Campi API generale
        add_settings_field(
            'wsp_api_key',
            'API Key WordPress',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_api_section',
            array(
                'field' => 'wsp_api_key',
                'type' => 'password',
                'description' => 'Chiave API per l\'integrazione con n8n',
                'required' => true,
                'default' => 'demo-api-key-9lz721sv0xTjFNVA'
            )
        );
        
        add_settings_field(
            'wsp_credits_balance',
            'Crediti Disponibili',
            array($this, 'number_field_callback'),
            'wsp-settings',
            'wsp_api_section',
            array(
                'field' => 'wsp_credits_balance',
                'description' => 'Numero di messaggi WhatsApp disponibili',
                'min' => 0,
                'readonly' => true
            )
        );
        
        // Sezione Mail2Wa
        add_settings_section(
            'wsp_mail2wa_section',
            '📱 Configurazione Mail2Wa',
            array($this, 'mail2wa_section_callback'),
            'wsp-settings'
        );
        
        // Campi Mail2Wa
        add_settings_field(
            'wsp_mail2wa_api_key',
            'Mail2Wa API Key',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_api_key',
                'type' => 'password',
                'description' => 'La tua chiave API Mail2Wa',
                'required' => true
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_base_url',
            'Base URL',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_base_url',
                'default' => 'https://api.mail2wa.it',
                'description' => 'URL base delle API Mail2Wa (senza slash finale)',
                'placeholder' => 'https://api.mail2wa.it'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_endpoint_path',
            'Endpoint Path',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_endpoint_path',
                'default' => 'send',
                'description' => 'Path dell\'endpoint (es: send, api/send, messages)',
                'placeholder' => 'send',
                'show_test_button' => true
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_method',
            'Metodo HTTP',
            array($this, 'select_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_method',
                'options' => array(
                    'POST' => 'POST (Consigliato)',
                    'GET' => 'GET',
                    'PUT' => 'PUT'
                ),
                'default' => 'POST',
                'description' => 'Metodo HTTP per le chiamate API'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_content_type',
            'Content Type',
            array($this, 'select_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_content_type',
                'options' => array(
                    'json' => 'application/json (Consigliato)',
                    'form' => 'application/x-www-form-urlencoded'
                ),
                'default' => 'json',
                'description' => 'Formato dati per le richieste'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_auth_method',
            'Metodo Autenticazione',
            array($this, 'select_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_auth_method',
                'options' => array(
                    'body' => 'Nel body della richiesta',
                    'header' => 'Nell\'header HTTP',
                    'query' => 'Nella query string'
                ),
                'default' => 'body',
                'description' => 'Dove inviare l\'API key'
            )
        );
        
        // Parametri avanzati
        add_settings_field(
            'wsp_mail2wa_phone_param',
            'Nome Parametro Telefono',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_phone_param',
                'default' => 'to',
                'description' => 'Nome del parametro per il numero di telefono',
                'placeholder' => 'to'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_message_param',
            'Nome Parametro Messaggio',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_message_param',
                'default' => 'message',
                'description' => 'Nome del parametro per il testo del messaggio',
                'placeholder' => 'message'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_api_key_param',
            'Nome Parametro API Key',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_api_key_param',
                'default' => 'api_key',
                'description' => 'Nome del parametro per l\'API key',
                'placeholder' => 'api_key'
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_extra_params',
            'Parametri Extra (JSON)',
            array($this, 'textarea_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_extra_params',
                'description' => 'Parametri aggiuntivi in formato JSON (es: {"instance_id":"default"})',
                'placeholder' => '{"instance_id":"default"}',
                'rows' => 3
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_email_fallback',
            'Abilita Fallback Email',
            array($this, 'checkbox_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_email_fallback',
                'label' => 'Usa email come fallback se l\'API fallisce',
                'description' => 'Invia a numero@mail2wa.it se la chiamata API non funziona',
                'default' => true
            )
        );
        
        add_settings_field(
            'wsp_mail2wa_timeout',
            'Timeout Richiesta (secondi)',
            array($this, 'number_field_callback'),
            'wsp-settings',
            'wsp_mail2wa_section',
            array(
                'field' => 'wsp_mail2wa_timeout',
                'default' => 30,
                'min' => 5,
                'max' => 120,
                'description' => 'Tempo massimo di attesa per la risposta API'
            )
        );
        
        // Sezione messaggi
        add_settings_section(
            'wsp_messages_section',
            '💬 Configurazione Messaggi',
            array($this, 'messages_section_callback'),
            'wsp-settings'
        );
        
        add_settings_field(
            'wsp_welcome_message',
            'Messaggio di Benvenuto',
            array($this, 'textarea_field_callback'),
            'wsp-settings',
            'wsp_messages_section',
            array(
                'field' => 'wsp_welcome_message',
                'description' => 'Usa {nome} e {numero} come placeholder',
                'rows' => 5,
                'default' => '🎉 Ciao {nome}! Il tuo numero {numero} è stato registrato con successo!'
            )
        );
        
        // Sezione Report
        add_settings_section(
            'wsp_report_section',
            '📊 Configurazione Report',
            array($this, 'report_section_callback'),
            'wsp-settings'
        );
        
        add_settings_field(
            'wsp_report_email',
            'Email Report',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_report_section',
            array(
                'field' => 'wsp_report_email',
                'type' => 'email',
                'description' => 'Email dove inviare i report giornalieri',
                'default' => get_option('admin_email')
            )
        );
        
        add_settings_field(
            'wsp_report_time',
            'Orario Report',
            array($this, 'text_field_callback'),
            'wsp-settings',
            'wsp_report_section',
            array(
                'field' => 'wsp_report_time',
                'type' => 'time',
                'description' => 'Orario di invio del report giornaliero',
                'default' => '18:00'
            )
        );
        
        add_settings_field(
            'wsp_report_enabled',
            'Report Automatico',
            array($this, 'checkbox_field_callback'),
            'wsp-settings',
            'wsp_report_section',
            array(
                'field' => 'wsp_report_enabled',
                'label' => 'Abilita invio automatico report giornaliero',
                'default' => true
            )
        );
    }
    
    /**
     * Callbacks per le sezioni
     */
    public function api_section_callback() {
        echo '<p>Configura le chiavi API per l\'integrazione con n8n e i servizi esterni.</p>';
    }
    
    public function mail2wa_section_callback() {
        ?>
        <div class="wsp-settings-notice">
            <p><strong>📱 Configurazione Mail2Wa</strong></p>
            <p>Configura i parametri per l\'integrazione con il servizio Mail2Wa.</p>
            <p>
                <button type="button" class="button button-secondary" onclick="wspTestMail2WaConfig()">
                    🧪 Test Configurazione
                </button>
                <button type="button" class="button button-secondary" onclick="wspFindMail2WaEndpoint()">
                    🔍 Trova Endpoint Automaticamente
                </button>
                <a href="<?php echo plugins_url('test-whatsapp-complete.php', dirname(__FILE__)); ?>" 
                   target="_blank" class="button button-secondary">
                    🚀 Test Completo
                </a>
            </p>
        </div>
        <?php
    }
    
    public function messages_section_callback() {
        echo '<p>Personalizza i messaggi automatici del sistema.</p>';
    }
    
    public function report_section_callback() {
        echo '<p>Configura l\'invio automatico dei report giornalieri.</p>';
    }
    
    /**
     * Callbacks per i campi
     */
    public function text_field_callback($args) {
        $field = $args['field'];
        $value = get_option($field, isset($args['default']) ? $args['default'] : '');
        $type = isset($args['type']) ? $args['type'] : 'text';
        $placeholder = isset($args['placeholder']) ? $args['placeholder'] : '';
        $required = isset($args['required']) ? 'required' : '';
        $readonly = isset($args['readonly']) ? 'readonly' : '';
        
        echo '<input type="' . esc_attr($type) . '" ';
        echo 'id="' . esc_attr($field) . '" ';
        echo 'name="' . esc_attr($field) . '" ';
        echo 'value="' . esc_attr($value) . '" ';
        echo 'placeholder="' . esc_attr($placeholder) . '" ';
        echo 'class="regular-text" ' . $required . ' ' . $readonly . ' />';
        
        if (isset($args['show_test_button']) && $args['show_test_button']) {
            echo ' <button type="button" class="button button-small" onclick="wspTestEndpoint()">Test</button>';
        }
        
        if (isset($args['description'])) {
            echo '<p class="description">' . esc_html($args['description']) . '</p>';
        }
    }
    
    public function number_field_callback($args) {
        $field = $args['field'];
        $value = get_option($field, isset($args['default']) ? $args['default'] : 0);
        $min = isset($args['min']) ? $args['min'] : 0;
        $max = isset($args['max']) ? $args['max'] : '';
        $readonly = isset($args['readonly']) ? 'readonly' : '';
        
        echo '<input type="number" ';
        echo 'id="' . esc_attr($field) . '" ';
        echo 'name="' . esc_attr($field) . '" ';
        echo 'value="' . esc_attr($value) . '" ';
        echo 'min="' . esc_attr($min) . '" ';
        if ($max) echo 'max="' . esc_attr($max) . '" ';
        echo 'class="regular-text" ' . $readonly . ' />';
        
        if (isset($args['description'])) {
            echo '<p class="description">' . esc_html($args['description']) . '</p>';
        }
    }
    
    public function select_field_callback($args) {
        $field = $args['field'];
        $value = get_option($field, isset($args['default']) ? $args['default'] : '');
        $options = $args['options'];
        
        echo '<select id="' . esc_attr($field) . '" name="' . esc_attr($field) . '">';
        foreach ($options as $key => $label) {
            $selected = selected($value, $key, false);
            echo '<option value="' . esc_attr($key) . '" ' . $selected . '>' . esc_html($label) . '</option>';
        }
        echo '</select>';
        
        if (isset($args['description'])) {
            echo '<p class="description">' . esc_html($args['description']) . '</p>';
        }
    }
    
    public function textarea_field_callback($args) {
        $field = $args['field'];
        $value = get_option($field, isset($args['default']) ? $args['default'] : '');
        $placeholder = isset($args['placeholder']) ? $args['placeholder'] : '';
        $rows = isset($args['rows']) ? $args['rows'] : 5;
        
        echo '<textarea ';
        echo 'id="' . esc_attr($field) . '" ';
        echo 'name="' . esc_attr($field) . '" ';
        echo 'placeholder="' . esc_attr($placeholder) . '" ';
        echo 'rows="' . esc_attr($rows) . '" ';
        echo 'class="large-text code">' . esc_textarea($value) . '</textarea>';
        
        if (isset($args['description'])) {
            echo '<p class="description">' . esc_html($args['description']) . '</p>';
        }
    }
    
    public function checkbox_field_callback($args) {
        $field = $args['field'];
        $value = get_option($field, isset($args['default']) ? $args['default'] : false);
        $label = isset($args['label']) ? $args['label'] : '';
        
        echo '<label for="' . esc_attr($field) . '">';
        echo '<input type="checkbox" ';
        echo 'id="' . esc_attr($field) . '" ';
        echo 'name="' . esc_attr($field) . '" ';
        echo 'value="1" ' . checked($value, 1, false) . ' />';
        echo ' ' . esc_html($label);
        echo '</label>';
        
        if (isset($args['description'])) {
            echo '<p class="description">' . esc_html($args['description']) . '</p>';
        }
    }
    
    /**
     * Sanitizzazione
     */
    public function sanitize_api_key($input) {
        return preg_replace('/[^a-zA-Z0-9_\-]/', '', $input);
    }
    
    public function sanitize_json($input) {
        if (empty($input)) return '';
        
        $decoded = json_decode($input, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            add_settings_error('wsp_mail2wa_extra_params', 'invalid_json', 'JSON non valido nei parametri extra');
            return '';
        }
        
        return wp_json_encode($decoded);
    }
    
    /**
     * Metodo per renderizzare la pagina settings
     */
    public function render_settings_page() {
        ?>
        <div class="wrap">
            <h1>⚙️ <?php echo esc_html(get_admin_page_title()); ?></h1>
            
            <?php settings_errors(); ?>
            
            <div id="wsp-test-result"></div>
            
            <form method="post" action="options.php">
                <?php
                settings_fields('wsp_settings_group');
                do_settings_sections('wsp-settings');
                submit_button('💾 Salva Impostazioni');
                ?>
            </form>
            
            <!-- Azioni rapide -->
            <div class="card" style="margin-top: 30px;">
                <h2>🚀 Azioni Rapide</h2>
                <p>
                    <a href="<?php echo plugins_url('test-whatsapp-complete.php', dirname(__FILE__)); ?>" 
                       target="_blank" 
                       class="button button-primary">
                        🧪 Test Completo Mail2Wa
                    </a>
                    <a href="<?php echo admin_url('admin.php?page=wsp-dashboard'); ?>" 
                       class="button">
                        📊 Vai alla Dashboard
                    </a>
                    <a href="<?php echo admin_url('admin.php?page=wsp-numbers'); ?>" 
                       class="button">
                        📱 Vedi Numeri WhatsApp
                    </a>
                </p>
            </div>
            
            <!-- Info debug -->
            <div class="card" style="margin-top: 20px;">
                <h2>🔧 Informazioni Debug</h2>
                <table class="form-table">
                    <tr>
                        <th>Plugin Version:</th>
                        <td><?php echo WSP_VERSION; ?></td>
                    </tr>
                    <tr>
                        <th>WordPress Version:</th>
                        <td><?php echo get_bloginfo('version'); ?></td>
                    </tr>
                    <tr>
                        <th>PHP Version:</th>
                        <td><?php echo phpversion(); ?></td>
                    </tr>
                    <tr>
                        <th>Database Prefix:</th>
                        <td><?php global $wpdb; echo $wpdb->prefix; ?></td>
                    </tr>
                    <tr>
                        <th>Mail2Wa Endpoint Completo:</th>
                        <td>
                            <?php 
                            $base = get_option('wsp_mail2wa_base_url', 'https://api.mail2wa.it');
                            $path = get_option('wsp_mail2wa_endpoint_path', 'send');
                            echo '<code>' . esc_html(rtrim($base, '/') . '/' . ltrim($path, '/')) . '</code>';
                            ?>
                        </td>
                    </tr>
                    <tr>
                        <th>Mail2Wa API Key:</th>
                        <td>
                            <?php 
                            $api_key = get_option('wsp_mail2wa_api_key', '');
                            if ($api_key) {
                                echo '<code>' . esc_html(substr($api_key, 0, 8)) . '...****</code> ✅ Configurata';
                            } else {
                                echo '<span style="color:red;">❌ Non configurata</span>';
                            }
                            ?>
                        </td>
                    </tr>
                </table>
            </div>
            
            <!-- Guida rapida -->
            <div class="card" style="margin-top: 20px;">
                <h2>📋 Guida Rapida Mail2Wa</h2>
                <ol>
                    <li><strong>Ottieni API Key:</strong> Registrati su Mail2Wa e ottieni la tua API key</li>
                    <li><strong>Configura Base URL:</strong> Inserisci l'URL base delle API (default: https://api.mail2wa.it)</li>
                    <li><strong>Trova Endpoint:</strong> Usa il pulsante "Trova Endpoint Automaticamente" per rilevare il path corretto</li>
                    <li><strong>Test:</strong> Clicca "Test Configurazione" per verificare che tutto funzioni</li>
                    <li><strong>Salva:</strong> Salva le impostazioni e sei pronto!</li>
                </ol>
                
                <h3>🔍 Troubleshooting</h3>
                <ul>
                    <li>Se ricevi errore 404, prova diversi endpoint: <code>send</code>, <code>api/send</code>, <code>messages</code></li>
                    <li>Se ricevi errore 401, verifica che l'API key sia corretta</li>
                    <li>Se il test fallisce, abilita il fallback email come backup</li>
                </ul>
            </div>
        </div>
        
        <style>
            .card {
                background: white;
                border: 1px solid #ccd0d4;
                border-radius: 4px;
                padding: 20px;
                box-shadow: 0 1px 1px rgba(0,0,0,.04);
            }
            .card h2 {
                margin-top: 0;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
            }
            .card h3 {
                margin-top: 20px;
                color: #23282d;
            }
            .wsp-settings-notice {
                background: #f0f8ff;
                border-left: 4px solid #2271b1;
                padding: 15px;
                margin: 15px 0;
                border-radius: 4px;
            }
            .wsp-settings-notice button {
                margin-right: 10px;
                margin-top: 10px;
            }
            #wsp-test-result {
                margin: 15px 0;
                padding: 10px;
                border-radius: 4px;
                display: none;
            }
            #wsp-test-result:not(:empty) {
                display: block;
                background: #f0f0f1;
                border: 1px solid #c3c4c7;
            }
        </style>
        <?php
    }
    
    /**
     * Aggiungi scripts per la pagina settings
     */
    public function enqueue_settings_scripts($hook) {
        if (strpos($hook, 'wsp-settings') === false) {
            return;
        }
        
        wp_add_inline_script('jquery', '
            function wspTestMail2WaConfig() {
                jQuery("#wsp-test-result").html("<span class=\"spinner is-active\"></span> Testing...");
                
                jQuery.post(ajaxurl, {
                    action: "wsp_test_mail2wa_config",
                    nonce: "' . wp_create_nonce('wsp_test_config') . '",
                    api_key: jQuery("#wsp_mail2wa_api_key").val(),
                    base_url: jQuery("#wsp_mail2wa_base_url").val(),
                    endpoint: jQuery("#wsp_mail2wa_endpoint_path").val()
                }, function(response) {
                    if (response.success) {
                        jQuery("#wsp-test-result").html("<span style=\"color:green;\">✅ " + response.data.message + "</span>");
                    } else {
                        jQuery("#wsp-test-result").html("<span style=\"color:red;\">❌ " + response.data + "</span>");
                    }
                });
            }
            
            function wspFindMail2WaEndpoint() {
                jQuery("#wsp-test-result").html("<span class=\"spinner is-active\"></span> Ricerca endpoint...");
                
                jQuery.post(ajaxurl, {
                    action: "wsp_find_mail2wa_endpoint",
                    nonce: "' . wp_create_nonce('wsp_test_config') . '",
                    base_url: jQuery("#wsp_mail2wa_base_url").val()
                }, function(response) {
                    if (response.success) {
                        jQuery("#wsp_mail2wa_endpoint_path").val(response.data.endpoint);
                        jQuery("#wsp-test-result").html("<span style=\"color:green;\">✅ Endpoint trovato: " + response.data.endpoint + "</span>");
                    } else {
                        jQuery("#wsp-test-result").html("<span style=\"color:red;\">❌ " + response.data + "</span>");
                    }
                });
            }
            
            function wspTestEndpoint() {
                const url = jQuery("#wsp_mail2wa_base_url").val() + "/" + jQuery("#wsp_mail2wa_endpoint_path").val();
                alert("Testing endpoint: " + url);
            }
        ');
    }
    
    /**
     * AJAX handlers
     */
    public function ajax_test_mail2wa_config() {
        check_ajax_referer('wsp_test_config', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $api_key = sanitize_text_field($_POST['api_key'] ?? '');
        $base_url = esc_url_raw($_POST['base_url'] ?? '');
        $endpoint = sanitize_text_field($_POST['endpoint'] ?? '');
        
        if (empty($api_key) || empty($base_url)) {
            wp_send_json_error('Configurazione incompleta');
        }
        
        $test_url = rtrim($base_url, '/') . '/' . ltrim($endpoint, '/');
        
        // Test connessione
        $response = wp_remote_get($test_url, array(
            'timeout' => 10,
            'headers' => array(
                'Authorization' => 'Bearer ' . $api_key
            )
        ));
        
        if (is_wp_error($response)) {
            wp_send_json_error('Errore connessione: ' . $response->get_error_message());
        }
        
        $code = wp_remote_retrieve_response_code($response);
        
        if ($code >= 200 && $code < 300) {
            wp_send_json_success(array('message' => 'Connessione riuscita! (HTTP ' . $code . ')'));
        } elseif ($code == 401) {
            wp_send_json_error('API Key non valida (HTTP 401)');
        } elseif ($code == 404) {
            wp_send_json_error('Endpoint non trovato (HTTP 404)');
        } else {
            wp_send_json_error('Errore HTTP ' . $code);
        }
    }
    
    public function ajax_find_mail2wa_endpoint() {
        check_ajax_referer('wsp_test_config', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Permessi insufficienti');
        }
        
        $base_url = esc_url_raw($_POST['base_url'] ?? '');
        
        if (empty($base_url)) {
            wp_send_json_error('URL base mancante');
        }
        
        // Endpoint comuni da testare
        $common_endpoints = array('send', 'api/send', 'message', 'messages', 'webhook', 'v1/send', 'api/messages');
        
        foreach ($common_endpoints as $endpoint) {
            $test_url = rtrim($base_url, '/') . '/' . $endpoint;
            
            $response = wp_remote_head($test_url, array('timeout' => 5));
            
            if (!is_wp_error($response)) {
                $code = wp_remote_retrieve_response_code($response);
                if ($code != 404) {
                    wp_send_json_success(array('endpoint' => $endpoint));
                }
            }
        }
        
        wp_send_json_error('Nessun endpoint trovato');
    }
}

// Inizializza la classe
WSP_Settings::get_instance();


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: languages/wsp.pot
SIZE: 1.13 KB
MODIFIED: 2025-08-16 23:14:58
--------------------------------------------------------------------------------
# WhatsApp SaaS Plugin Translation Template
# Copyright (C) 2024 Alberto Ferrante  
# This file is distributed under the same license as the WhatsApp SaaS Plugin package.
msgid ""
msgstr ""
"Project-Id-Version: WhatsApp SaaS Plugin 1.0.0\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2024-08-16 22:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"X-Generator: WordPress Plugin\n"

#: admin/class-wsp-admin.php:23
msgid "WhatsApp SaaS"
msgstr ""

#: admin/class-wsp-admin.php:35  
msgid "Dashboard"
msgstr ""

#: admin/class-wsp-admin.php:44
msgid "Numeri WhatsApp" 
msgstr ""

#: admin/class-wsp-admin.php:53
msgid "Messaggi"
msgstr ""

#: admin/class-wsp-admin.php:62
msgid "Crediti"
msgstr ""

#: admin/class-wsp-admin.php:71
msgid "Impostazioni"
msgstr ""

#: admin/class-wsp-admin.php:80
msgid "Logs"
msgstr ""

#: includes/class-wsp-api.php:55
msgid "API Key non valida"
msgstr ""

#: includes/class-wsp-api.php:70  
msgid "Dati numeri non validi"
msgstr ""

#: includes/class-wsp-api.php:94
msgid "Elaborati %d numeri, salvati %d"
msgstr ""

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: fix-database.php
SIZE: 4.57 KB
MODIFIED: 2025-08-17 01:47:14
--------------------------------------------------------------------------------
<?php
/**
 * Fix Database - Aggiunge colonne mancanti
 */
require_once('../../../../wp-load.php');

if (!current_user_can('manage_options')) {
    die('Accesso negato');
}

global $wpdb;
$table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';

// Controlla se le colonne esistono
$columns = $wpdb->get_results("SHOW COLUMNS FROM $table_name");
$existing_columns = array();
foreach ($columns as $column) {
    $existing_columns[] = $column->Field;
}

$messages = array();

// Aggiungi extraction_count se non esiste
if (!in_array('extraction_count', $existing_columns)) {
    $result = $wpdb->query("ALTER TABLE $table_name ADD COLUMN extraction_count INT(5) DEFAULT 1");
    if ($result !== false) {
        $messages[] = "✅ Colonna 'extraction_count' aggiunta con successo";
    } else {
        $messages[] = "❌ Errore aggiungendo 'extraction_count': " . $wpdb->last_error;
    }
} else {
    $messages[] = "ℹ️ Colonna 'extraction_count' già esistente";
}

// Aggiungi last_seen se non esiste
if (!in_array('last_seen', $existing_columns)) {
    $result = $wpdb->query("ALTER TABLE $table_name ADD COLUMN last_seen DATETIME DEFAULT CURRENT_TIMESTAMP");
    if ($result !== false) {
        $messages[] = "✅ Colonna 'last_seen' aggiunta con successo";
        
        // Aggiorna i record esistenti
        $wpdb->query("UPDATE $table_name SET last_seen = created_at WHERE last_seen IS NULL");
        $messages[] = "✅ Record esistenti aggiornati";
    } else {
        $messages[] = "❌ Errore aggiungendo 'last_seen': " . $wpdb->last_error;
    }
} else {
    $messages[] = "ℹ️ Colonna 'last_seen' già esistente";
}

// Mostra risultati
?>
<!DOCTYPE html>
<html>
<head>
    <title>Fix Database - WhatsApp SaaS Plugin</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 20px;
        }
        .container {
            background: white;
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-bottom: 30px;
        }
        .message {
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            background: #f8f9fa;
            border-left: 4px solid #28a745;
        }
        .message.error {
            border-left-color: #dc3545;
            background: #fff5f5;
        }
        .message.info {
            border-left-color: #17a2b8;
            background: #f0f8ff;
        }
        .button {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            margin-top: 20px;
            font-weight: 600;
        }
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔧 Fix Database Structure</h1>
        
        <?php foreach ($messages as $message): ?>
            <?php 
            $class = '';
            if (strpos($message, '❌') !== false) $class = 'error';
            elseif (strpos($message, 'ℹ️') !== false) $class = 'info';
            ?>
            <div class="message <?php echo $class; ?>">
                <?php echo $message; ?>
            </div>
        <?php endforeach; ?>
        
        <div style="margin-top: 30px;">
            <h3>✅ Database pronto!</h3>
            <p>Ora puoi tornare al plugin e testare l'API.</p>
            <a href="<?php echo admin_url('admin.php?page=wsp-dashboard'); ?>" class="button">
                Vai alla Dashboard
            </a>
        </div>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <h4>Test rapido API:</h4>
            <code style="background: #f4f4f4; padding: 10px; display: block; border-radius: 5px;">
                curl -X POST https://curiositaenotizie.it/stage/wp-json/wsp/v1/extract \<br>
                -H "X-API-Key: api-key-9lz721sv0xTjFNVA" \<br>
                -H "Content-Type: application/json" \<br>
                -d '{"numbers": [{"senderNumber": "+393933353443"}]}'
            </code>
        </div>
    </div>
</body>
</html>
<?php
exit;


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: fix-duplicate-key.php
SIZE: 11.09 KB
MODIFIED: 2025-08-18 22:09:21
--------------------------------------------------------------------------------
<?php
/**
 * Fix per rimuovere la chiave UNIQUE problematica
 * Esegui questo file una sola volta per sistemare il database
 */

require_once('../../../wp-load.php');

if (!current_user_can('manage_options')) {
    die('Accesso negato');
}

global $wpdb;
$table_name = $wpdb->prefix . 'wsp_whatsapp_numbers';

?>
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <title>🔧 Fix Database - Rimozione Chiave Duplicata</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 20px;
        }
        .container {
            background: white;
            border-radius: 20px;
            padding: 40px;
            max-width: 800px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 { color: #333; margin-bottom: 30px; }
        .message {
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            background: #f8f9fa;
            border-left: 4px solid #28a745;
        }
        .message.error {
            border-left-color: #dc3545;
            background: #fff5f5;
        }
        .message.info {
            border-left-color: #17a2b8;
            background: #f0f8ff;
        }
        .message.warning {
            border-left-color: #ffc107;
            background: #fff8e1;
        }
        .button {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            margin-top: 20px;
            font-weight: 600;
        }
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        pre {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            font-size: 12px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background: #f8f9fa;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔧 Fix Database - Rimozione Chiave Duplicata</h1>
        
        <?php
        echo "<div class='message info'>📊 Analisi tabella: <strong>$table_name</strong></div>";
        
        // Step 1: Mostra gli indici attuali
        echo "<h2>📋 Indici attuali nella tabella:</h2>";
        $indices = $wpdb->get_results("SHOW INDEX FROM $table_name");
        
        if ($indices) {
            echo "<table>";
            echo "<tr><th>Nome Indice</th><th>Colonna</th><th>Tipo</th><th>Unico</th></tr>";
            foreach ($indices as $index) {
                $is_unique = $index->Non_unique == 0 ? 'SI' : 'NO';
                $tipo = $index->Key_name == 'PRIMARY' ? 'PRIMARY KEY' : ($is_unique == 'SI' ? 'UNIQUE' : 'INDEX');
                echo "<tr>";
                echo "<td><strong>{$index->Key_name}</strong></td>";
                echo "<td>{$index->Column_name}</td>";
                echo "<td>{$tipo}</td>";
                echo "<td>{$is_unique}</td>";
                echo "</tr>";
            }
            echo "</table>";
        }
        
        // Step 2: Rimuovi la chiave problematica
        $has_unique_daily = false;
        foreach ($indices as $index) {
            if ($index->Key_name == 'unique_daily') {
                $has_unique_daily = true;
                break;
            }
        }
        
        if ($has_unique_daily) {
            echo "<div class='message warning'>⚠️ Trovata chiave UNIQUE 'unique_daily' - Procedo con la rimozione...</div>";
            
            // Rimuovi la chiave UNIQUE
            $result = $wpdb->query("ALTER TABLE $table_name DROP INDEX unique_daily");
            
            if ($result !== false) {
                echo "<div class='message success'>✅ Chiave 'unique_daily' rimossa con successo!</div>";
            } else {
                echo "<div class='message error'>❌ Errore nella rimozione: " . $wpdb->last_error . "</div>";
            }
        } else {
            echo "<div class='message info'>ℹ️ La chiave 'unique_daily' non esiste (già rimossa o mai creata)</div>";
        }
        
        // Step 3: Aggiungi indice normale se non esiste
        $has_idx_unique_check = false;
        foreach ($indices as $index) {
            if ($index->Key_name == 'idx_unique_check') {
                $has_idx_unique_check = true;
                break;
            }
        }
        
        if (!$has_idx_unique_check) {
            echo "<div class='message info'>➕ Aggiungo indice normale 'idx_unique_check'...</div>";
            
            $result = $wpdb->query("ALTER TABLE $table_name ADD INDEX idx_unique_check (sender_number, recipient_number, campaign_date)");
            
            if ($result !== false) {
                echo "<div class='message success'>✅ Indice 'idx_unique_check' aggiunto con successo!</div>";
            } else {
                echo "<div class='message error'>❌ Errore nell'aggiunta indice: " . $wpdb->last_error . "</div>";
            }
        } else {
            echo "<div class='message info'>ℹ️ L'indice 'idx_unique_check' esiste già</div>";
        }
        
        // Step 4: Pulisci eventuali duplicati esistenti
        echo "<h2>🧹 Pulizia duplicati esistenti:</h2>";
        
        // Trova duplicati
        $duplicates = $wpdb->get_results("
            SELECT sender_number, recipient_number, campaign_date, COUNT(*) as count
            FROM $table_name
            WHERE campaign_date IS NOT NULL
            GROUP BY sender_number, recipient_number, campaign_date
            HAVING count > 1
        ");
        
        if ($duplicates && count($duplicates) > 0) {
            echo "<div class='message warning'>⚠️ Trovati " . count($duplicates) . " gruppi di duplicati</div>";
            
            foreach ($duplicates as $dup) {
                // Mantieni solo il record più recente
                $keep_id = $wpdb->get_var($wpdb->prepare(
                    "SELECT MAX(id) FROM $table_name 
                     WHERE sender_number = %s 
                     AND recipient_number = %s 
                     AND campaign_date = %s",
                    $dup->sender_number,
                    $dup->recipient_number ?: '',
                    $dup->campaign_date
                ));
                
                // Elimina i duplicati mantenendo solo il più recente
                $deleted = $wpdb->query($wpdb->prepare(
                    "DELETE FROM $table_name 
                     WHERE sender_number = %s 
                     AND recipient_number = %s 
                     AND campaign_date = %s 
                     AND id != %d",
                    $dup->sender_number,
                    $dup->recipient_number ?: '',
                    $dup->campaign_date,
                    $keep_id
                ));
                
                if ($deleted > 0) {
                    echo "<div class='message'>Rimossi $deleted duplicati per: {$dup->sender_number} -> {$dup->recipient_number} ({$dup->campaign_date})</div>";
                }
            }
            
            echo "<div class='message success'>✅ Pulizia duplicati completata!</div>";
        } else {
            echo "<div class='message success'>✅ Nessun duplicato trovato nel database</div>";
        }
        
        // Step 5: Verifica finale
        echo "<h2>✅ Verifica finale:</h2>";
        
        // Mostra gli indici finali
        $final_indices = $wpdb->get_results("SHOW INDEX FROM $table_name");
        $has_problematic_unique = false;
        
        foreach ($final_indices as $index) {
            if ($index->Key_name == 'unique_daily') {
                $has_problematic_unique = true;
            }
        }
        
        if (!$has_problematic_unique) {
            echo "<div class='message success'>✅ <strong>Database sistemato correttamente!</strong></div>";
            echo "<div class='message info'>ℹ️ La chiave UNIQUE problematica è stata rimossa e sostituita con un indice normale.</div>";
            
            // Test rapido di inserimento
            echo "<h3>🧪 Test inserimento record:</h3>";
            
            $test_data = array(
                'message_id' => 'fix_test_' . time(),
                'thread_id' => 'thread_fix_test',
                'sender_number' => '+39333' . rand(1000000, 9999999),
                'sender_name' => 'Fix Test',
                'recipient_number' => '+39339' . rand(1000000, 9999999),
                'recipient_name' => 'Fix Test Recipient',
                'extraction_method' => 'fix_test',
                'campaign_date' => date('Y-m-d'),
                'status' => 'active'
            );
            
            $test_result = $wpdb->insert($table_name, $test_data);
            
            if ($test_result !== false) {
                $test_id = $wpdb->insert_id;
                echo "<div class='message success'>✅ Test inserimento riuscito! (ID: $test_id)</div>";
                
                // Pulisci il record di test
                $wpdb->delete($table_name, array('id' => $test_id));
                echo "<div class='message info'>ℹ️ Record di test rimosso</div>";
            } else {
                echo "<div class='message error'>❌ Test inserimento fallito: " . $wpdb->last_error . "</div>";
            }
            
        } else {
            echo "<div class='message error'>❌ La chiave UNIQUE problematica è ancora presente!</div>";
        }
        ?>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <h3>✅ Prossimi passi:</h3>
            <ol>
                <li>Il database è stato sistemato</li>
                <li>Ora puoi tornare al test n8n</li>
                <li>I duplicati verranno gestiti correttamente dal codice PHP</li>
            </ol>
            
            <a href="<?php echo admin_url('admin.php?page=wsp-test'); ?>" class="button">
                🧪 Vai al Test Sistema
            </a>
            <a href="<?php echo admin_url('admin.php?page=wsp-dashboard'); ?>" class="button">
                📊 Vai alla Dashboard
            </a>
        </div>
        
        <div style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px;">
            <h4>📝 Note tecniche:</h4>
            <p>La chiave UNIQUE causava problemi quando recipient_number era vuoto perché MySQL tratta i valori vuoti in modo inconsistente nelle chiavi UNIQUE composite.</p>
            <p>Ora il controllo dei duplicati viene fatto via PHP prima dell'inserimento, garantendo maggiore flessibilità.</p>
        </div>
    </div>
</body>
</html>


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: n8n-whatsapp-workflow.json
SIZE: 5.81 KB
MODIFIED: 2025-08-16 23:15:01
--------------------------------------------------------------------------------
{
  "name": "WhatsApp SaaS - Email Processing Workflow",
  "description": "Workflow completo per estrazione automatica numeri WhatsApp da Gmail e invio via WordPress API",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "format": "simple",
        "limit": 100,
        "filters": {
          "query": "has:attachment OR body:whatsapp OR body:telefono OR body:numero OR body:contatto"
        }
      },
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-oauth-credentials",
          "name": "Gmail OAuth2 Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst results = [];\n\nconst patterns = [\n  /(?:\\+39[\\s\\-\\.]?)?3[0-9]{2}[\\s\\-\\.]?[0-9]{3}[\\s\\-\\.]?[0-9]{4}/g,\n  /(?:\\+[1-9][0-9]{0,3}[\\s\\-\\.]?)?[0-9]{2,4}[\\s\\-\\.]?[0-9]{3,4}[\\s\\-\\.]?[0-9]{3,4}/g\n];\n\nfor (const item of items) {\n  const emailData = item.json;\n  const searchText = [\n    emailData.subject || '',\n    emailData.snippet || '',\n    emailData.bodyPlain || ''\n  ].join(' ');\n  \n  const foundNumbers = new Set();\n  \n  patterns.forEach(pattern => {\n    const matches = searchText.match(pattern);\n    if (matches) {\n      matches.forEach(match => {\n        let cleanNumber = match.replace(/[^\\d\\+]/g, '');\n        if (cleanNumber.length >= 10) {\n          if (cleanNumber.startsWith('39') && cleanNumber.length === 12) {\n            cleanNumber = '+' + cleanNumber;\n          } else if (cleanNumber.length === 10 && cleanNumber.startsWith('3')) {\n            cleanNumber = '+39' + cleanNumber;\n          }\n          foundNumbers.add(cleanNumber);\n        }\n      });\n    }\n  });\n  \n  foundNumbers.forEach(number => {\n    results.push({\n      messageId: emailData.id,\n      threadId: emailData.threadId,\n      senderNumber: number,\n      senderName: emailData.senderName || '',\n      senderFormatted: number,\n      senderEmail: emailData.senderEmail || '',\n      extractionMethod: 'n8n_pattern_matching',\n      rawMatch: number,\n      emailDate: emailData.date,\n      processedDate: new Date().toISOString().split('T')[0],\n      processedTime: new Date().toLocaleTimeString(),\n      subject: emailData.subject || '',\n      snippet: emailData.snippet || '',\n      isNewSender: true,\n      hasRecipient: true\n    });\n  });\n}\n\nconst uniqueResults = [];\nconst seen = new Set();\n\nresults.forEach(result => {\n  const key = `${result.senderNumber}_${result.processedDate}`;\n  if (!seen.has(key)) {\n    seen.add(key);\n    uniqueResults.push(result);\n  }\n});\n\nconsole.log(`Trovati ${uniqueResults.length} numeri WhatsApp unici`);\n\nreturn uniqueResults.map(result => ({ json: result }));"
      },
      "id": "number-extractor",
      "name": "WhatsApp Number Extractor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nif (items.length === 0) {\n  return [];\n}\n\nconst groupedData = {\n  wordpress_api_url: $vars.WORDPRESS_API_URL || 'https://tuosito.com',\n  wordpress_api_key: $vars.WORDPRESS_API_KEY || 'demo-api-key-9lz721sv0xTjFNVA',\n  extracted_numbers: items.map(item => item.json)\n};\n\nconsole.log(`Preparati ${groupedData.extracted_numbers.length} numeri per WordPress`);\n\nreturn [{ json: groupedData }];"
      },
      "id": "prepare-api-data",
      "name": "Prepare API Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{$json.wordpress_api_url}}/wp-json/wsp/v1/extract",
        "authentication": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "={{$json.wordpress_api_key}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\"numbers\": $json.extracted_numbers}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "id": "wordpress-api-call",
      "name": "Send to WordPress API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Gmail Trigger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "WhatsApp Number Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Number Extractor": {
      "main": [
        [
          {
            "node": "Prepare API Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare API Data": {
      "main": [
        [
          {
            "node": "Send to WordPress API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "Europe/Rome",
    "saveManualExecutions": true
  },
  "staticData": {},
  "tags": [
    {
      "id": "whatsapp-saas",
      "name": "WhatsApp SaaS"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-08-16T22:00:00.000Z",
  "versionId": "1.0.0"
}

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: plugin-dumper.php
SIZE: 15.84 KB
MODIFIED: 2025-08-17 01:17:41
--------------------------------------------------------------------------------
<?php
/**
 * Plugin Dumper - Genera dump completo del plugin
 * Versione: 1.0
 * Autore: Alby Dev
 */

// Sicurezza: previeni accesso diretto
if (!defined('ABSPATH')) {
    define('ABSPATH', dirname(__FILE__) . '/../../../../');
}

class PluginDumper {
    
    private $plugin_path;
    private $plugin_name;
    private $dump_file;
    private $excluded_extensions = ['zip', 'tar', 'gz', 'rar', '7z', 'exe', 'bin'];
    private $max_file_size = 10 * 1024 * 1024; // 10MB max per file
    
    public function __construct() {
        $this->plugin_path = dirname(__FILE__);
        $this->plugin_name = basename($this->plugin_path);
        $this->dump_file = $this->plugin_path . '/dump_' . $this->plugin_name . '_' . date('Y-m-d_H-i-s') . '.txt';
        
        $this->handleRequest();
    }
    
    private function handleRequest() {
        if (isset($_POST['generate_dump'])) {
            $this->generateDump();
        } elseif (isset($_GET['download']) && file_exists($_GET['download'])) {
            $this->downloadFile($_GET['download']);
        } else {
            $this->showInterface();
        }
    }
    
    private function generateDump() {
        try {
            $content = $this->buildDumpContent();
            
            // Comprimi il contenuto usando gzip
            $compressed_content = gzencode($content, 9);
            
            if (file_put_contents($this->dump_file . '.gz', $compressed_content)) {
                $this->showInterface("✅ Dump creato con successo!", $this->dump_file . '.gz');
            } else {
                throw new Exception("Errore nella scrittura del file dump");
            }
            
        } catch (Exception $e) {
            $this->showInterface("❌ Errore: " . $e->getMessage());
        }
    }
    
    private function buildDumpContent() {
        $content = $this->getHeader();
        $content .= $this->getDirectoryTree();
        $content .= $this->getFileContents();
        $content .= $this->getFooter();
        
        return $content;
    }
    
    private function getHeader() {
        $stats = $this->getPluginStats();
        
        return "
╔══════════════════════════════════════════════════════════════════════════════╗
║                              PLUGIN DUMP REPORT                             ║
╠══════════════════════════════════════════════════════════════════════════════╣
║ Plugin: {$this->plugin_name}
║ Generato: " . date('Y-m-d H:i:s') . "
║ Path: {$this->plugin_path}
║ Totale file: {$stats['files']}
║ Totale directory: {$stats['dirs']}
║ Dimensione totale: " . $this->formatBytes($stats['size']) . "
╚══════════════════════════════════════════════════════════════════════════════╝

";
    }
    
    private function getDirectoryTree() {
        $content = "\n" . str_repeat("=", 80) . "\n";
        $content .= "STRUTTURA DIRECTORY\n";
        $content .= str_repeat("=", 80) . "\n\n";
        
        $content .= $this->buildTree($this->plugin_path, '', true);
        
        return $content . "\n";
    }
    
    private function buildTree($dir, $prefix = '', $isLast = true) {
        $tree = '';
        $items = $this->scanDirectory($dir);
        
        if (empty($items)) return $tree;
        
        foreach ($items as $index => $item) {
            $isLastItem = ($index === count($items) - 1);
            $currentPrefix = $prefix . ($isLastItem ? '└── ' : '├── ');
            
            $tree .= $currentPrefix . basename($item) . "\n";
            
            if (is_dir($item)) {
                $nextPrefix = $prefix . ($isLastItem ? '    ' : '│   ');
                $tree .= $this->buildTree($item, $nextPrefix, $isLastItem);
            }
        }
        
        return $tree;
    }
    
    private function getFileContents() {
        $content = "\n" . str_repeat("=", 80) . "\n";
        $content .= "CONTENUTO FILE\n";
        $content .= str_repeat("=", 80) . "\n\n";
        
        $files = $this->getAllFiles($this->plugin_path);
        
        foreach ($files as $file) {
            $relativePath = str_replace($this->plugin_path . '/', '', $file);
            $content .= $this->getFileSection($file, $relativePath);
        }
        
        return $content;
    }
    
    private function getFileSection($filePath, $relativePath) {
        $section = "\n" . str_repeat("-", 80) . "\n";
        $section .= "FILE: {$relativePath}\n";
        $section .= "SIZE: " . $this->formatBytes(filesize($filePath)) . "\n";
        $section .= "MODIFIED: " . date('Y-m-d H:i:s', filemtime($filePath)) . "\n";
        $section .= str_repeat("-", 80) . "\n";
        
        if (!$this->isTextFile($filePath) || filesize($filePath) > $this->max_file_size) {
            $section .= "[BINARY FILE OR TOO LARGE - CONTENT SKIPPED]\n";
        } else {
            $fileContent = file_get_contents($filePath);
            $section .= $fileContent . "\n";
        }
        
        $section .= "\n" . str_repeat("-", 80) . "\n";
        
        return $section;
    }
    
    private function getFooter() {
        return "\n\n" . str_repeat("=", 80) . "\n" .
               "FINE DUMP - Generato da Plugin Dumper v1.0\n" .
               str_repeat("=", 80) . "\n";
    }
    
    private function scanDirectory($dir) {
        $items = [];
        $files = scandir($dir);
        
        foreach ($files as $file) {
            if ($file === '.' || $file === '..' || $this->shouldSkip($file)) {
                continue;
            }
            
            $fullPath = $dir . '/' . $file;
            $items[] = $fullPath;
        }
        
        // Ordina: directory prima, poi file
        usort($items, function($a, $b) {
            $aIsDir = is_dir($a);
            $bIsDir = is_dir($b);
            
            if ($aIsDir && !$bIsDir) return -1;
            if (!$aIsDir && $bIsDir) return 1;
            
            return strcasecmp(basename($a), basename($b));
        });
        
        return $items;
    }
    
    private function getAllFiles($dir) {
        $files = [];
        $items = $this->scanDirectory($dir);
        
        foreach ($items as $item) {
            if (is_file($item)) {
                $files[] = $item;
            } elseif (is_dir($item)) {
                $files = array_merge($files, $this->getAllFiles($item));
            }
        }
        
        return $files;
    }
    
    private function shouldSkip($filename) {
        // Skip file temporanei e dump precedenti
        if (strpos($filename, 'dump_') === 0) return true;
        if (in_array($filename, ['.DS_Store', 'Thumbs.db', '.git', '.svn', 'node_modules'])) return true;
        
        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        return in_array($ext, $this->excluded_extensions);
    }
    
    private function isTextFile($filePath) {
        $textExtensions = ['php', 'js', 'css', 'html', 'htm', 'txt', 'json', 'xml', 'sql', 'md', 'yml', 'yaml', 'ini', 'conf'];
        $ext = strtolower(pathinfo($filePath, PATHINFO_EXTENSION));
        
        if (in_array($ext, $textExtensions)) return true;
        
        // Check mime type per file senza estensione
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mimeType = finfo_file($finfo, $filePath);
        finfo_close($finfo);
        
        return strpos($mimeType, 'text/') === 0;
    }
    
    private function getPluginStats() {
        $stats = ['files' => 0, 'dirs' => 0, 'size' => 0];
        $this->calculateStats($this->plugin_path, $stats);
        return $stats;
    }
    
    private function calculateStats($dir, &$stats) {
        $items = $this->scanDirectory($dir);
        
        foreach ($items as $item) {
            if (is_file($item)) {
                $stats['files']++;
                $stats['size'] += filesize($item);
            } elseif (is_dir($item)) {
                $stats['dirs']++;
                $this->calculateStats($item, $stats);
            }
        }
    }
    
    private function formatBytes($size, $precision = 2) {
        $units = ['B', 'KB', 'MB', 'GB'];
        
        for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
            $size /= 1024;
        }
        
        return round($size, $precision) . ' ' . $units[$i];
    }
    
    private function downloadFile($filePath) {
        if (!file_exists($filePath)) {
            die("File non trovato");
        }
        
        $filename = basename($filePath);
        
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Content-Length: ' . filesize($filePath));
        header('Cache-Control: must-revalidate');
        
        readfile($filePath);
        exit;
    }
    
    private function showInterface($message = '', $dumpFile = '') {
        ?>
        <!DOCTYPE html>
        <html lang="it">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Plugin Dumper - <?php echo $this->plugin_name; ?></title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                }
                .container {
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    padding: 40px;
                    max-width: 600px;
                    width: 100%;
                    text-align: center;
                }
                h1 {
                    color: #333;
                    margin-bottom: 10px;
                    font-size: 2.5em;
                }
                .subtitle {
                    color: #666;
                    margin-bottom: 30px;
                    font-size: 1.1em;
                }
                .plugin-info {
                    background: #f8f9fa;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 20px 0;
                    text-align: left;
                }
                .info-row {
                    display: flex;
                    justify-content: space-between;
                    margin: 10px 0;
                    padding: 5px 0;
                    border-bottom: 1px solid #eee;
                }
                .info-row:last-child { border-bottom: none; }
                .btn {
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 50px;
                    font-size: 1.1em;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    margin: 10px;
                }
                .btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
                }
                .btn.success {
                    background: linear-gradient(45deg, #56ab2f, #a8e6cf);
                }
                .message {
                    padding: 15px;
                    border-radius: 10px;
                    margin: 20px 0;
                    font-weight: 600;
                }
                .message.success {
                    background: #d4edda;
                    color: #155724;
                    border: 1px solid #c3e6cb;
                }
                .message.error {
                    background: #f8d7da;
                    color: #721c24;
                    border: 1px solid #f5c6cb;
                }
                .loading {
                    display: none;
                    margin: 20px 0;
                }
                .spinner {
                    border: 3px solid #f3f3f3;
                    border-top: 3px solid #667eea;
                    border-radius: 50%;
                    width: 30px;
                    height: 30px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🔧 Plugin Dumper</h1>
                <div class="subtitle">Genera dump completo del plugin</div>
                
                <div class="plugin-info">
                    <div class="info-row">
                        <strong>Plugin:</strong>
                        <span><?php echo $this->plugin_name; ?></span>
                    </div>
                    <div class="info-row">
                        <strong>Path:</strong>
                        <span><?php echo $this->plugin_path; ?></span>
                    </div>
                    <?php 
                    $stats = $this->getPluginStats();
                    ?>
                    <div class="info-row">
                        <strong>File totali:</strong>
                        <span><?php echo $stats['files']; ?></span>
                    </div>
                    <div class="info-row">
                        <strong>Directory:</strong>
                        <span><?php echo $stats['dirs']; ?></span>
                    </div>
                    <div class="info-row">
                        <strong>Dimensione:</strong>
                        <span><?php echo $this->formatBytes($stats['size']); ?></span>
                    </div>
                </div>
                
                <?php if ($message): ?>
                    <div class="message <?php echo strpos($message, '✅') !== false ? 'success' : 'error'; ?>">
                        <?php echo $message; ?>
                    </div>
                <?php endif; ?>
                
                <?php if ($dumpFile && file_exists($dumpFile)): ?>
                    <div>
                        <a href="?download=<?php echo urlencode($dumpFile); ?>" class="btn success">
                            📥 Scarica Dump (<?php echo $this->formatBytes(filesize($dumpFile)); ?>)
                        </a>
                    </div>
                <?php endif; ?>
                
                <form method="post" id="dumpForm">
                    <button type="submit" name="generate_dump" class="btn" onclick="showLoading()">
                        🚀 Genera Dump
                    </button>
                </form>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Generazione dump in corso...</p>
                </div>
            </div>
            
            <script>
                function showLoading() {
                    document.getElementById('loading').style.display = 'block';
                    document.querySelector('.btn').style.display = 'none';
                }
            </script>
        </body>
        </html>
        <?php
    }
}

// Avvia il dumper
new PluginDumper();
?>

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: test-complete-system.php
SIZE: 15.7 KB
MODIFIED: 2025-08-18 18:24:11
--------------------------------------------------------------------------------
<?php
/**
 * Test Completo Sistema WhatsApp SaaS con Campagne QR
 * Include test per n8n, Mail2Wa, campagne QR e estrazione numeri
 */

require_once('../../../wp-load.php');

if (!current_user_can('manage_options')) {
    die('Accesso negato');
}

// Configurazione test
$TEST_CONFIG = array(
    'test_phone' => '393355366950',
    'test_name' => 'Test User',
    'mail2wa_key' => get_option('wsp_mail2wa_api_key', '1f06d5c8bd0cd19f7c99b660b504bb25'),
    'wp_api_key' => get_option('wsp_api_key', 'demo-api-key-9lz721sv0xTjFNVA'),
    'test_mode' => isset($_GET['live']) ? false : true
);

?>
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <title>🧪 Test Completo Sistema WhatsApp SaaS</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .test-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border: 2px solid transparent;
            transition: all 0.3s;
        }
        .test-card:hover {
            border-color: #667eea;
            transform: translateY(-5px);
        }
        .test-card h3 {
            margin-top: 0;
            color: #333;
        }
        .test-button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
        }
        .test-button:hover {
            opacity: 0.9;
        }
        .result {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
            display: none;
        }
        .result.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            display: block;
        }
        .result.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            display: block;
        }
        .result.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
            display: block;
        }
        pre {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            font-size: 12px;
        }
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .status-indicator.active {
            background: #28a745;
            animation: pulse 2s infinite;
        }
        .status-indicator.inactive {
            background: #dc3545;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🧪 Test Completo Sistema WhatsApp SaaS</h1>
        <p>Test completo di tutte le funzionalità: n8n, Mail2Wa, Campagne QR, Estrazione numeri</p>
        
        <?php if ($TEST_CONFIG['test_mode']): ?>
            <div class="result info">
                ⚠️ MODALITÀ TEST - Nessun messaggio reale verrà inviato
                <a href="?live=1" style="float: right; color: inherit;">Passa a LIVE →</a>
            </div>
        <?php else: ?>
            <div class="result success">
                🚀 MODALITÀ LIVE - I messaggi verranno inviati realmente!
            </div>
        <?php endif; ?>
        
        <div class="test-grid">
            <!-- Test 1: API WordPress -->
            <div class="test-card">
                <h3>🔌 Test API WordPress</h3>
                <p>Verifica che l'API REST di WordPress sia attiva</p>
                <button class="test-button" onclick="testWordPressAPI()">Esegui Test</button>
                <div id="wp-api-result" class="result"></div>
            </div>
            
            <!-- Test 2: Database -->
            <div class="test-card">
                <h3>💾 Test Database</h3>
                <p>Verifica tabelle e struttura database</p>
                <button class="test-button" onclick="testDatabase()">Esegui Test</button>
                <div id="db-result" class="result"></div>
            </div>
            
            <!-- Test 3: n8n Integration -->
            <div class="test-card">
                <h3>🔄 Test n8n</h3>
                <p>Simula webhook da n8n</p>
                <button class="test-button" onclick="testN8n()">Esegui Test</button>
                <div id="n8n-result" class="result"></div>
            </div>
            
            <!-- Test 4: Mail2Wa -->
            <div class="test-card">
                <h3>📧 Test Mail2Wa</h3>
                <p>Invia messaggio di test</p>
                <button class="test-button" onclick="testMail2Wa()">Esegui Test</button>
                <div id="mail2wa-result" class="result"></div>
            </div>
            
            <!-- Test 5: Campagna QR -->
            <div class="test-card">
                <h3>📱 Test Campagna QR</h3>
                <p>Crea campagna QR di test</p>
                <button class="test-button" onclick="testQRCampaign()">Esegui Test</button>
                <div id="qr-result" class="result"></div>
            </div>
            
            <!-- Test 6: Email Processing -->
            <div class="test-card">
                <h3>📨 Test Estrazione Email</h3>
                <p>Estrai numeri da email upgradeservizi</p>
                <button class="test-button" onclick="testEmailExtraction()">Esegui Test</button>
                <div id="email-result" class="result"></div>
            </div>
        </div>
        
        <!-- Test Completo -->
        <div style="text-align: center; margin-top: 40px;">
            <button class="test-button" style="width: auto; padding: 15px 40px; font-size: 18px;" 
                    onclick="runAllTests()">
                🚀 Esegui TUTTI i Test
            </button>
        </div>
        
        <div id="complete-result" class="result" style="margin-top: 20px;"></div>
    </div>
    
    <script>
    const API_BASE = '<?php echo home_url('/wp-json/wsp/v1'); ?>';
    const AJAX_URL = '<?php echo admin_url('admin-ajax.php'); ?>';
    const WP_API_KEY = '<?php echo $TEST_CONFIG['wp_api_key']; ?>';
    const TEST_MODE = <?php echo $TEST_CONFIG['test_mode'] ? 'true' : 'false'; ?>;
    
    function testWordPressAPI() {
        const resultDiv = document.getElementById('wp-api-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Testing API...';
        
        fetch(API_BASE + '/ping')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ API WordPress attiva<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    throw new Error('API non risponde');
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    function testDatabase() {
        const resultDiv = document.getElementById('db-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Verifica database...';
        
        fetch(AJAX_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'action=wsp_test_database&nonce=<?php echo wp_create_nonce('wsp_nonce'); ?>'
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ Database OK - ' + data.data.records + ' record trovati';
                } else {
                    throw new Error(data.data);
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    function testN8n() {
        const resultDiv = document.getElementById('n8n-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Simulazione webhook n8n...';
        
        const testData = {
            numbers: [{
                messageId: 'test_' + Date.now(),
                senderNumber: '393331234567',
                senderName: 'Test n8n',
                recipientNumber: '<?php echo $TEST_CONFIG['test_phone']; ?>',
                recipientName: '<?php echo $TEST_CONFIG['test_name']; ?>',
                extractionMethod: 'n8n_test',
                processedDate: new Date().toISOString().split('T')[0],
                hasRecipient: true
            }]
        };
        
        fetch(API_BASE + '/extract', {
            method: 'POST',
            headers: {
                'X-API-Key': WP_API_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ n8n webhook simulato<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    function testMail2Wa() {
        const resultDiv = document.getElementById('mail2wa-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Invio messaggio test...';
        
        if (TEST_MODE) {
            resultDiv.className = 'result info';
            resultDiv.innerHTML = 'ℹ️ Modalità test - messaggio non inviato realmente';
            return;
        }
        
        fetch(AJAX_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'action=wsp_test_mail2wa_send&nonce=<?php echo wp_create_nonce('wsp_nonce'); ?>' +
                  '&phone=<?php echo $TEST_CONFIG['test_phone']; ?>' +
                  '&message=Test WhatsApp SaaS ' + new Date().toLocaleString()
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ Messaggio inviato a <?php echo $TEST_CONFIG['test_phone']; ?>';
                } else {
                    throw new Error(data.data);
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    function testQRCampaign() {
        const resultDiv = document.getElementById('qr-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Creazione campagna QR...';
        
        const campaignData = new FormData();
        campaignData.append('action', 'wsp_create_campaign');
        campaignData.append('nonce', '<?php echo wp_create_nonce('wsp_nonce'); ?>');
        campaignData.append('name', 'Test Campaign ' + Date.now());
        campaignData.append('phone_number', '<?php echo $TEST_CONFIG['test_phone']; ?>');
        campaignData.append('description', 'Campagna di test');
        campaignData.append('message_text', 'Messaggio di test dalla campagna QR');
        campaignData.append('ref_id', 'TEST_' + Date.now());
        
        fetch(AJAX_URL, {
            method: 'POST',
            body: campaignData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ Campagna creata<br>' +
                        'ID: ' + data.data.campaign_id + '<br>' +
                        'Ref: ' + data.data.ref_id + '<br>' +
                        '<a href="' + data.data.whatsapp_link + '" target="_blank">Test Link WhatsApp</a>';
                } else {
                    throw new Error(data.data);
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    function testEmailExtraction() {
        const resultDiv = document.getElementById('email-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Test estrazione email...';
        
        const testEmail = `
            Messaggi ricevuti da WhatsApp 393331234567@c.us - Test User
            Data: ${new Date().toLocaleString()}
            Contenuto: Test messaggio con numero 393339876543
        `;
        
        fetch(AJAX_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'action=wsp_test_email_processing&nonce=<?php echo wp_create_nonce('wsp_nonce'); ?>' +
                  '&email_content=' + encodeURIComponent(testEmail)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.innerHTML = '✅ Numeri estratti: ' + data.data.numbers.join(', ');
                } else {
                    throw new Error(data.data);
                }
            })
            .catch(error => {
                resultDiv.className = 'result error';
                resultDiv.innerHTML = '❌ Errore: ' + error.message;
            });
    }
    
    async function runAllTests() {
        const resultDiv = document.getElementById('complete-result');
        resultDiv.className = 'result info';
        resultDiv.innerHTML = '⏳ Esecuzione di tutti i test...';
        
        const tests = [
            { name: 'WordPress API', func: testWordPressAPI },
            { name: 'Database', func: testDatabase },
            { name: 'n8n Integration', func: testN8n },
            { name: 'Mail2Wa', func: testMail2Wa },
            { name: 'Campagna QR', func: testQRCampaign },
            { name: 'Email Extraction', func: testEmailExtraction }
        ];
        
        let results = [];
        
        for (const test of tests) {
            await new Promise(resolve => {
                test.func();
                setTimeout(resolve, 2000);
            });
            results.push(test.name + ': Completato');
        }
        
        resultDiv.className = 'result success';
        resultDiv.innerHTML = '✅ Tutti i test completati!<br>' + results.join('<br>');
    }
    </script>
</body>
</html>


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: test-recipient.php
SIZE: 3.04 KB
MODIFIED: 2025-08-17 21:21:40
--------------------------------------------------------------------------------
<?php
/**
 * Test file per verificare salvataggio destinatari
 * RIMUOVI DOPO IL TEST
 */

// Carica WordPress
require_once('../../../wp-load.php');

// Abilita debug
define('WP_DEBUG', true);
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h2>Test Salvataggio Destinatari WhatsApp SaaS</h2>";

// Simula dati da n8n con destinatario
$test_data = array(
    array(
        'messageId' => 'test_' . time(),
        'threadId' => 'thread_test',
        'senderNumber' => '393331234567',
        'senderName' => 'Mario Rossi',
        'senderFormatted' => '+39 333 123 4567',
        'senderEmail' => 'mario@example.com',
        'recipientNumber' => '393339876543',
        'recipientName' => 'Giuseppe Verdi',
        'recipientEmail' => 'giuseppe@example.com',
        'extractionMethod' => 'manual_test',
        'rawMatch' => '393331234567, 393339876543',
        'subject' => 'Test messaggio con destinatario',
        'snippet' => 'Questo è un test',
        'processedDate' => date('Y-m-d'),
        'processedTime' => date('H:i:s'),
        'isNewSender' => true,
        'hasRecipient' => true,
        'uniqueVisitorId' => 'test_' . time()
    )
);

echo "<h3>Dati di test da salvare:</h3>";
echo "<pre>";
print_r($test_data);
echo "</pre>";

// Salva nel database
$result = WSP_Database::save_whatsapp_numbers($test_data);

echo "<h3>Risultato salvataggio:</h3>";
echo "<pre>";
print_r($result);
echo "</pre>";

// Verifica nel database
global $wpdb;
$table = $wpdb->prefix . 'wsp_whatsapp_numbers';
$last_record = $wpdb->get_row("SELECT * FROM $table ORDER BY id DESC LIMIT 1");

echo "<h3>Ultimo record salvato nel database:</h3>";
echo "<pre>";
print_r($last_record);
echo "</pre>";

// Verifica campi destinatario
if ($last_record) {
    echo "<h3>Verifica campi destinatario:</h3>";
    echo "<ul>";
    echo "<li>recipient_number: " . ($last_record->recipient_number ?: 'VUOTO') . "</li>";
    echo "<li>recipient_name: " . ($last_record->recipient_name ?: 'VUOTO') . "</li>";
    echo "<li>recipient_email: " . ($last_record->recipient_email ?: 'VUOTO') . "</li>";
    echo "<li>has_recipient: " . ($last_record->has_recipient ? 'SI' : 'NO') . "</li>";
    echo "</ul>";
    
    if (empty($last_record->recipient_number)) {
        echo "<p style='color:red;'><strong>⚠️ ATTENZIONE: Il campo recipient_number è vuoto!</strong></p>";
    } else {
        echo "<p style='color:green;'><strong>✅ Destinatario salvato correttamente!</strong></p>";
    }
}

// Test API endpoint
echo "<h3>Test chiamata API:</h3>";
$api_url = home_url('/wp-json/wsp/v1/debug');
echo "<p>Endpoint debug: <code>$api_url</code></p>";
?>

<script>
// Test JavaScript API
fetch('<?php echo home_url('/wp-json/wsp/v1/ping'); ?>')
    .then(response => response.json())
    .then(data => {
        console.log('API Ping response:', data);
        document.write('<p>API Status: ' + (data.success ? '✅ ATTIVA' : '❌ NON RISPONDE') + '</p>');
    })
    .catch(error => {
        console.error('API Error:', error);
        document.write('<p>API Error: ' + error.message + '</p>');
    });
</script>


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: test-whatsapp-complete.php
SIZE: 4.63 KB
MODIFIED: 2025-08-18 22:31:54
--------------------------------------------------------------------------------
<?php
/**
 * Test Completo WhatsApp SaaS Plugin - VERSIONE CORRETTA
 * Con integrazione Mail2Wa.it funzionante
 */

// Carica WordPress
require_once('../../../wp-load.php');

// Verifica permessi
if (!current_user_can('manage_options')) {
    die('Accesso negato');
}

// Abilita debug
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Configurazione test
$TEST_CONFIG = array(
    'recipient_number' => '393355366950',  // Il tuo numero per il test
    'recipient_name' => 'Alby Test',
    'sender_number' => '393331234567',     // Numero mittente fittizio
    'sender_name' => 'Test Sender',
    'test_mode' => isset($_GET['live']) ? false : true
);

?>
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧪 Test Completo WhatsApp SaaS</title>
    <style>
        /* ... stili esistenti ... */
    </style>
</head>
<body>
    <div class="container">
        <h1>🧪 Test Completo WhatsApp SaaS</h1>
        <div class="subtitle">Test end-to-end del sistema di invio messaggi WhatsApp</div>
        
        <?php if ($TEST_CONFIG['test_mode']): ?>
            <div class="result-box warning">
                ⚠️ <strong>MODALITÀ TEST</strong> - I messaggi non verranno inviati realmente.
                <a href="?live=1" class="btn secondary" style="float: right; padding: 5px 15px; font-size: 0.9em;">
                    Passa a modalità LIVE
                </a>
                <div style="clear: both;"></div>
            </div>
        <?php else: ?>
            <div class="result-box info">
                🚀 <strong>MODALITÀ LIVE</strong> - I messaggi verranno inviati realmente!
            </div>
        <?php endif; ?>
        
        <!-- Test Database Section -->
        <div class="test-section">
            <h2>💾 Test Database</h2>
            <button onclick="testDatabase()" class="btn">Test Database</button>
            <div id="db-result" class="result-box" style="display:none;"></div>
        </div>
        
        <!-- Test Mail2Wa Section -->
        <div class="test-section">
            <h2>📧 Test Mail2Wa</h2>
            <button onclick="testMail2Wa()" class="btn">Test Mail2Wa</button>
            <div id="mail2wa-result" class="result-box" style="display:none;"></div>
        </div>
    </div>
    
    <script>
    function testDatabase() {
        const resultDiv = document.getElementById('db-result');
        resultDiv.style.display = 'block';
        resultDiv.className = 'result-box info';
        resultDiv.innerHTML = '⏳ Testing database...';
        
        jQuery.post(ajaxurl, {
            action: 'wsp_test_database',
            nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>' // FIX: usa wsp_nonce
        }, function(response) {
            if (response.success) {
                resultDiv.className = 'result-box success';
                resultDiv.innerHTML = '✅ Database OK - ' + response.data.records + ' record trovati';
            } else {
                resultDiv.className = 'result-box error';
                resultDiv.innerHTML = '❌ Errore: ' + response.data;
            }
        }).fail(function(xhr) {
            resultDiv.className = 'result-box error';
            resultDiv.innerHTML = '❌ Errore AJAX: ' + xhr.responseText;
        });
    }
    
    function testMail2Wa() {
        const resultDiv = document.getElementById('mail2wa-result');
        resultDiv.style.display = 'block';
        resultDiv.className = 'result-box info';
        resultDiv.innerHTML = '⏳ Testing Mail2Wa...';
        
        <?php if ($TEST_CONFIG['test_mode']): ?>
            resultDiv.className = 'result-box info';
            resultDiv.innerHTML = 'ℹ️ Modalità test - messaggio non inviato realmente';
            return;
        <?php endif; ?>
        
        jQuery.post(ajaxurl, {
            action: 'wsp_test_mail2wa_send',
            nonce: '<?php echo wp_create_nonce('wsp_nonce'); ?>', // FIX: usa wsp_nonce
            phone: '<?php echo $TEST_CONFIG['recipient_number']; ?>',
            message: 'Test WhatsApp SaaS ' + new Date().toLocaleString()
        }, function(response) {
            if (response.success) {
                resultDiv.className = 'result-box success';
                resultDiv.innerHTML = '✅ Messaggio inviato!';
            } else {
                resultDiv.className = 'result-box error';
                resultDiv.innerHTML = '❌ Errore: ' + response.data;
            }
        }).fail(function(xhr) {
            resultDiv.className = 'result-box error';
            resultDiv.innerHTML = '❌ Errore AJAX: ' + xhr.responseText;
        });
    }
    </script>
</body>
</html>


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: test-whatsapp-complete.php_
SIZE: 24.68 KB
MODIFIED: 2025-08-18 00:03:57
--------------------------------------------------------------------------------
<?php
/**
 * Test Completo WhatsApp SaaS Plugin - VERSIONE CORRETTA
 * Con integrazione Mail2Wa.it funzionante
 * 
 * ⚠️ IMPORTANTE: Esegui questo file dal browser
 * URL: https://tuosito.com/stage/wp-content/plugins/whatsapp-saas-pro/test-whatsapp-complete.php
 */

// Carica WordPress
require_once('../../../wp-load.php');

// Abilita debug
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Configurazione test
$TEST_CONFIG = array(
    'recipient_number' => '393355366950',  // Il tuo numero per il test
    'recipient_name' => 'Alby Test',
    'sender_number' => '393331234567',     // Numero mittente fittizio
    'sender_name' => 'Test Sender',
    'test_mode' => isset($_GET['live']) ? false : true  // Aggiungi ?live=1 all'URL per invio reale
);

?>
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧪 Test Completo WhatsApp SaaS</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
        }
        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1em;
        }
        .test-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }
        .test-section h2 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        .result-box {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.9em;
        }
        .success {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        .warning {
            background: #fff3cd;
            border-color: #ffeeba;
            color: #856404;
        }
        .info {
            background: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            margin: 10px 5px;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        .btn.secondary {
            background: linear-gradient(45deg, #f093fb, #f5576c);
        }
        .btn.success {
            background: linear-gradient(45deg, #00b09b, #96c93d);
        }
        .config-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        .config-table td {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        .config-table td:first-child {
            font-weight: 600;
            color: #666;
            width: 40%;
        }
        pre {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 10px 0;
        }
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .step-indicator {
            display: flex;
            justify-content: space-between;
            margin: 30px 0;
        }
        .step {
            flex: 1;
            text-align: center;
            padding: 10px;
            background: #f0f0f0;
            margin: 0 5px;
            border-radius: 10px;
            position: relative;
        }
        .step.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }
        .step.completed {
            background: #28a745;
            color: white;
        }
        .step.failed {
            background: #dc3545;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🧪 Test Completo WhatsApp SaaS</h1>
        <div class="subtitle">Test end-to-end del sistema di invio messaggi WhatsApp</div>
        
        <?php if ($TEST_CONFIG['test_mode']): ?>
            <div class="result-box warning">
                ⚠️ <strong>MODALITÀ TEST</strong> - I messaggi non verranno inviati realmente.
                <a href="?live=1" class="btn secondary" style="float: right; padding: 5px 15px; font-size: 0.9em;">
                    Passa a modalità LIVE
                </a>
                <div style="clear: both;"></div>
            </div>
        <?php else: ?>
            <div class="result-box info">
                🚀 <strong>MODALITÀ LIVE</strong> - I messaggi verranno inviati realmente!
            </div>
        <?php endif; ?>
        
        <!-- Configurazione -->
        <div class="test-section">
            <h2>⚙️ Configurazione Test</h2>
            <table class="config-table">
                <tr>
                    <td>📱 Numero Destinatario:</td>
                    <td><strong><?php echo $TEST_CONFIG['recipient_number']; ?></strong> (<?php echo $TEST_CONFIG['recipient_name']; ?>)</td>
                </tr>
                <tr>
                    <td>📤 Numero Mittente:</td>
                    <td><?php echo $TEST_CONFIG['sender_number']; ?> (<?php echo $TEST_CONFIG['sender_name']; ?>)</td>
                </tr>
                <tr>
                    <td>🔑 API Key WordPress:</td>
                    <td><?php echo substr(get_option('wsp_api_key', 'NON CONFIGURATA'), 0, 20); ?>...</td>
                </tr>
                <tr>
                    <td>🔑 Mail2Wa API Key:</td>
                    <td><?php 
                        $mail2wa_key = get_option('wsp_mail2wa_api_key', '1f06d5c8bd0cd19f7c99b660b504bb25');
                        echo $mail2wa_key ? substr($mail2wa_key, 0, 20) . '...' : 'NON CONFIGURATA';
                    ?></td>
                </tr>
                <tr>
                    <td>💳 Crediti Disponibili:</td>
                    <td><?php echo number_format(get_option('wsp_credits_balance', 0)); ?></td>
                </tr>
            </table>
        </div>
        
        <!-- Step Indicator -->
        <div class="step-indicator">
            <div class="step" id="step1">1️⃣ Salva Numero</div>
            <div class="step" id="step2">2️⃣ Verifica API</div>
            <div class="step" id="step3">3️⃣ Prepara Messaggio</div>
            <div class="step" id="step4">4️⃣ Invia WhatsApp</div>
            <div class="step" id="step5">5️⃣ Conferma</div>
        </div>
        
        <?php
        // Esegui test se richiesto
        if (isset($_POST['run_test']) || isset($_GET['auto'])) {
            echo '<div id="test-results">';
            
            // STEP 1: Salva numero nel database
            echo '<div class="test-section">';
            echo '<h2>📝 Step 1: Salvataggio Numero nel Database</h2>';
            
            $test_data = array(
                array(
                    'messageId' => 'test_' . time(),
                    'threadId' => 'thread_test',
                    'senderNumber' => $TEST_CONFIG['sender_number'],
                    'senderName' => $TEST_CONFIG['sender_name'],
                    'senderFormatted' => '+39 ' . substr($TEST_CONFIG['sender_number'], 2, 3) . ' ' . substr($TEST_CONFIG['sender_number'], 5),
                    'senderEmail' => 'sender@test.com',
                    'recipientNumber' => $TEST_CONFIG['recipient_number'],
                    'recipientName' => $TEST_CONFIG['recipient_name'],
                    'recipientEmail' => 'alby@test.com',
                    'extractionMethod' => 'manual_test',
                    'rawMatch' => $TEST_CONFIG['sender_number'] . ', ' . $TEST_CONFIG['recipient_number'],
                    'subject' => 'Test invio WhatsApp - ' . date('d/m/Y H:i:s'),
                    'snippet' => 'Test completo del sistema di invio messaggi WhatsApp',
                    'processedDate' => date('Y-m-d'),
                    'processedTime' => date('H:i:s'),
                    'isNewSender' => true,
                    'hasRecipient' => true,
                    'uniqueVisitorId' => 'test_' . uniqid()
                )
            );
            
            echo '<div class="result-box">Dati da salvare:</div>';
            echo '<pre>' . json_encode($test_data[0], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . '</pre>';
            
            $save_result = WSP_Database::save_whatsapp_numbers($test_data);
            
            if ($save_result['saved'] > 0) {
                echo '<div class="result-box success">✅ Numero salvato con successo nel database!</div>';
                echo '<script>document.getElementById("step1").classList.add("completed");</script>';
                
                // Recupera l'ultimo record salvato
                global $wpdb;
                $table = $wpdb->prefix . 'wsp_whatsapp_numbers';
                $last_record = $wpdb->get_row("SELECT * FROM $table ORDER BY id DESC LIMIT 1");
                $record_id = $last_record->id;
                
                echo '<div class="result-box info">Record ID: #' . $record_id . '</div>';
            } else {
                echo '<div class="result-box error">❌ Errore nel salvataggio: ' . implode(', ', $save_result['errors']) . '</div>';
                echo '<script>document.getElementById("step1").classList.add("failed");</script>';
            }
            echo '</div>';
            
            // STEP 2: Test API WordPress
            echo '<div class="test-section">';
            echo '<h2>🔌 Step 2: Verifica API WordPress</h2>';
            
            $api_url = home_url('/wp-json/wsp/v1/ping');
            echo '<div class="result-box">Testing: ' . $api_url . '</div>';
            
            $response = wp_remote_get($api_url);
            
            if (!is_wp_error($response)) {
                $body = json_decode(wp_remote_retrieve_body($response), true);
                if ($body['success']) {
                    echo '<div class="result-box success">✅ API WordPress attiva e funzionante!</div>';
                    echo '<pre>' . json_encode($body, JSON_PRETTY_PRINT) . '</pre>';
                    echo '<script>document.getElementById("step2").classList.add("completed");</script>';
                } else {
                    echo '<div class="result-box error">❌ API non risponde correttamente</div>';
                    echo '<script>document.getElementById("step2").classList.add("failed");</script>';
                }
            } else {
                echo '<div class="result-box error">❌ Errore connessione API: ' . $response->get_error_message() . '</div>';
                echo '<script>document.getElementById("step2").classList.add("failed");</script>';
            }
            echo '</div>';
            
            // STEP 3: Prepara messaggio
            echo '<div class="test-section">';
            echo '<h2>💬 Step 3: Preparazione Messaggio</h2>';
            
            $message_template = "🎉 *Test WhatsApp SaaS Plugin*\n\n";
            $message_template .= "Ciao {$TEST_CONFIG['recipient_name']}! 👋\n\n";
            $message_template .= "Questo è un messaggio di test inviato il " . date('d/m/Y') . " alle " . date('H:i:s') . "\n\n";
            $message_template .= "📱 Numero destinatario: {$TEST_CONFIG['recipient_number']}\n";
            $message_template .= "📤 Numero mittente: {$TEST_CONFIG['sender_number']}\n\n";
            $message_template .= "Se ricevi questo messaggio, il sistema funziona correttamente! ✅\n\n";
            $message_template .= "---\n";
            $message_template .= "🌐 Powered by WhatsApp SaaS Plugin\n";
            $message_template .= "🔗 https://curiositaenotizie.it";
            
            echo '<div class="result-box">Messaggio da inviare:</div>';
            echo '<pre style="white-space: pre-wrap;">' . htmlspecialchars($message_template) . '</pre>';
            echo '<script>document.getElementById("step3").classList.add("completed");</script>';
            echo '</div>';
            
            // STEP 4: Invio WhatsApp con Mail2Wa CORRETTO
            echo '<div class="test-section">';
            echo '<h2>📤 Step 4: Invio Messaggio WhatsApp</h2>';
            
            if ($TEST_CONFIG['test_mode']) {
                echo '<div class="result-box warning">⚠️ MODALITÀ TEST - Simulazione invio (nessun messaggio reale inviato)</div>';
                echo '<div class="result-box info">';
                echo 'Simulazione chiamata API Mail2Wa:<br>';
                echo 'Endpoint: https://[numero]@mail2wa.it<br>';
                echo 'Numero: ' . $TEST_CONFIG['recipient_number'] . '<br>';
                echo 'Lunghezza messaggio: ' . strlen($message_template) . ' caratteri';
                echo '</div>';
                echo '<script>document.getElementById("step4").classList.add("completed");</script>';
            } else {
                // INVIO REALE con Mail2Wa
                $mail2wa_key = get_option('wsp_mail2wa_api_key', '1f06d5c8bd0cd19f7c99b660b504bb25');
                
                if (empty($mail2wa_key)) {
                    echo '<div class="result-box error">❌ Mail2Wa API Key non configurata!</div>';
                    echo '<div class="result-box warning">Usando chiave di default per test...</div>';
                    $mail2wa_key = '1f06d5c8bd0cd19f7c99b660b504bb25';
                }
                
                echo '<div class="result-box info">🚀 Invio messaggio in corso...</div>';
                
                // METODO 1: Invio tramite EMAIL (più affidabile)
                $to_email = $TEST_CONFIG['recipient_number'] . '@mail2wa.it';
                $subject = 'Test WhatsApp SaaS';
                $headers = array(
                    'Content-Type: text/plain; charset=UTF-8',
                    'From: WhatsApp Test <noreply@' . parse_url(home_url(), PHP_URL_HOST) . '>',
                    'Reply-To: noreply@' . parse_url(home_url(), PHP_URL_HOST),
                    'X-Mailer: WhatsApp SaaS Plugin'
                );
                
                // Aggiungi API key al messaggio se richiesto da Mail2Wa
                $message_with_key = $message_template . "\n\n[API:" . $mail2wa_key . "]";
                
                echo '<div class="result-box">Invio email a: ' . $to_email . '</div>';
                
                $mail_sent = wp_mail($to_email, $subject, $message_with_key, $headers);
                
                if ($mail_sent) {
                    echo '<div class="result-box success">✅ Email inviata a Mail2Wa! Il messaggio WhatsApp dovrebbe arrivare a breve.</div>';
                    echo '<script>document.getElementById("step4").classList.add("completed");</script>';
                    
                    // Decrementa crediti
                    $credits = get_option('wsp_credits_balance', 0);
                    if ($credits > 0) {
                        update_option('wsp_credits_balance', $credits - 1);
                        echo '<div class="result-box info">💳 Crediti rimanenti: ' . ($credits - 1) . '</div>';
                    }
                } else {
                    // METODO 2: Prova con chiamata HTTP diretta
                    echo '<div class="result-box warning">Email fallita, provo con HTTP...</div>';
                    
                    // Formato corretto per Mail2Wa HTTP API
                    $api_endpoint = 'https://api.mail2wa.it/send';
                    
                    $payload = array(
                        'apikey' => $mail2wa_key,
                        'phone' => '+' . $TEST_CONFIG['recipient_number'], // Assicurati che abbia il +
                        'text' => $message_template
                    );
                    
                    $response = wp_remote_post($api_endpoint, array(
                        'body' => $payload,
                        'headers' => array(
                            'User-Agent' => 'WhatsApp SaaS Plugin/1.0'
                        ),
                        'timeout' => 30
                    ));
                    
                    if (!is_wp_error($response)) {
                        $body = wp_remote_retrieve_body($response);
                        $status_code = wp_remote_retrieve_response_code($response);
                        
                        echo '<div class="result-box">Response Code: ' . $status_code . '</div>';
                        echo '<div class="result-box">Response: ' . htmlspecialchars($body) . '</div>';
                        
                        if ($status_code == 200 || $status_code == 201) {
                            echo '<div class="result-box success">✅ Messaggio inviato tramite API HTTP!</div>';
                            echo '<script>document.getElementById("step4").classList.add("completed");</script>';
                        } else {
                            echo '<div class="result-box error">❌ Errore nell\'invio: HTTP ' . $status_code . '</div>';
                            echo '<script>document.getElementById("step4").classList.add("failed");</script>';
                        }
                    } else {
                        echo '<div class="result-box error">❌ Errore di connessione: ' . $response->get_error_message() . '</div>';
                        echo '<script>document.getElementById("step4").classList.add("failed");</script>';
                    }
                }
            }
            echo '</div>';
            
            // STEP 5: Conferma e log
            echo '<div class="test-section">';
            echo '<h2>📊 Step 5: Riepilogo e Log</h2>';
            
            // Salva log attività
            if (isset($record_id)) {
                WSP_Database::log_activity(
                    'test_complete',
                    'Test completo workflow eseguito',
                    array(
                        'record_id' => $record_id,
                        'recipient' => $TEST_CONFIG['recipient_number'],
                        'test_mode' => $TEST_CONFIG['test_mode'],
                        'timestamp' => date('Y-m-d H:i:s')
                    )
                );
            }
            
            // Mostra ultimi log
            global $wpdb;
            $logs_table = $wpdb->prefix . 'wsp_activity_logs';
            $recent_logs = $wpdb->get_results("SELECT * FROM $logs_table ORDER BY created_at DESC LIMIT 5");
            
            echo '<div class="result-box">Ultimi 5 log di sistema:</div>';
            echo '<table class="config-table">';
            foreach ($recent_logs as $log) {
                echo '<tr>';
                echo '<td>' . date('H:i:s', strtotime($log->created_at)) . '</td>';
                echo '<td><code>' . $log->action . '</code></td>';
                echo '<td>' . $log->description . '</td>';
                echo '</tr>';
            }
            echo '</table>';
            
            echo '<script>document.getElementById("step5").classList.add("completed");</script>';
            echo '</div>';
            
            // Riepilogo finale
            echo '<div class="test-section" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">';
            echo '<h2 style="color: white;">🎯 Test Completato!</h2>';
            
            if ($TEST_CONFIG['test_mode']) {
                echo '<p>Il test è stato completato in modalità simulazione.</p>';
                echo '<p>Per inviare realmente il messaggio WhatsApp:</p>';
                echo '<a href="?live=1&auto=1" class="btn success">🚀 Esegui Test in Modalità LIVE</a>';
            } else {
                echo '<p>Il messaggio WhatsApp è stato inviato a: <strong>' . $TEST_CONFIG['recipient_number'] . '</strong></p>';
                echo '<p>Controlla il tuo telefono per verificare la ricezione! 📱</p>';
                echo '<div class="result-box" style="background: rgba(255,255,255,0.2); border: 2px solid white; margin-top: 20px;">';
                echo '<strong>📌 IMPORTANTE:</strong><br>';
                echo '• Il messaggio potrebbe impiegare 1-2 minuti ad arrivare<br>';
                echo '• Verifica che il numero sia corretto e attivo su WhatsApp<br>';
                echo '• Se usi Mail2Wa, controlla di avere crediti sufficienti sul loro servizio';
                echo '</div>';
            }
            
            echo '</div>';
            
            echo '</div>'; // chiudi test-results
        }
        ?>
        
        <!-- Form iniziale -->
        <?php if (!isset($_POST['run_test']) && !isset($_GET['auto'])): ?>
        <form method="post" action="">
            <div class="test-section" style="text-align: center;">
                <h2>🚀 Pronto per il test?</h2>
                <p style="margin: 20px 0;">Questo test verificherà l'intero workflow del plugin:</p>
                <ol style="text-align: left; display: inline-block; margin: 20px 0;">
                    <li>Salvataggio numero nel database</li>
                    <li>Verifica API WordPress</li>
                    <li>Preparazione messaggio personalizzato</li>
                    <li>Invio messaggio WhatsApp tramite Mail2Wa</li>
                    <li>Logging e conferma</li>
                </ol>
                <button type="submit" name="run_test" class="btn success" style="font-size: 1.2em; padding: 15px 40px;">
                    🧪 Avvia Test Completo
                </button>
            </div>
        </form>
        <?php endif; ?>
        
        <!-- Azioni aggiuntive -->
        <div style="text-align: center; margin-top: 30px; padding-top: 30px; border-top: 1px solid #eee;">
            <a href="<?php echo admin_url('admin.php?page=wsp-dashboard'); ?>" class="btn">
                📊 Dashboard Plugin
            </a>
            <a href="<?php echo admin_url('admin.php?page=wsp-numbers'); ?>" class="btn">
                📱 Vedi Numeri
            </a>
            <a href="<?php echo admin_url('admin.php?page=wsp-settings'); ?>" class="btn secondary">
                ⚙️ Impostazioni
            </a>
            <a href="<?php echo $_SERVER['PHP_SELF']; ?>" class="btn" style="background: #6c757d;">
                🔄 Nuovo Test
            </a>
        </div>
        
        <!-- Info Mail2Wa -->
        <div class="test-section" style="margin-top: 30px; background: #f0f8ff;">
            <h3>ℹ️ Informazioni su Mail2Wa</h3>
            <p>Il servizio Mail2Wa permette di inviare messaggi WhatsApp tramite:</p>
            <ul style="margin: 10px 0; padding-left: 20px;">
                <li><strong>Email:</strong> invia a numero@mail2wa.it</li>
                <li><strong>API HTTP:</strong> POST a https://api.mail2wa.it/send</li>
            </ul>
            <p>Per funzionare correttamente assicurati di:</p>
            <ul style="margin: 10px 0; padding-left: 20px;">
                <li>✅ Avere un account Mail2Wa attivo</li>
                <li>✅ Avere crediti sufficienti su Mail2Wa</li>
                <li>✅ Configurare la API key nelle impostazioni del plugin</li>
                <li>✅ Il numero destinatario deve essere attivo su WhatsApp</li>
            </ul>
        </div>
    </div>
    
    <script>
    // Auto-scroll durante il test
    if (document.getElementById('test-results')) {
        const sections = document.querySelectorAll('.test-section');
        sections.forEach((section, index) => {
            setTimeout(() => {
                section.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, index * 1000);
        });
    }
    </script>
</body>
</html>


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: uninstall.php
SIZE: 960 B
MODIFIED: 2025-08-16 23:15:04
--------------------------------------------------------------------------------
<?php
/**
 * Uninstall script per WhatsApp SaaS Plugin
 * Eseguito quando il plugin viene disinstallato
 */

// Previeni accesso diretto
if (!defined('WP_UNINSTALL_PLUGIN')) {
    exit;
}

// Elimina tabelle database
global $wpdb;

$tables = array(
    $wpdb->prefix . 'wsp_whatsapp_numbers',
    $wpdb->prefix . 'wsp_messages', 
    $wpdb->prefix . 'wsp_activity_logs'
);

foreach ($tables as $table) {
    $wpdb->query("DROP TABLE IF EXISTS $table");
}

// Elimina opzioni WordPress
$options = array(
    'wsp_credits_balance',
    'wsp_api_key',
    'wsp_mail2wa_api_key', 
    'wsp_welcome_message',
    'wsp_low_credits_threshold',
    'wsp_auto_recharge_enabled',
    'wsp_auto_recharge_threshold',
    'wsp_auto_recharge_plan'
);

foreach ($options as $option) {
    delete_option($option);
}

// Rimuovi scheduled events  
wp_clear_scheduled_hook('wsp_daily_credit_check');

// Log finale
error_log('WhatsApp SaaS Plugin: Disinstallazione completata');

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
FILE: whatsapp-saas-plugin.php
SIZE: 3.46 KB
MODIFIED: 2025-08-18 18:38:43
--------------------------------------------------------------------------------
<?php
/**
 * Plugin Name: WhatsApp SaaS Plugin
 * Plugin URI: https://github.com/ferrantealberto/whatsapp-saas
 * Description: Plugin SaaS completo per gestione numeri WhatsApp con integrazione n8n
 * Version: 1.0.3
 * Author: Alberto Ferrante
 * Text Domain: wsp
 * Domain Path: /languages
 */

if (!defined('ABSPATH')) {
    exit;
}

define('WSP_VERSION', '1.0.3');
define('WSP_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('WSP_PLUGIN_URL', plugin_dir_url(__FILE__));
define('WSP_PLUGIN_BASENAME', plugin_basename(__FILE__));

class WhatsAppSaasPlugin {
    
    private static $instance = null;
    private $dependencies_loaded = false;
    private $admin = null;
    
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    private function __construct() {
        add_action('init', array($this, 'init'));
        add_action('rest_api_init', array($this, 'register_api_routes'));
        register_activation_hook(__FILE__, array($this, 'activate'));
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));
        
        // Aggiungi check migrazione
        add_action('admin_init', array($this, 'check_migration'));
    }
    
    public function init() {
        $this->load_dependencies();
        
        if (is_admin() && class_exists('WSP_Admin')) {
            $this->admin = new WSP_Admin();
        }
        
        load_plugin_textdomain('wsp', false, dirname(WSP_PLUGIN_BASENAME) . '/languages');
    }
    
    private function load_dependencies() {
        if ($this->dependencies_loaded) {
            return;
        }
        
        $files = array(
        'includes/class-wsp-database.php',
        'includes/class-wsp-migration.php',
        'includes/class-wsp-api.php',
        'includes/class-wsp-settings.php',
        'includes/class-wsp-campaigns.php',  // 👈 AGGIUNGI QUESTA LINEA
        'admin/class-wsp-admin.php',
        'includes/class-wsp-messages.php',
        'includes/class-wsp-credits.php'
        );
        
        foreach ($files as $file) {
            $file_path = WSP_PLUGIN_DIR . $file;
            if (file_exists($file_path)) {
                require_once $file_path;
            }
        }
        
        $this->dependencies_loaded = true;
    }
    
    public function check_migration() {
        if (class_exists('WSP_Migration')) {
            WSP_Migration::check_and_migrate();
        }
    }
    
    public function register_api_routes() {
        if (!class_exists('WSP_API')) {
            $this->load_dependencies();
        }
        
        $api = new WSP_API();
        $api->register_routes();
    }
    
    public function activate() {
        $this->load_dependencies();
        WSP_Database::create_tables();
        
        // Esegui migrazione
        if (class_exists('WSP_Migration')) {
            WSP_Migration::run_migration();
        }
        
        $this->add_default_data();
        flush_rewrite_rules();
    }
    
    public function deactivate() {
        flush_rewrite_rules();
    }
    
    private function add_default_data() {
        update_option('wsp_credits_balance', 1000);
        update_option('wsp_api_key', 'demo-api-key-9lz721sv0xTjFNVA');
        update_option('wsp_welcome_message', '🎉 Benvenuto! Il tuo numero WhatsApp è stato registrato con successo nel nostro sistema.');
    }
}

function wsp_init() {
    return WhatsAppSaasPlugin::get_instance();
}

wsp_init();


--------------------------------------------------------------------------------


================================================================================
FINE DUMP - Generato da Plugin Dumper v1.0
================================================================================
